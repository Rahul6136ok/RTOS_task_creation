
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006da0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08006f30  08006f30  00007f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070cc  080070cc  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  080070cc  080070cc  000080cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070d4  080070d4  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070d4  080070d4  000080d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070d8  080070d8  000080d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080070dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          0001448c  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a8  200144a8  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001507b  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031ae  00000000  00000000  0001e0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  00021278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f51  00000000  00000000  00022668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002139a  00000000  00000000  000235b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d45  00000000  00000000  00044953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9e3c  00000000  00000000  0005b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001354d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005370  00000000  00000000  00135518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000aa  00000000  00000000  0013a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f18 	.word	0x08006f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006f18 	.word	0x08006f18

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e88 	.word	0x20012e88

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f103 0208 	add.w	r2, r3, #8
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f04f 32ff 	mov.w	r2, #4294967295
 800056c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f103 0208 	add.w	r2, r3, #8
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	f103 0208 	add.w	r2, r3, #8
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005ae:	b480      	push	{r7}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d103      	bne.n	80005ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	691b      	ldr	r3, [r3, #16]
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e00c      	b.n	80005e8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3308      	adds	r3, #8
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	e002      	b.n	80005dc <vListInsert+0x2e>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d2f6      	bcs.n	80005d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1c5a      	adds	r2, r3, #1
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	691b      	ldr	r3, [r3, #16]
 800062c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	6892      	ldr	r2, [r2, #8]
 8000636:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	6852      	ldr	r2, [r2, #4]
 8000640:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	429a      	cmp	r2, r3
 800064a:	d103      	bne.n	8000654 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	689a      	ldr	r2, [r3, #8]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	1e5a      	subs	r2, r3, #1
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800067e:	2301      	movs	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d10b      	bne.n	80006a4 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800068c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d05d      	beq.n	8000766 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d059      	beq.n	8000766 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006ba:	2100      	movs	r1, #0
 80006bc:	fba3 2302 	umull	r2, r3, r3, r2
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d000      	beq.n	80006c6 <xQueueGenericReset+0x52>
 80006c4:	2101      	movs	r1, #1
 80006c6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d14c      	bne.n	8000766 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80006cc:	f001 ff0e 	bl	80024ec <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006d8:	6939      	ldr	r1, [r7, #16]
 80006da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80006dc:	fb01 f303 	mul.w	r3, r1, r3
 80006e0:	441a      	add	r2, r3
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	2200      	movs	r2, #0
 80006ea:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006fc:	3b01      	subs	r3, #1
 80006fe:	6939      	ldr	r1, [r7, #16]
 8000700:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000702:	fb01 f303 	mul.w	r3, r1, r3
 8000706:	441a      	add	r2, r3
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	22ff      	movs	r2, #255	@ 0xff
 8000710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	22ff      	movs	r2, #255	@ 0xff
 8000718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d114      	bne.n	800074c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	691b      	ldr	r3, [r3, #16]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d01a      	beq.n	8000760 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	3310      	adds	r3, #16
 800072e:	4618      	mov	r0, r3
 8000730:	f000 ffea 	bl	8001708 <xTaskRemoveFromEventList>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d012      	beq.n	8000760 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800073a:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <xQueueGenericReset+0x120>)
 800073c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	f3bf 8f4f 	dsb	sy
 8000746:	f3bf 8f6f 	isb	sy
 800074a:	e009      	b.n	8000760 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	3310      	adds	r3, #16
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff feff 	bl	8000554 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	3324      	adds	r3, #36	@ 0x24
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fefa 	bl	8000554 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000760:	f001 fef6 	bl	8002550 <vPortExitCritical>
 8000764:	e001      	b.n	800076a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d10b      	bne.n	8000788 <xQueueGenericReset+0x114>
        __asm volatile
 8000770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000774:	f383 8811 	msr	BASEPRI, r3
 8000778:	f3bf 8f6f 	isb	sy
 800077c:	f3bf 8f4f 	dsb	sy
 8000780:	60bb      	str	r3, [r7, #8]
    }
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000788:	697b      	ldr	r3, [r7, #20]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000ed04 	.word	0xe000ed04

08000798 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af02      	add	r7, sp, #8
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	4613      	mov	r3, r2
 80007a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d02e      	beq.n	800080e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007b0:	2100      	movs	r1, #0
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	fba3 2302 	umull	r2, r3, r3, r2
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d000      	beq.n	80007c0 <xQueueGenericCreate+0x28>
 80007be:	2101      	movs	r1, #1
 80007c0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d123      	bne.n	800080e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007ce:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80007d2:	d81c      	bhi.n	800080e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	fb02 f303 	mul.w	r3, r2, r3
 80007dc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	3350      	adds	r3, #80	@ 0x50
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 ffb4 	bl	8002750 <pvPortMalloc>
 80007e8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d01d      	beq.n	800082c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	3350      	adds	r3, #80	@ 0x50
 80007f8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	4613      	mov	r3, r2
 8000802:	697a      	ldr	r2, [r7, #20]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f000 f815 	bl	8000836 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800080c:	e00e      	b.n	800082c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d10b      	bne.n	800082c <xQueueGenericCreate+0x94>
        __asm volatile
 8000814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000818:	f383 8811 	msr	BASEPRI, r3
 800081c:	f3bf 8f6f 	isb	sy
 8000820:	f3bf 8f4f 	dsb	sy
 8000824:	613b      	str	r3, [r7, #16]
    }
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800082c:	69fb      	ldr	r3, [r7, #28]
    }
 800082e:	4618      	mov	r0, r3
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b084      	sub	sp, #16
 800083a:	af00      	add	r7, sp, #0
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d103      	bne.n	8000852 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800084a:	69bb      	ldr	r3, [r7, #24]
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	e002      	b.n	8000858 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000864:	2101      	movs	r1, #1
 8000866:	69b8      	ldr	r0, [r7, #24]
 8000868:	f7ff ff04 	bl	8000674 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	78fa      	ldrb	r2, [r7, #3]
 8000870:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	68f9      	ldr	r1, [r7, #12]
 800087a:	2073      	movs	r0, #115	@ 0x73
 800087c:	f003 fe30 	bl	80044e0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b08f      	sub	sp, #60	@ 0x3c
 800088c:	af02      	add	r7, sp, #8
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800089c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d10b      	bne.n	80008ba <xQueueReceive+0x32>
        __asm volatile
 80008a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a6:	f383 8811 	msr	BASEPRI, r3
 80008aa:	f3bf 8f6f 	isb	sy
 80008ae:	f3bf 8f4f 	dsb	sy
 80008b2:	623b      	str	r3, [r7, #32]
    }
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	e7fd      	b.n	80008b6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d103      	bne.n	80008c8 <xQueueReceive+0x40>
 80008c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <xQueueReceive+0x44>
 80008c8:	2301      	movs	r3, #1
 80008ca:	e000      	b.n	80008ce <xQueueReceive+0x46>
 80008cc:	2300      	movs	r3, #0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10b      	bne.n	80008ea <xQueueReceive+0x62>
        __asm volatile
 80008d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008d6:	f383 8811 	msr	BASEPRI, r3
 80008da:	f3bf 8f6f 	isb	sy
 80008de:	f3bf 8f4f 	dsb	sy
 80008e2:	61fb      	str	r3, [r7, #28]
    }
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	e7fd      	b.n	80008e6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008ea:	f001 f923 	bl	8001b34 <xTaskGetSchedulerState>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <xQueueReceive+0x72>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d101      	bne.n	80008fe <xQueueReceive+0x76>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <xQueueReceive+0x78>
 80008fe:	2300      	movs	r3, #0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10b      	bne.n	800091c <xQueueReceive+0x94>
        __asm volatile
 8000904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000908:	f383 8811 	msr	BASEPRI, r3
 800090c:	f3bf 8f6f 	isb	sy
 8000910:	f3bf 8f4f 	dsb	sy
 8000914:	61bb      	str	r3, [r7, #24]
    }
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800091c:	f001 fde6 	bl	80024ec <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000928:	2b00      	cmp	r3, #0
 800092a:	d02f      	beq.n	800098c <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800092c:	68b9      	ldr	r1, [r7, #8]
 800092e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000930:	f000 f8be 	bl	8000ab0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000936:	4618      	mov	r0, r3
 8000938:	f004 fafe 	bl	8004f38 <SEGGER_SYSVIEW_ShrinkId>
 800093c:	4604      	mov	r4, r0
 800093e:	2000      	movs	r0, #0
 8000940:	f004 fafa 	bl	8004f38 <SEGGER_SYSVIEW_ShrinkId>
 8000944:	4602      	mov	r2, r0
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2101      	movs	r1, #1
 800094a:	9100      	str	r1, [sp, #0]
 800094c:	4621      	mov	r1, r4
 800094e:	205c      	movs	r0, #92	@ 0x5c
 8000950:	f003 fe3c 	bl	80045cc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800095a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800095c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00f      	beq.n	8000984 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000966:	3310      	adds	r3, #16
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fecd 	bl	8001708 <xTaskRemoveFromEventList>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d007      	beq.n	8000984 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000974:	4b4d      	ldr	r3, [pc, #308]	@ (8000aac <xQueueReceive+0x224>)
 8000976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	f3bf 8f4f 	dsb	sy
 8000980:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000984:	f001 fde4 	bl	8002550 <vPortExitCritical>
                return pdPASS;
 8000988:	2301      	movs	r3, #1
 800098a:	e08a      	b.n	8000aa2 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d113      	bne.n	80009ba <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000992:	f001 fddd 	bl	8002550 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000998:	4618      	mov	r0, r3
 800099a:	f004 facd 	bl	8004f38 <SEGGER_SYSVIEW_ShrinkId>
 800099e:	4604      	mov	r4, r0
 80009a0:	2000      	movs	r0, #0
 80009a2:	f004 fac9 	bl	8004f38 <SEGGER_SYSVIEW_ShrinkId>
 80009a6:	4602      	mov	r2, r0
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2101      	movs	r1, #1
 80009ac:	9100      	str	r1, [sp, #0]
 80009ae:	4621      	mov	r1, r4
 80009b0:	205c      	movs	r0, #92	@ 0x5c
 80009b2:	f003 fe0b 	bl	80045cc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e073      	b.n	8000aa2 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d106      	bne.n	80009ce <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 ff79 	bl	80018bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009ce:	f001 fdbf 	bl	8002550 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009d2:	f000 fb73 	bl	80010bc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009d6:	f001 fd89 	bl	80024ec <vPortEnterCritical>
 80009da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e6:	d103      	bne.n	80009f0 <xQueueReceive+0x168>
 80009e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80009f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fc:	d103      	bne.n	8000a06 <xQueueReceive+0x17e>
 80009fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a06:	f001 fda3 	bl	8002550 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a0a:	1d3a      	adds	r2, r7, #4
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4611      	mov	r1, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 ff68 	bl	80018e8 <xTaskCheckForTimeOut>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d124      	bne.n	8000a68 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a20:	f000 f8be 	bl	8000ba0 <prvIsQueueEmpty>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d018      	beq.n	8000a5c <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a2c:	3324      	adds	r3, #36	@ 0x24
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fdf8 	bl	8001628 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000a38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a3a:	f000 f85f 	bl	8000afc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000a3e:	f000 fb4b 	bl	80010d8 <xTaskResumeAll>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	f47f af69 	bne.w	800091c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8000a4a:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <xQueueReceive+0x224>)
 8000a4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	f3bf 8f4f 	dsb	sy
 8000a56:	f3bf 8f6f 	isb	sy
 8000a5a:	e75f      	b.n	800091c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000a5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a5e:	f000 f84d 	bl	8000afc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a62:	f000 fb39 	bl	80010d8 <xTaskResumeAll>
 8000a66:	e759      	b.n	800091c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000a68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a6a:	f000 f847 	bl	8000afc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a6e:	f000 fb33 	bl	80010d8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000a74:	f000 f894 	bl	8000ba0 <prvIsQueueEmpty>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f43f af4e 	beq.w	800091c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 fa58 	bl	8004f38 <SEGGER_SYSVIEW_ShrinkId>
 8000a88:	4604      	mov	r4, r0
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f004 fa54 	bl	8004f38 <SEGGER_SYSVIEW_ShrinkId>
 8000a90:	4602      	mov	r2, r0
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2101      	movs	r1, #1
 8000a96:	9100      	str	r1, [sp, #0]
 8000a98:	4621      	mov	r1, r4
 8000a9a:	205c      	movs	r0, #92	@ 0x5c
 8000a9c:	f003 fd96 	bl	80045cc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000aa0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3734      	adds	r7, #52	@ 0x34
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd90      	pop	{r4, r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000ed04 	.word	0xe000ed04

08000ab0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d018      	beq.n	8000af4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	441a      	add	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d303      	bcc.n	8000ae4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68d9      	ldr	r1, [r3, #12]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aec:	461a      	mov	r2, r3
 8000aee:	6838      	ldr	r0, [r7, #0]
 8000af0:	f006 fa04 	bl	8006efc <memcpy>
    }
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b04:	f001 fcf2 	bl	80024ec <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b10:	e011      	b.n	8000b36 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d012      	beq.n	8000b40 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3324      	adds	r3, #36	@ 0x24
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fdf2 	bl	8001708 <xTaskRemoveFromEventList>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000b2a:	f000 ff45 	bl	80019b8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	dce9      	bgt.n	8000b12 <prvUnlockQueue+0x16>
 8000b3e:	e000      	b.n	8000b42 <prvUnlockQueue+0x46>
                    break;
 8000b40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	22ff      	movs	r2, #255	@ 0xff
 8000b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000b4a:	f001 fd01 	bl	8002550 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000b4e:	f001 fccd 	bl	80024ec <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b5a:	e011      	b.n	8000b80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d012      	beq.n	8000b8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3310      	adds	r3, #16
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 fdcd 	bl	8001708 <xTaskRemoveFromEventList>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000b74:	f000 ff20 	bl	80019b8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000b78:	7bbb      	ldrb	r3, [r7, #14]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dce9      	bgt.n	8000b5c <prvUnlockQueue+0x60>
 8000b88:	e000      	b.n	8000b8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000b8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	22ff      	movs	r2, #255	@ 0xff
 8000b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000b94:	f001 fcdc 	bl	8002550 <vPortExitCritical>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000ba8:	f001 fca0 	bl	80024ec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	e001      	b.n	8000bbe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000bbe:	f001 fcc7 	bl	8002550 <vPortExitCritical>

    return xReturn;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d10b      	bne.n	8000bf8 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8000be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000be4:	f383 8811 	msr	BASEPRI, r3
 8000be8:	f3bf 8f6f 	isb	sy
 8000bec:	f3bf 8f4f 	dsb	sy
 8000bf0:	60fb      	str	r3, [r7, #12]
    }
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d024      	beq.n	8000c48 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	e01e      	b.n	8000c42 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000c04:	4a1c      	ldr	r2, [pc, #112]	@ (8000c78 <vQueueAddToRegistry+0xac>)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d105      	bne.n	8000c20 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	4a17      	ldr	r2, [pc, #92]	@ (8000c78 <vQueueAddToRegistry+0xac>)
 8000c1a:	4413      	add	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
                    break;
 8000c1e:	e013      	b.n	8000c48 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10a      	bne.n	8000c3c <vQueueAddToRegistry+0x70>
 8000c26:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <vQueueAddToRegistry+0xac>)
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d104      	bne.n	8000c3c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	4a10      	ldr	r2, [pc, #64]	@ (8000c78 <vQueueAddToRegistry+0xac>)
 8000c38:	4413      	add	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d9dd      	bls.n	8000c04 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00f      	beq.n	8000c6e <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	683a      	ldr	r2, [r7, #0]
 8000c52:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f004 f96b 	bl	8004f38 <SEGGER_SYSVIEW_ShrinkId>
 8000c62:	4601      	mov	r1, r0
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	2071      	movs	r0, #113	@ 0x71
 8000c6a:	f003 fbdf 	bl	800442c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000038 	.word	0x20000038

08000c7c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000c8c:	f001 fc2e 	bl	80024ec <vPortEnterCritical>
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000c96:	b25b      	sxtb	r3, r3
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9c:	d103      	bne.n	8000ca6 <vQueueWaitForMessageRestricted+0x2a>
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb2:	d103      	bne.n	8000cbc <vQueueWaitForMessageRestricted+0x40>
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000cbc:	f001 fc48 	bl	8002550 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d106      	bne.n	8000cd6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3324      	adds	r3, #36	@ 0x24
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fccf 	bl	8001674 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff10 	bl	8000afc <prvUnlockQueue>
    }
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	@ 0x30
 8000ce8:	af04      	add	r7, sp, #16
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f001 fd29 	bl	8002750 <pvPortMalloc>
 8000cfe:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d013      	beq.n	8000d2e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d06:	2058      	movs	r0, #88	@ 0x58
 8000d08:	f001 fd22 	bl	8002750 <pvPortMalloc>
 8000d0c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d008      	beq.n	8000d26 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000d14:	2258      	movs	r2, #88	@ 0x58
 8000d16:	2100      	movs	r1, #0
 8000d18:	69f8      	ldr	r0, [r7, #28]
 8000d1a:	f006 f8c3 	bl	8006ea4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d24:	e005      	b.n	8000d32 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f001 fdce 	bl	80028c8 <vPortFree>
 8000d2c:	e001      	b.n	8000d32 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d013      	beq.n	8000d60 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d38:	88fa      	ldrh	r2, [r7, #6]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9303      	str	r3, [sp, #12]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f000 f80e 	bl	8000d70 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000d54:	69f8      	ldr	r0, [r7, #28]
 8000d56:	f000 f89b 	bl	8000e90 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	e002      	b.n	8000d66 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000d66:	69bb      	ldr	r3, [r7, #24]
    }
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	461a      	mov	r2, r3
 8000d88:	21a5      	movs	r1, #165	@ 0xa5
 8000d8a:	f006 f88b 	bl	8006ea4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	f023 0307 	bic.w	r3, r3, #7
 8000da6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00b      	beq.n	8000dca <prvInitialiseNewTask+0x5a>
        __asm volatile
 8000db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000db6:	f383 8811 	msr	BASEPRI, r3
 8000dba:	f3bf 8f6f 	isb	sy
 8000dbe:	f3bf 8f4f 	dsb	sy
 8000dc2:	617b      	str	r3, [r7, #20]
    }
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	e7fd      	b.n	8000dc6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d01e      	beq.n	8000e0e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	e012      	b.n	8000dfc <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	4413      	add	r3, r2
 8000ddc:	7819      	ldrb	r1, [r3, #0]
 8000dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	4413      	add	r3, r2
 8000de4:	3334      	adds	r3, #52	@ 0x34
 8000de6:	460a      	mov	r2, r1
 8000de8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	4413      	add	r3, r2
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	61fb      	str	r3, [r7, #28]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	2b09      	cmp	r3, #9
 8000e00:	d9e9      	bls.n	8000dd6 <prvInitialiseNewTask+0x66>
 8000e02:	e000      	b.n	8000e06 <prvInitialiseNewTask+0x96>
            {
                break;
 8000e04:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d90b      	bls.n	8000e2c <prvInitialiseNewTask+0xbc>
        __asm volatile
 8000e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e18:	f383 8811 	msr	BASEPRI, r3
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	f3bf 8f4f 	dsb	sy
 8000e24:	613b      	str	r3, [r7, #16]
    }
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	d901      	bls.n	8000e36 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e32:	2304      	movs	r3, #4
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e40:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e44:	3304      	adds	r3, #4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fba4 	bl	8000594 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e4e:	3318      	adds	r3, #24
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fb9f 	bl	8000594 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e5a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e5e:	f1c3 0205 	rsb	r2, r3, #5
 8000e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e64:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e6a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	68f9      	ldr	r1, [r7, #12]
 8000e70:	69b8      	ldr	r0, [r7, #24]
 8000e72:	f001 f989 	bl	8002188 <pxPortInitialiseStack>
 8000e76:	4602      	mov	r2, r0
 8000e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e7a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e86:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000e88:	bf00      	nop
 8000e8a:	3720      	adds	r7, #32
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000e98:	f001 fb28 	bl	80024ec <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000e9c:	4b4f      	ldr	r3, [pc, #316]	@ (8000fdc <prvAddNewTaskToReadyList+0x14c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a4e      	ldr	r2, [pc, #312]	@ (8000fdc <prvAddNewTaskToReadyList+0x14c>)
 8000ea4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000ea6:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe0 <prvAddNewTaskToReadyList+0x150>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d109      	bne.n	8000ec2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000eae:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe0 <prvAddNewTaskToReadyList+0x150>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000eb4:	4b49      	ldr	r3, [pc, #292]	@ (8000fdc <prvAddNewTaskToReadyList+0x14c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d110      	bne.n	8000ede <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ebc:	f000 fda0 	bl	8001a00 <prvInitialiseTaskLists>
 8000ec0:	e00d      	b.n	8000ede <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000ec2:	4b48      	ldr	r3, [pc, #288]	@ (8000fe4 <prvAddNewTaskToReadyList+0x154>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d109      	bne.n	8000ede <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000eca:	4b45      	ldr	r3, [pc, #276]	@ (8000fe0 <prvAddNewTaskToReadyList+0x150>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d802      	bhi.n	8000ede <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000ed8:	4a41      	ldr	r2, [pc, #260]	@ (8000fe0 <prvAddNewTaskToReadyList+0x150>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000ede:	4b42      	ldr	r3, [pc, #264]	@ (8000fe8 <prvAddNewTaskToReadyList+0x158>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a40      	ldr	r2, [pc, #256]	@ (8000fe8 <prvAddNewTaskToReadyList+0x158>)
 8000ee6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8000fe8 <prvAddNewTaskToReadyList+0x158>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d016      	beq.n	8000f24 <prvAddNewTaskToReadyList+0x94>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 ff57 	bl	8004dac <SEGGER_SYSVIEW_OnTaskCreate>
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	461d      	mov	r5, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	461c      	mov	r4, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	1ae3      	subs	r3, r4, r3
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	462b      	mov	r3, r5
 8000f20:	f001 fe96 	bl	8002c50 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 ffc4 	bl	8004eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f30:	2201      	movs	r2, #1
 8000f32:	409a      	lsls	r2, r3
 8000f34:	4b2d      	ldr	r3, [pc, #180]	@ (8000fec <prvAddNewTaskToReadyList+0x15c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000fec <prvAddNewTaskToReadyList+0x15c>)
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f42:	492b      	ldr	r1, [pc, #172]	@ (8000ff0 <prvAddNewTaskToReadyList+0x160>)
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	3304      	adds	r3, #4
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	3204      	adds	r2, #4
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	1d1a      	adds	r2, r3, #4
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff0 <prvAddNewTaskToReadyList+0x160>)
 8000f82:	441a      	add	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f8c:	4918      	ldr	r1, [pc, #96]	@ (8000ff0 <prvAddNewTaskToReadyList+0x160>)
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1c59      	adds	r1, r3, #1
 8000f9c:	4814      	ldr	r0, [pc, #80]	@ (8000ff0 <prvAddNewTaskToReadyList+0x160>)
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4403      	add	r3, r0
 8000fa8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000faa:	f001 fad1 	bl	8002550 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <prvAddNewTaskToReadyList+0x154>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00e      	beq.n	8000fd4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <prvAddNewTaskToReadyList+0x150>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <prvAddNewTaskToReadyList+0x164>)
 8000fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	f3bf 8f4f 	dsb	sy
 8000fd0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bdb0      	pop	{r4, r5, r7, pc}
 8000fdc:	20000150 	.word	0x20000150
 8000fe0:	20000078 	.word	0x20000078
 8000fe4:	2000015c 	.word	0x2000015c
 8000fe8:	2000016c 	.word	0x2000016c
 8000fec:	20000158 	.word	0x20000158
 8000ff0:	2000007c 	.word	0x2000007c
 8000ff4:	e000ed04 	.word	0xe000ed04

08000ff8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000ffe:	4b27      	ldr	r3, [pc, #156]	@ (800109c <vTaskStartScheduler+0xa4>)
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	2300      	movs	r3, #0
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2300      	movs	r3, #0
 8001008:	2282      	movs	r2, #130	@ 0x82
 800100a:	4925      	ldr	r1, [pc, #148]	@ (80010a0 <vTaskStartScheduler+0xa8>)
 800100c:	4825      	ldr	r0, [pc, #148]	@ (80010a4 <vTaskStartScheduler+0xac>)
 800100e:	f7ff fe69 	bl	8000ce4 <xTaskCreate>
 8001012:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d102      	bne.n	8001020 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800101a:	f000 fe29 	bl	8001c70 <xTimerCreateTimerTask>
 800101e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d124      	bne.n	8001070 <vTaskStartScheduler+0x78>
        __asm volatile
 8001026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800102a:	f383 8811 	msr	BASEPRI, r3
 800102e:	f3bf 8f6f 	isb	sy
 8001032:	f3bf 8f4f 	dsb	sy
 8001036:	60bb      	str	r3, [r7, #8]
    }
 8001038:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800103a:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <vTaskStartScheduler+0xb0>)
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001042:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <vTaskStartScheduler+0xb4>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001048:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <vTaskStartScheduler+0xb8>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800104e:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <vTaskStartScheduler+0xbc>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b12      	ldr	r3, [pc, #72]	@ (800109c <vTaskStartScheduler+0xa4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d102      	bne.n	8001060 <vTaskStartScheduler+0x68>
 800105a:	f003 fe8b 	bl	8004d74 <SEGGER_SYSVIEW_OnIdle>
 800105e:	e004      	b.n	800106a <vTaskStartScheduler+0x72>
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <vTaskStartScheduler+0xbc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fee3 	bl	8004e30 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800106a:	f001 f91b 	bl	80022a4 <xPortStartScheduler>
 800106e:	e00f      	b.n	8001090 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001076:	d10b      	bne.n	8001090 <vTaskStartScheduler+0x98>
        __asm volatile
 8001078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800107c:	f383 8811 	msr	BASEPRI, r3
 8001080:	f3bf 8f6f 	isb	sy
 8001084:	f3bf 8f4f 	dsb	sy
 8001088:	607b      	str	r3, [r7, #4]
    }
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <vTaskStartScheduler+0xc0>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000174 	.word	0x20000174
 80010a0:	08006f30 	.word	0x08006f30
 80010a4:	080019d1 	.word	0x080019d1
 80010a8:	20000170 	.word	0x20000170
 80010ac:	2000015c 	.word	0x2000015c
 80010b0:	20000154 	.word	0x20000154
 80010b4:	20000078 	.word	0x20000078
 80010b8:	20000000 	.word	0x20000000

080010bc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <vTaskSuspendAll+0x18>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	4a03      	ldr	r2, [pc, #12]	@ (80010d4 <vTaskSuspendAll+0x18>)
 80010c8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	20000178 	.word	0x20000178

080010d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80010e6:	4b73      	ldr	r3, [pc, #460]	@ (80012b4 <xTaskResumeAll+0x1dc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10b      	bne.n	8001106 <xTaskResumeAll+0x2e>
        __asm volatile
 80010ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f2:	f383 8811 	msr	BASEPRI, r3
 80010f6:	f3bf 8f6f 	isb	sy
 80010fa:	f3bf 8f4f 	dsb	sy
 80010fe:	607b      	str	r3, [r7, #4]
    }
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	e7fd      	b.n	8001102 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001106:	f001 f9f1 	bl	80024ec <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800110a:	4b6a      	ldr	r3, [pc, #424]	@ (80012b4 <xTaskResumeAll+0x1dc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3b01      	subs	r3, #1
 8001110:	4a68      	ldr	r2, [pc, #416]	@ (80012b4 <xTaskResumeAll+0x1dc>)
 8001112:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001114:	4b67      	ldr	r3, [pc, #412]	@ (80012b4 <xTaskResumeAll+0x1dc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f040 80c4 	bne.w	80012a6 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800111e:	4b66      	ldr	r3, [pc, #408]	@ (80012b8 <xTaskResumeAll+0x1e0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80bf 	beq.w	80012a6 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001128:	e08e      	b.n	8001248 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800112a:	4b64      	ldr	r3, [pc, #400]	@ (80012bc <xTaskResumeAll+0x1e4>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	6a12      	ldr	r2, [r2, #32]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	69d2      	ldr	r2, [r2, #28]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	3318      	adds	r3, #24
 8001154:	429a      	cmp	r2, r3
 8001156:	d103      	bne.n	8001160 <xTaskResumeAll+0x88>
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	6a1a      	ldr	r2, [r3, #32]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	@ 0x28
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1e5a      	subs	r2, r3, #1
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	68d2      	ldr	r2, [r2, #12]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	6892      	ldr	r2, [r2, #8]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	429a      	cmp	r2, r3
 8001194:	d103      	bne.n	800119e <xTaskResumeAll+0xc6>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fe7f 	bl	8004eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ba:	2201      	movs	r2, #1
 80011bc:	409a      	lsls	r2, r3
 80011be:	4b40      	ldr	r3, [pc, #256]	@ (80012c0 <xTaskResumeAll+0x1e8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	4a3e      	ldr	r2, [pc, #248]	@ (80012c0 <xTaskResumeAll+0x1e8>)
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011cc:	493d      	ldr	r1, [pc, #244]	@ (80012c4 <xTaskResumeAll+0x1ec>)
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	3304      	adds	r3, #4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	3204      	adds	r2, #4
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	1d1a      	adds	r2, r3, #4
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4a2e      	ldr	r2, [pc, #184]	@ (80012c4 <xTaskResumeAll+0x1ec>)
 800120c:	441a      	add	r2, r3
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	615a      	str	r2, [r3, #20]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001216:	492b      	ldr	r1, [pc, #172]	@ (80012c4 <xTaskResumeAll+0x1ec>)
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	1c59      	adds	r1, r3, #1
 8001226:	4827      	ldr	r0, [pc, #156]	@ (80012c4 <xTaskResumeAll+0x1ec>)
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4403      	add	r3, r0
 8001232:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001238:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <xTaskResumeAll+0x1f0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800123e:	429a      	cmp	r2, r3
 8001240:	d302      	bcc.n	8001248 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8001242:	4b22      	ldr	r3, [pc, #136]	@ (80012cc <xTaskResumeAll+0x1f4>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001248:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <xTaskResumeAll+0x1e4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f47f af6c 	bne.w	800112a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001258:	f000 fc50 	bl	8001afc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800125c:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <xTaskResumeAll+0x1f8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d010      	beq.n	800128a <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001268:	f000 f858 	bl	800131c <xTaskIncrementTick>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8001272:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <xTaskResumeAll+0x1f4>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3b01      	subs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f1      	bne.n	8001268 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <xTaskResumeAll+0x1f8>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800128a:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <xTaskResumeAll+0x1f4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001292:	2301      	movs	r3, #1
 8001294:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <xTaskResumeAll+0x1fc>)
 8001298:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	f3bf 8f4f 	dsb	sy
 80012a2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80012a6:	f001 f953 	bl	8002550 <vPortExitCritical>

    return xAlreadyYielded;
 80012aa:	69bb      	ldr	r3, [r7, #24]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000178 	.word	0x20000178
 80012b8:	20000150 	.word	0x20000150
 80012bc:	20000110 	.word	0x20000110
 80012c0:	20000158 	.word	0x20000158
 80012c4:	2000007c 	.word	0x2000007c
 80012c8:	20000078 	.word	0x20000078
 80012cc:	20000164 	.word	0x20000164
 80012d0:	20000160 	.word	0x20000160
 80012d4:	e000ed04 	.word	0xe000ed04

080012d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <xTaskGetTickCount+0x1c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000154 	.word	0x20000154

080012f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80012fe:	f001 f9e5 	bl	80026cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <xTaskGetTickCountFromISR+0x20>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800130c:	683b      	ldr	r3, [r7, #0]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000154 	.word	0x20000154

0800131c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001326:	4b80      	ldr	r3, [pc, #512]	@ (8001528 <xTaskIncrementTick+0x20c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 80f1 	bne.w	8001512 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001330:	4b7e      	ldr	r3, [pc, #504]	@ (800152c <xTaskIncrementTick+0x210>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001338:	4a7c      	ldr	r2, [pc, #496]	@ (800152c <xTaskIncrementTick+0x210>)
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d121      	bne.n	8001388 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001344:	4b7a      	ldr	r3, [pc, #488]	@ (8001530 <xTaskIncrementTick+0x214>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <xTaskIncrementTick+0x4a>
        __asm volatile
 800134e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001352:	f383 8811 	msr	BASEPRI, r3
 8001356:	f3bf 8f6f 	isb	sy
 800135a:	f3bf 8f4f 	dsb	sy
 800135e:	607b      	str	r3, [r7, #4]
    }
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	e7fd      	b.n	8001362 <xTaskIncrementTick+0x46>
 8001366:	4b72      	ldr	r3, [pc, #456]	@ (8001530 <xTaskIncrementTick+0x214>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	4b71      	ldr	r3, [pc, #452]	@ (8001534 <xTaskIncrementTick+0x218>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a6f      	ldr	r2, [pc, #444]	@ (8001530 <xTaskIncrementTick+0x214>)
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4a6f      	ldr	r2, [pc, #444]	@ (8001534 <xTaskIncrementTick+0x218>)
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b6f      	ldr	r3, [pc, #444]	@ (8001538 <xTaskIncrementTick+0x21c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a6d      	ldr	r2, [pc, #436]	@ (8001538 <xTaskIncrementTick+0x21c>)
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	f000 fbba 	bl	8001afc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001388:	4b6c      	ldr	r3, [pc, #432]	@ (800153c <xTaskIncrementTick+0x220>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6a3a      	ldr	r2, [r7, #32]
 800138e:	429a      	cmp	r2, r3
 8001390:	f0c0 80aa 	bcc.w	80014e8 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001394:	4b66      	ldr	r3, [pc, #408]	@ (8001530 <xTaskIncrementTick+0x214>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d104      	bne.n	80013a8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800139e:	4b67      	ldr	r3, [pc, #412]	@ (800153c <xTaskIncrementTick+0x220>)
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	601a      	str	r2, [r3, #0]
                    break;
 80013a6:	e09f      	b.n	80014e8 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013a8:	4b61      	ldr	r3, [pc, #388]	@ (8001530 <xTaskIncrementTick+0x214>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80013b8:	6a3a      	ldr	r2, [r7, #32]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d203      	bcs.n	80013c8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80013c0:	4a5e      	ldr	r2, [pc, #376]	@ (800153c <xTaskIncrementTick+0x220>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80013c6:	e08f      	b.n	80014e8 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	68d2      	ldr	r2, [r2, #12]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	6892      	ldr	r2, [r2, #8]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	3304      	adds	r3, #4
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d103      	bne.n	80013f6 <xTaskIncrementTick+0xda>
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	1e5a      	subs	r2, r3, #1
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01e      	beq.n	800144c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	6a12      	ldr	r2, [r2, #32]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	69d2      	ldr	r2, [r2, #28]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	3318      	adds	r3, #24
 8001430:	429a      	cmp	r2, r3
 8001432:	d103      	bne.n	800143c <xTaskIncrementTick+0x120>
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6a1a      	ldr	r2, [r3, #32]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	4618      	mov	r0, r3
 8001450:	f003 fd30 	bl	8004eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001458:	2201      	movs	r2, #1
 800145a:	409a      	lsls	r2, r3
 800145c:	4b38      	ldr	r3, [pc, #224]	@ (8001540 <xTaskIncrementTick+0x224>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4313      	orrs	r3, r2
 8001462:	4a37      	ldr	r2, [pc, #220]	@ (8001540 <xTaskIncrementTick+0x224>)
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800146a:	4936      	ldr	r1, [pc, #216]	@ (8001544 <xTaskIncrementTick+0x228>)
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3304      	adds	r3, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	3204      	adds	r2, #4
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	1d1a      	adds	r2, r3, #4
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4a26      	ldr	r2, [pc, #152]	@ (8001544 <xTaskIncrementTick+0x228>)
 80014aa:	441a      	add	r2, r3
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014b4:	4923      	ldr	r1, [pc, #140]	@ (8001544 <xTaskIncrementTick+0x228>)
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1c59      	adds	r1, r3, #1
 80014c4:	481f      	ldr	r0, [pc, #124]	@ (8001544 <xTaskIncrementTick+0x228>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4403      	add	r3, r0
 80014d0:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <xTaskIncrementTick+0x22c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014dc:	429a      	cmp	r2, r3
 80014de:	f67f af59 	bls.w	8001394 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014e6:	e755      	b.n	8001394 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <xTaskIncrementTick+0x22c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ee:	4915      	ldr	r1, [pc, #84]	@ (8001544 <xTaskIncrementTick+0x228>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d901      	bls.n	8001504 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8001500:	2301      	movs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <xTaskIncrementTick+0x230>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 800150c:	2301      	movs	r3, #1
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001510:	e004      	b.n	800151c <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001512:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <xTaskIncrementTick+0x234>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <xTaskIncrementTick+0x234>)
 800151a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800151e:	4618      	mov	r0, r3
 8001520:	3728      	adds	r7, #40	@ 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000178 	.word	0x20000178
 800152c:	20000154 	.word	0x20000154
 8001530:	20000108 	.word	0x20000108
 8001534:	2000010c 	.word	0x2000010c
 8001538:	20000168 	.word	0x20000168
 800153c:	20000170 	.word	0x20000170
 8001540:	20000158 	.word	0x20000158
 8001544:	2000007c 	.word	0x2000007c
 8001548:	20000078 	.word	0x20000078
 800154c:	20000164 	.word	0x20000164
 8001550:	20000160 	.word	0x20000160

08001554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800155a:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <vTaskSwitchContext+0xbc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001562:	4b2c      	ldr	r3, [pc, #176]	@ (8001614 <vTaskSwitchContext+0xc0>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001568:	e04e      	b.n	8001608 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800156a:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <vTaskSwitchContext+0xc0>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001570:	4b29      	ldr	r3, [pc, #164]	@ (8001618 <vTaskSwitchContext+0xc4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	f1c3 031f 	rsb	r3, r3, #31
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	4925      	ldr	r1, [pc, #148]	@ (800161c <vTaskSwitchContext+0xc8>)
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10b      	bne.n	80015b2 <vTaskSwitchContext+0x5e>
        __asm volatile
 800159a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800159e:	f383 8811 	msr	BASEPRI, r3
 80015a2:	f3bf 8f6f 	isb	sy
 80015a6:	f3bf 8f4f 	dsb	sy
 80015aa:	607b      	str	r3, [r7, #4]
    }
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	e7fd      	b.n	80015ae <vTaskSwitchContext+0x5a>
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4a17      	ldr	r2, [pc, #92]	@ (800161c <vTaskSwitchContext+0xc8>)
 80015be:	4413      	add	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	3308      	adds	r3, #8
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d104      	bne.n	80015e2 <vTaskSwitchContext+0x8e>
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <vTaskSwitchContext+0xcc>)
 80015ea:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <vTaskSwitchContext+0xcc>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <vTaskSwitchContext+0xd0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d102      	bne.n	80015fe <vTaskSwitchContext+0xaa>
 80015f8:	f003 fbbc 	bl	8004d74 <SEGGER_SYSVIEW_OnIdle>
}
 80015fc:	e004      	b.n	8001608 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <vTaskSwitchContext+0xcc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fc14 	bl	8004e30 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001608:	bf00      	nop
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000178 	.word	0x20000178
 8001614:	20000164 	.word	0x20000164
 8001618:	20000158 	.word	0x20000158
 800161c:	2000007c 	.word	0x2000007c
 8001620:	20000078 	.word	0x20000078
 8001624:	20000174 	.word	0x20000174

08001628 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10b      	bne.n	8001650 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8001638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800163c:	f383 8811 	msr	BASEPRI, r3
 8001640:	f3bf 8f6f 	isb	sy
 8001644:	f3bf 8f4f 	dsb	sy
 8001648:	60fb      	str	r3, [r7, #12]
    }
 800164a:	bf00      	nop
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001650:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <vTaskPlaceOnEventList+0x48>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3318      	adds	r3, #24
 8001656:	4619      	mov	r1, r3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7fe ffa8 	bl	80005ae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800165e:	2101      	movs	r1, #1
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f000 fa85 	bl	8001b70 <prvAddCurrentTaskToDelayedList>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000078 	.word	0x20000078

08001674 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10b      	bne.n	800169e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8001686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800168a:	f383 8811 	msr	BASEPRI, r3
 800168e:	f3bf 8f6f 	isb	sy
 8001692:	f3bf 8f4f 	dsb	sy
 8001696:	613b      	str	r3, [r7, #16]
    }
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	e7fd      	b.n	800169a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <vTaskPlaceOnEventListRestricted+0x90>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	61da      	str	r2, [r3, #28]
 80016ac:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <vTaskPlaceOnEventListRestricted+0x90>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	6892      	ldr	r2, [r2, #8]
 80016b4:	621a      	str	r2, [r3, #32]
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <vTaskPlaceOnEventListRestricted+0x90>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	3218      	adds	r2, #24
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <vTaskPlaceOnEventListRestricted+0x90>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f103 0218 	add.w	r2, r3, #24
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <vTaskPlaceOnEventListRestricted+0x90>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80016ec:	2024      	movs	r0, #36	@ 0x24
 80016ee:	f002 fe43 	bl	8004378 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	68b8      	ldr	r0, [r7, #8]
 80016f6:	f000 fa3b 	bl	8001b70 <prvAddCurrentTaskToDelayedList>
    }
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000078 	.word	0x20000078

08001708 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10b      	bne.n	8001736 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800171e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001722:	f383 8811 	msr	BASEPRI, r3
 8001726:	f3bf 8f6f 	isb	sy
 800172a:	f3bf 8f4f 	dsb	sy
 800172e:	60fb      	str	r3, [r7, #12]
    }
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	e7fd      	b.n	8001732 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	6a3a      	ldr	r2, [r7, #32]
 8001742:	6a12      	ldr	r2, [r2, #32]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	6a3a      	ldr	r2, [r7, #32]
 800174c:	69d2      	ldr	r2, [r2, #28]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	3318      	adds	r3, #24
 8001758:	429a      	cmp	r2, r3
 800175a:	d103      	bne.n	8001764 <xTaskRemoveFromEventList+0x5c>
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	6a1a      	ldr	r2, [r3, #32]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	2200      	movs	r2, #0
 8001768:	629a      	str	r2, [r3, #40]	@ 0x28
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001774:	4b4b      	ldr	r3, [pc, #300]	@ (80018a4 <xTaskRemoveFromEventList+0x19c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d162      	bne.n	8001842 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	6a3a      	ldr	r2, [r7, #32]
 8001788:	68d2      	ldr	r2, [r2, #12]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	6a3a      	ldr	r2, [r7, #32]
 8001792:	6892      	ldr	r2, [r2, #8]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	3304      	adds	r3, #4
 800179e:	429a      	cmp	r2, r3
 80017a0:	d103      	bne.n	80017aa <xTaskRemoveFromEventList+0xa2>
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	1e5a      	subs	r2, r3, #1
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 fb79 	bl	8004eb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c6:	2201      	movs	r2, #1
 80017c8:	409a      	lsls	r2, r3
 80017ca:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <xTaskRemoveFromEventList+0x1a0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	4a35      	ldr	r2, [pc, #212]	@ (80018a8 <xTaskRemoveFromEventList+0x1a0>)
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017d8:	4934      	ldr	r1, [pc, #208]	@ (80018ac <xTaskRemoveFromEventList+0x1a4>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	3304      	adds	r3, #4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	60da      	str	r2, [r3, #12]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	6a3a      	ldr	r2, [r7, #32]
 80017fe:	3204      	adds	r2, #4
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	1d1a      	adds	r2, r3, #4
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4a25      	ldr	r2, [pc, #148]	@ (80018ac <xTaskRemoveFromEventList+0x1a4>)
 8001818:	441a      	add	r2, r3
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001822:	4922      	ldr	r1, [pc, #136]	@ (80018ac <xTaskRemoveFromEventList+0x1a4>)
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	1c59      	adds	r1, r3, #1
 8001832:	481e      	ldr	r0, [pc, #120]	@ (80018ac <xTaskRemoveFromEventList+0x1a4>)
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4403      	add	r3, r0
 800183e:	6019      	str	r1, [r3, #0]
 8001840:	e01b      	b.n	800187a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001842:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <xTaskRemoveFromEventList+0x1a8>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	61da      	str	r2, [r3, #28]
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	621a      	str	r2, [r3, #32]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	6a3a      	ldr	r2, [r7, #32]
 800185c:	3218      	adds	r2, #24
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f103 0218 	add.w	r2, r3, #24
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	4a10      	ldr	r2, [pc, #64]	@ (80018b0 <xTaskRemoveFromEventList+0x1a8>)
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001870:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <xTaskRemoveFromEventList+0x1a8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <xTaskRemoveFromEventList+0x1a8>)
 8001878:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <xTaskRemoveFromEventList+0x1ac>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001884:	429a      	cmp	r2, r3
 8001886:	d905      	bls.n	8001894 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001888:	2301      	movs	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800188c:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <xTaskRemoveFromEventList+0x1b0>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e001      	b.n	8001898 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800189a:	4618      	mov	r0, r3
 800189c:	3728      	adds	r7, #40	@ 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000178 	.word	0x20000178
 80018a8:	20000158 	.word	0x20000158
 80018ac:	2000007c 	.word	0x2000007c
 80018b0:	20000110 	.word	0x20000110
 80018b4:	20000078 	.word	0x20000078
 80018b8:	20000164 	.word	0x20000164

080018bc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <vTaskInternalSetTimeOutState+0x24>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <vTaskInternalSetTimeOutState+0x28>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	605a      	str	r2, [r3, #4]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	20000168 	.word	0x20000168
 80018e4:	20000154 	.word	0x20000154

080018e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10b      	bne.n	8001910 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80018f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018fc:	f383 8811 	msr	BASEPRI, r3
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	613b      	str	r3, [r7, #16]
    }
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10b      	bne.n	800192e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8001916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800191a:	f383 8811 	msr	BASEPRI, r3
 800191e:	f3bf 8f6f 	isb	sy
 8001922:	f3bf 8f4f 	dsb	sy
 8001926:	60fb      	str	r3, [r7, #12]
    }
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	e7fd      	b.n	800192a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800192e:	f000 fddd 	bl	80024ec <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001932:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <xTaskCheckForTimeOut+0xc8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194a:	d102      	bne.n	8001952 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	e026      	b.n	80019a0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b17      	ldr	r3, [pc, #92]	@ (80019b4 <xTaskCheckForTimeOut+0xcc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d00a      	beq.n	8001974 <xTaskCheckForTimeOut+0x8c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	429a      	cmp	r2, r3
 8001966:	d305      	bcc.n	8001974 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	e015      	b.n	80019a0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	429a      	cmp	r2, r3
 800197c:	d20b      	bcs.n	8001996 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	1ad2      	subs	r2, r2, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ff96 	bl	80018bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	e004      	b.n	80019a0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800199c:	2301      	movs	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80019a0:	f000 fdd6 	bl	8002550 <vPortExitCritical>

    return xReturn;
 80019a4:	69fb      	ldr	r3, [r7, #28]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000154 	.word	0x20000154
 80019b4:	20000168 	.word	0x20000168

080019b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <vTaskMissedYield+0x14>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	20000164 	.word	0x20000164

080019d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80019d8:	f000 f852 	bl	8001a80 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <prvIdleTask+0x28>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d9f9      	bls.n	80019d8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <prvIdleTask+0x2c>)
 80019e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	f3bf 8f4f 	dsb	sy
 80019f0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80019f4:	e7f0      	b.n	80019d8 <prvIdleTask+0x8>
 80019f6:	bf00      	nop
 80019f8:	2000007c 	.word	0x2000007c
 80019fc:	e000ed04 	.word	0xe000ed04

08001a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	e00c      	b.n	8001a26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <prvInitialiseTaskLists+0x60>)
 8001a18:	4413      	add	r3, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fd9a 	bl	8000554 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3301      	adds	r3, #1
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d9ef      	bls.n	8001a0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001a2c:	480d      	ldr	r0, [pc, #52]	@ (8001a64 <prvInitialiseTaskLists+0x64>)
 8001a2e:	f7fe fd91 	bl	8000554 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001a32:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <prvInitialiseTaskLists+0x68>)
 8001a34:	f7fe fd8e 	bl	8000554 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <prvInitialiseTaskLists+0x6c>)
 8001a3a:	f7fe fd8b 	bl	8000554 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001a3e:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <prvInitialiseTaskLists+0x70>)
 8001a40:	f7fe fd88 	bl	8000554 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001a44:	480b      	ldr	r0, [pc, #44]	@ (8001a74 <prvInitialiseTaskLists+0x74>)
 8001a46:	f7fe fd85 	bl	8000554 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <prvInitialiseTaskLists+0x78>)
 8001a4c:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <prvInitialiseTaskLists+0x64>)
 8001a4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <prvInitialiseTaskLists+0x7c>)
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <prvInitialiseTaskLists+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000007c 	.word	0x2000007c
 8001a64:	200000e0 	.word	0x200000e0
 8001a68:	200000f4 	.word	0x200000f4
 8001a6c:	20000110 	.word	0x20000110
 8001a70:	20000124 	.word	0x20000124
 8001a74:	2000013c 	.word	0x2000013c
 8001a78:	20000108 	.word	0x20000108
 8001a7c:	2000010c 	.word	0x2000010c

08001a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a86:	e019      	b.n	8001abc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001a88:	f000 fd30 	bl	80024ec <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <prvCheckTasksWaitingTermination+0x50>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3304      	adds	r3, #4
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fdc1 	bl	8000620 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <prvCheckTasksWaitingTermination+0x54>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <prvCheckTasksWaitingTermination+0x54>)
 8001aa6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <prvCheckTasksWaitingTermination+0x58>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <prvCheckTasksWaitingTermination+0x58>)
 8001ab0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001ab2:	f000 fd4d 	bl	8002550 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f810 	bl	8001adc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <prvCheckTasksWaitingTermination+0x58>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e1      	bne.n	8001a88 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000124 	.word	0x20000124
 8001ad4:	20000150 	.word	0x20000150
 8001ad8:	20000138 	.word	0x20000138

08001adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 feed 	bl	80028c8 <vPortFree>
            vPortFree( pxTCB );
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 feea 	bl	80028c8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b00:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <prvResetNextTaskUnblockTime+0x30>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d104      	bne.n	8001b14 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <prvResetNextTaskUnblockTime+0x34>)
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001b12:	e005      	b.n	8001b20 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <prvResetNextTaskUnblockTime+0x30>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	@ (8001b30 <prvResetNextTaskUnblockTime+0x34>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000108 	.word	0x20000108
 8001b30:	20000170 	.word	0x20000170

08001b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <xTaskGetSchedulerState+0x34>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001b42:	2301      	movs	r3, #1
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	e008      	b.n	8001b5a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <xTaskGetSchedulerState+0x38>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001b50:	2302      	movs	r3, #2
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	e001      	b.n	8001b5a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001b5a:	687b      	ldr	r3, [r7, #4]
    }
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	2000015c 	.word	0x2000015c
 8001b6c:	20000178 	.word	0x20000178

08001b70 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001b7a:	4b36      	ldr	r3, [pc, #216]	@ (8001c54 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b80:	4b35      	ldr	r3, [pc, #212]	@ (8001c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3304      	adds	r3, #4
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fd4a 	bl	8000620 <uxListRemove>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10b      	bne.n	8001baa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001b92:	4b31      	ldr	r3, [pc, #196]	@ (8001c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b98:	2201      	movs	r2, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c5c <prvAddCurrentTaskToDelayedList+0xec>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c5c <prvAddCurrentTaskToDelayedList+0xec>)
 8001ba8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d124      	bne.n	8001bfc <prvAddCurrentTaskToDelayedList+0x8c>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d021      	beq.n	8001bfc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bb8:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	6892      	ldr	r2, [r2, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	3204      	adds	r2, #4
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1d1a      	adds	r2, r3, #4
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1d      	ldr	r2, [pc, #116]	@ (8001c60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001bec:	615a      	str	r2, [r3, #20]
 8001bee:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001bfa:	e026      	b.n	8001c4a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c04:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d209      	bcs.n	8001c28 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c14:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f7fe fcc4 	bl	80005ae <vListInsert>
}
 8001c26:	e010      	b.n	8001c4a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3304      	adds	r3, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4610      	mov	r0, r2
 8001c36:	f7fe fcba 	bl	80005ae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d202      	bcs.n	8001c4a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001c44:	4a09      	ldr	r2, [pc, #36]	@ (8001c6c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6013      	str	r3, [r2, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000154 	.word	0x20000154
 8001c58:	20000078 	.word	0x20000078
 8001c5c:	20000158 	.word	0x20000158
 8001c60:	2000013c 	.word	0x2000013c
 8001c64:	2000010c 	.word	0x2000010c
 8001c68:	20000108 	.word	0x20000108
 8001c6c:	20000170 	.word	0x20000170

08001c70 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001c7a:	f000 fa4f 	bl	800211c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <xTimerCreateTimerTask+0x58>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <xTimerCreateTimerTask+0x5c>)
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c94:	490e      	ldr	r1, [pc, #56]	@ (8001cd0 <xTimerCreateTimerTask+0x60>)
 8001c96:	480f      	ldr	r0, [pc, #60]	@ (8001cd4 <xTimerCreateTimerTask+0x64>)
 8001c98:	f7ff f824 	bl	8000ce4 <xTaskCreate>
 8001c9c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8001ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ca8:	f383 8811 	msr	BASEPRI, r3
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	603b      	str	r3, [r7, #0]
    }
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001cbc:	687b      	ldr	r3, [r7, #4]
    }
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200001ac 	.word	0x200001ac
 8001ccc:	200001b0 	.word	0x200001b0
 8001cd0:	08006f38 	.word	0x08006f38
 8001cd4:	08001d7d 	.word	0x08001d7d

08001cd8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001ce4:	e008      	b.n	8001cf8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	4413      	add	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	699a      	ldr	r2, [r3, #24]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	18d1      	adds	r1, r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f8df 	bl	8001ec8 <prvInsertTimerInActiveList>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ea      	bne.n	8001ce6 <prvReloadTimer+0xe>
        }
    }
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d26:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <prvProcessExpiredTimer+0x5c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3304      	adds	r3, #4
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fc73 	bl	8000620 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7ff ffc3 	bl	8001cd8 <prvReloadTimer>
 8001d52:	e008      	b.n	8001d66 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	4798      	blx	r3
    }
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200001a4 	.word	0x200001a4

08001d7c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f859 	bl	8001e40 <prvGetNextExpireTime>
 8001d8e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4619      	mov	r1, r3
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f805 	bl	8001da4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001d9a:	f000 f8d7 	bl	8001f4c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001d9e:	bf00      	nop
 8001da0:	e7f0      	b.n	8001d84 <prvTimerTask+0x8>
	...

08001da4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001dae:	f7ff f985 	bl	80010bc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f866 	bl	8001e88 <prvSampleTimeNow>
 8001dbc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d130      	bne.n	8001e26 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10a      	bne.n	8001de0 <prvProcessTimerOrBlockTask+0x3c>
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d806      	bhi.n	8001de0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001dd2:	f7ff f981 	bl	80010d8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001dd6:	68f9      	ldr	r1, [r7, #12]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff9f 	bl	8001d1c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001dde:	e024      	b.n	8001e2a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001de6:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <prvProcessTimerOrBlockTask+0x90>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <prvProcessTimerOrBlockTask+0x50>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <prvProcessTimerOrBlockTask+0x52>
 8001df4:	2300      	movs	r3, #0
 8001df6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <prvProcessTimerOrBlockTask+0x94>)
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe ff39 	bl	8000c7c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001e0a:	f7ff f965 	bl	80010d8 <xTaskResumeAll>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10a      	bne.n	8001e2a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <prvProcessTimerOrBlockTask+0x98>)
 8001e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	f3bf 8f4f 	dsb	sy
 8001e20:	f3bf 8f6f 	isb	sy
    }
 8001e24:	e001      	b.n	8001e2a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001e26:	f7ff f957 	bl	80010d8 <xTaskResumeAll>
    }
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200001a8 	.word	0x200001a8
 8001e38:	200001ac 	.word	0x200001ac
 8001e3c:	e000ed04 	.word	0xe000ed04

08001e40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001e48:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <prvGetNextExpireTime+0x44>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <prvGetNextExpireTime+0x16>
 8001e52:	2201      	movs	r2, #1
 8001e54:	e000      	b.n	8001e58 <prvGetNextExpireTime+0x18>
 8001e56:	2200      	movs	r2, #0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e64:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <prvGetNextExpireTime+0x44>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	e001      	b.n	8001e74 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001e74:	68fb      	ldr	r3, [r7, #12]
    }
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	200001a4 	.word	0x200001a4

08001e88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001e90:	f7ff fa22 	bl	80012d8 <xTaskGetTickCount>
 8001e94:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001e96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <prvSampleTimeNow+0x3c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d205      	bcs.n	8001eac <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001ea0:	f000 f916 	bl	80020d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e002      	b.n	8001eb2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	@ (8001ec4 <prvSampleTimeNow+0x3c>)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    }
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200001b4 	.word	0x200001b4

08001ec8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d812      	bhi.n	8001f14 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	1ad2      	subs	r2, r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d302      	bcc.n	8001f02 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001efc:	2301      	movs	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	e01b      	b.n	8001f3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <prvInsertTimerInActiveList+0x7c>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	f7fe fb4e 	bl	80005ae <vListInsert>
 8001f12:	e012      	b.n	8001f3a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d206      	bcs.n	8001f2a <prvInsertTimerInActiveList+0x62>
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d302      	bcc.n	8001f2a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001f24:	2301      	movs	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e007      	b.n	8001f3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001f2a:	4b07      	ldr	r3, [pc, #28]	@ (8001f48 <prvInsertTimerInActiveList+0x80>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3304      	adds	r3, #4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f7fe fb3a 	bl	80005ae <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001f3a:	697b      	ldr	r3, [r7, #20]
    }
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200001a8 	.word	0x200001a8
 8001f48:	200001a4 	.word	0x200001a4

08001f4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001f52:	e0a9      	b.n	80020a8 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f2c0 80a6 	blt.w	80020a8 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fb57 	bl	8000620 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff87 	bl	8001e88 <prvSampleTimeNow>
 8001f7a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	f200 808e 	bhi.w	80020a2 <prvProcessReceivedCommands+0x156>
 8001f86:	a201      	add	r2, pc, #4	@ (adr r2, 8001f8c <prvProcessReceivedCommands+0x40>)
 8001f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8c:	08001fb1 	.word	0x08001fb1
 8001f90:	08001fb1 	.word	0x08001fb1
 8001f94:	08002019 	.word	0x08002019
 8001f98:	0800202d 	.word	0x0800202d
 8001f9c:	08002079 	.word	0x08002079
 8001fa0:	08001fb1 	.word	0x08001fb1
 8001fa4:	08001fb1 	.word	0x08001fb1
 8001fa8:	08002019 	.word	0x08002019
 8001fac:	0800202d 	.word	0x0800202d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	18d1      	adds	r1, r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	69f8      	ldr	r0, [r7, #28]
 8001fd0:	f7ff ff7a 	bl	8001ec8 <prvInsertTimerInActiveList>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d065      	beq.n	80020a6 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	4413      	add	r3, r2
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	69f8      	ldr	r0, [r7, #28]
 8001ff6:	f7ff fe6f 	bl	8001cd8 <prvReloadTimer>
 8001ffa:	e008      	b.n	800200e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	b2da      	uxtb	r2, r3
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	69f8      	ldr	r0, [r7, #28]
 8002014:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002016:	e046      	b.n	80020a6 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800202a:	e03d      	b.n	80020a8 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	b2da      	uxtb	r2, r3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10b      	bne.n	8002064 <prvProcessReceivedCommands+0x118>
        __asm volatile
 800204c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002050:	f383 8811 	msr	BASEPRI, r3
 8002054:	f3bf 8f6f 	isb	sy
 8002058:	f3bf 8f4f 	dsb	sy
 800205c:	617b      	str	r3, [r7, #20]
    }
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	18d1      	adds	r1, r2, r3
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	69f8      	ldr	r0, [r7, #28]
 8002072:	f7ff ff29 	bl	8001ec8 <prvInsertTimerInActiveList>
                        break;
 8002076:	e017      	b.n	80020a8 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8002086:	69f8      	ldr	r0, [r7, #28]
 8002088:	f000 fc1e 	bl	80028c8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800208c:	e00c      	b.n	80020a8 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	b2da      	uxtb	r2, r3
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80020a0:	e002      	b.n	80020a8 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 80020a2:	bf00      	nop
 80020a4:	e000      	b.n	80020a8 <prvProcessReceivedCommands+0x15c>
                        break;
 80020a6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80020a8:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <prvProcessReceivedCommands+0x180>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f107 0108 	add.w	r1, r7, #8
 80020b0:	2200      	movs	r2, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fbe8 	bl	8000888 <xQueueReceive>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f47f af4a 	bne.w	8001f54 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200001ac 	.word	0x200001ac

080020d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80020d6:	e009      	b.n	80020ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80020d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <prvSwitchTimerLists+0x44>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80020e2:	f04f 31ff 	mov.w	r1, #4294967295
 80020e6:	6838      	ldr	r0, [r7, #0]
 80020e8:	f7ff fe18 	bl	8001d1c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <prvSwitchTimerLists+0x44>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <prvSwitchTimerLists+0x44>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <prvSwitchTimerLists+0x48>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <prvSwitchTimerLists+0x44>)
 8002102:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002104:	4a04      	ldr	r2, [pc, #16]	@ (8002118 <prvSwitchTimerLists+0x48>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6013      	str	r3, [r2, #0]
    }
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200001a4 	.word	0x200001a4
 8002118:	200001a8 	.word	0x200001a8

0800211c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002120:	f000 f9e4 	bl	80024ec <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <prvCheckForValidListAndQueue+0x54>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d11d      	bne.n	8002168 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800212c:	4811      	ldr	r0, [pc, #68]	@ (8002174 <prvCheckForValidListAndQueue+0x58>)
 800212e:	f7fe fa11 	bl	8000554 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002132:	4811      	ldr	r0, [pc, #68]	@ (8002178 <prvCheckForValidListAndQueue+0x5c>)
 8002134:	f7fe fa0e 	bl	8000554 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002138:	4b10      	ldr	r3, [pc, #64]	@ (800217c <prvCheckForValidListAndQueue+0x60>)
 800213a:	4a0e      	ldr	r2, [pc, #56]	@ (8002174 <prvCheckForValidListAndQueue+0x58>)
 800213c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <prvCheckForValidListAndQueue+0x64>)
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <prvCheckForValidListAndQueue+0x5c>)
 8002142:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002144:	2200      	movs	r2, #0
 8002146:	210c      	movs	r1, #12
 8002148:	200a      	movs	r0, #10
 800214a:	f7fe fb25 	bl	8000798 <xQueueGenericCreate>
 800214e:	4603      	mov	r3, r0
 8002150:	4a07      	ldr	r2, [pc, #28]	@ (8002170 <prvCheckForValidListAndQueue+0x54>)
 8002152:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002154:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <prvCheckForValidListAndQueue+0x54>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800215c:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <prvCheckForValidListAndQueue+0x54>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4908      	ldr	r1, [pc, #32]	@ (8002184 <prvCheckForValidListAndQueue+0x68>)
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fd32 	bl	8000bcc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002168:	f000 f9f2 	bl	8002550 <vPortExitCritical>
    }
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200001ac 	.word	0x200001ac
 8002174:	2000017c 	.word	0x2000017c
 8002178:	20000190 	.word	0x20000190
 800217c:	200001a4 	.word	0x200001a4
 8002180:	200001a8 	.word	0x200001a8
 8002184:	08006f40 	.word	0x08006f40

08002188 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3b04      	subs	r3, #4
 8002198:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3b04      	subs	r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f023 0201 	bic.w	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3b04      	subs	r3, #4
 80021b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80021b8:	4a0c      	ldr	r2, [pc, #48]	@ (80021ec <pxPortInitialiseStack+0x64>)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3b14      	subs	r3, #20
 80021c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3b04      	subs	r3, #4
 80021ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f06f 0202 	mvn.w	r2, #2
 80021d6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3b20      	subs	r3, #32
 80021dc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	080021f1 	.word	0x080021f1

080021f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80021fa:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <prvTaskExitError+0x58>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002202:	d00b      	beq.n	800221c <prvTaskExitError+0x2c>
        __asm volatile
 8002204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002208:	f383 8811 	msr	BASEPRI, r3
 800220c:	f3bf 8f6f 	isb	sy
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	60fb      	str	r3, [r7, #12]
    }
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <prvTaskExitError+0x28>
        __asm volatile
 800221c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	60bb      	str	r3, [r7, #8]
    }
 800222e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002230:	bf00      	nop
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0fc      	beq.n	8002232 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000004 	.word	0x20000004
 800224c:	00000000 	.word	0x00000000

08002250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <pxCurrentTCBConst2>)
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	6808      	ldr	r0, [r1, #0]
 8002256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800225a:	f380 8809 	msr	PSP, r0
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f04f 0000 	mov.w	r0, #0
 8002266:	f380 8811 	msr	BASEPRI, r0
 800226a:	4770      	bx	lr
 800226c:	f3af 8000 	nop.w

08002270 <pxCurrentTCBConst2>:
 8002270:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop

08002278 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002278:	4808      	ldr	r0, [pc, #32]	@ (800229c <prvPortStartFirstTask+0x24>)
 800227a:	6800      	ldr	r0, [r0, #0]
 800227c:	6800      	ldr	r0, [r0, #0]
 800227e:	f380 8808 	msr	MSP, r0
 8002282:	f04f 0000 	mov.w	r0, #0
 8002286:	f380 8814 	msr	CONTROL, r0
 800228a:	b662      	cpsie	i
 800228c:	b661      	cpsie	f
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	df00      	svc	0
 8002298:	bf00      	nop
 800229a:	0000      	.short	0x0000
 800229c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop

080022a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80022aa:	4b47      	ldr	r3, [pc, #284]	@ (80023c8 <xPortStartScheduler+0x124>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a47      	ldr	r2, [pc, #284]	@ (80023cc <xPortStartScheduler+0x128>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d10b      	bne.n	80022cc <xPortStartScheduler+0x28>
        __asm volatile
 80022b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	613b      	str	r3, [r7, #16]
    }
 80022c6:	bf00      	nop
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80022cc:	4b3e      	ldr	r3, [pc, #248]	@ (80023c8 <xPortStartScheduler+0x124>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a3f      	ldr	r2, [pc, #252]	@ (80023d0 <xPortStartScheduler+0x12c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d10b      	bne.n	80022ee <xPortStartScheduler+0x4a>
        __asm volatile
 80022d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022da:	f383 8811 	msr	BASEPRI, r3
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	60fb      	str	r3, [r7, #12]
    }
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	e7fd      	b.n	80022ea <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80022ee:	4b39      	ldr	r3, [pc, #228]	@ (80023d4 <xPortStartScheduler+0x130>)
 80022f0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	22ff      	movs	r2, #255	@ 0xff
 80022fe:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b31      	ldr	r3, [pc, #196]	@ (80023d8 <xPortStartScheduler+0x134>)
 8002314:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002316:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <xPortStartScheduler+0x138>)
 8002318:	2207      	movs	r2, #7
 800231a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800231c:	e009      	b.n	8002332 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800231e:	4b2f      	ldr	r3, [pc, #188]	@ (80023dc <xPortStartScheduler+0x138>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3b01      	subs	r3, #1
 8002324:	4a2d      	ldr	r2, [pc, #180]	@ (80023dc <xPortStartScheduler+0x138>)
 8002326:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233a:	2b80      	cmp	r3, #128	@ 0x80
 800233c:	d0ef      	beq.n	800231e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800233e:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <xPortStartScheduler+0x138>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	d00b      	beq.n	8002362 <xPortStartScheduler+0xbe>
        __asm volatile
 800234a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	60bb      	str	r3, [r7, #8]
    }
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	e7fd      	b.n	800235e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002362:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <xPortStartScheduler+0x138>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	4a1c      	ldr	r2, [pc, #112]	@ (80023dc <xPortStartScheduler+0x138>)
 800236a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800236c:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <xPortStartScheduler+0x138>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002374:	4a19      	ldr	r2, [pc, #100]	@ (80023dc <xPortStartScheduler+0x138>)
 8002376:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002380:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <xPortStartScheduler+0x13c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a16      	ldr	r2, [pc, #88]	@ (80023e0 <xPortStartScheduler+0x13c>)
 8002386:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800238a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800238c:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <xPortStartScheduler+0x13c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a13      	ldr	r2, [pc, #76]	@ (80023e0 <xPortStartScheduler+0x13c>)
 8002392:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002396:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002398:	f000 f968 	bl	800266c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <xPortStartScheduler+0x140>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80023a2:	f000 f987 	bl	80026b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <xPortStartScheduler+0x144>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a0f      	ldr	r2, [pc, #60]	@ (80023e8 <xPortStartScheduler+0x144>)
 80023ac:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80023b0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80023b2:	f7ff ff61 	bl	8002278 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80023b6:	f7ff f8cd 	bl	8001554 <vTaskSwitchContext>
    prvTaskExitError();
 80023ba:	f7ff ff19 	bl	80021f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	e000ed00 	.word	0xe000ed00
 80023cc:	410fc271 	.word	0x410fc271
 80023d0:	410fc270 	.word	0x410fc270
 80023d4:	e000e400 	.word	0xe000e400
 80023d8:	200001b8 	.word	0x200001b8
 80023dc:	200001bc 	.word	0x200001bc
 80023e0:	e000ed20 	.word	0xe000ed20
 80023e4:	20000004 	.word	0x20000004
 80023e8:	e000ef34 	.word	0xe000ef34

080023ec <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80023f2:	4b38      	ldr	r3, [pc, #224]	@ (80024d4 <vInitPrioGroupValue+0xe8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a38      	ldr	r2, [pc, #224]	@ (80024d8 <vInitPrioGroupValue+0xec>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d10b      	bne.n	8002414 <vInitPrioGroupValue+0x28>
        __asm volatile
 80023fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	613b      	str	r3, [r7, #16]
    }
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002414:	4b2f      	ldr	r3, [pc, #188]	@ (80024d4 <vInitPrioGroupValue+0xe8>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a30      	ldr	r2, [pc, #192]	@ (80024dc <vInitPrioGroupValue+0xf0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d10b      	bne.n	8002436 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800241e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	60fb      	str	r3, [r7, #12]
    }
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	e7fd      	b.n	8002432 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002436:	4b2a      	ldr	r3, [pc, #168]	@ (80024e0 <vInitPrioGroupValue+0xf4>)
 8002438:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	22ff      	movs	r2, #255	@ 0xff
 8002446:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b22      	ldr	r3, [pc, #136]	@ (80024e4 <vInitPrioGroupValue+0xf8>)
 800245c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800245e:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <vInitPrioGroupValue+0xfc>)
 8002460:	2207      	movs	r2, #7
 8002462:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002464:	e009      	b.n	800247a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8002466:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <vInitPrioGroupValue+0xfc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3b01      	subs	r3, #1
 800246c:	4a1e      	ldr	r2, [pc, #120]	@ (80024e8 <vInitPrioGroupValue+0xfc>)
 800246e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	b2db      	uxtb	r3, r3
 8002478:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002482:	2b80      	cmp	r3, #128	@ 0x80
 8002484:	d0ef      	beq.n	8002466 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002486:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <vInitPrioGroupValue+0xfc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	d00b      	beq.n	80024aa <vInitPrioGroupValue+0xbe>
        __asm volatile
 8002492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	60bb      	str	r3, [r7, #8]
    }
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	e7fd      	b.n	80024a6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80024aa:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <vInitPrioGroupValue+0xfc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	4a0d      	ldr	r2, [pc, #52]	@ (80024e8 <vInitPrioGroupValue+0xfc>)
 80024b2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <vInitPrioGroupValue+0xfc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024bc:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <vInitPrioGroupValue+0xfc>)
 80024be:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00
 80024d8:	410fc271 	.word	0x410fc271
 80024dc:	410fc270 	.word	0x410fc270
 80024e0:	e000e400 	.word	0xe000e400
 80024e4:	200001b8 	.word	0x200001b8
 80024e8:	200001bc 	.word	0x200001bc

080024ec <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
        __asm volatile
 80024f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	f3bf 8f6f 	isb	sy
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	607b      	str	r3, [r7, #4]
    }
 8002504:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <vPortEnterCritical+0x5c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	4a0e      	ldr	r2, [pc, #56]	@ (8002548 <vPortEnterCritical+0x5c>)
 800250e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002510:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <vPortEnterCritical+0x5c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d110      	bne.n	800253a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <vPortEnterCritical+0x60>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <vPortEnterCritical+0x4e>
        __asm volatile
 8002522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002526:	f383 8811 	msr	BASEPRI, r3
 800252a:	f3bf 8f6f 	isb	sy
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	603b      	str	r3, [r7, #0]
    }
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	e7fd      	b.n	8002536 <vPortEnterCritical+0x4a>
    }
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20000004 	.word	0x20000004
 800254c:	e000ed04 	.word	0xe000ed04

08002550 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <vPortExitCritical+0x50>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10b      	bne.n	8002576 <vPortExitCritical+0x26>
        __asm volatile
 800255e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	607b      	str	r3, [r7, #4]
    }
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	e7fd      	b.n	8002572 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002576:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <vPortExitCritical+0x50>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3b01      	subs	r3, #1
 800257c:	4a08      	ldr	r2, [pc, #32]	@ (80025a0 <vPortExitCritical+0x50>)
 800257e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002580:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <vPortExitCritical+0x50>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <vPortExitCritical+0x44>
 8002588:	2300      	movs	r3, #0
 800258a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002592:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	20000004 	.word	0x20000004
	...

080025b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80025b0:	f3ef 8009 	mrs	r0, PSP
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <pxCurrentTCBConst>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	f01e 0f10 	tst.w	lr, #16
 80025c0:	bf08      	it	eq
 80025c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80025c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ca:	6010      	str	r0, [r2, #0]
 80025cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80025d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80025d4:	f380 8811 	msr	BASEPRI, r0
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f7fe ffb8 	bl	8001554 <vTaskSwitchContext>
 80025e4:	f04f 0000 	mov.w	r0, #0
 80025e8:	f380 8811 	msr	BASEPRI, r0
 80025ec:	bc09      	pop	{r0, r3}
 80025ee:	6819      	ldr	r1, [r3, #0]
 80025f0:	6808      	ldr	r0, [r1, #0]
 80025f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f6:	f01e 0f10 	tst.w	lr, #16
 80025fa:	bf08      	it	eq
 80025fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002600:	f380 8809 	msr	PSP, r0
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w

08002610 <pxCurrentTCBConst>:
 8002610:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop

08002618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
        __asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	607b      	str	r3, [r7, #4]
    }
 8002630:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002632:	f002 fb25 	bl	8004c80 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002636:	f7fe fe71 	bl	800131c <xTaskIncrementTick>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d006      	beq.n	800264e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002640:	f002 fb7c 	bl	8004d3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002644:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <SysTick_Handler+0x50>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e001      	b.n	8002652 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800264e:	f002 fb59 	bl	8004d04 <SEGGER_SYSVIEW_RecordExitISR>
 8002652:	2300      	movs	r3, #0
 8002654:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f383 8811 	msr	BASEPRI, r3
    }
 800265c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	e000ed04 	.word	0xe000ed04

0800266c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <vPortSetupTimerInterrupt+0x34>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002676:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <vPortSetupTimerInterrupt+0x38>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <vPortSetupTimerInterrupt+0x3c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <vPortSetupTimerInterrupt+0x40>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	4a09      	ldr	r2, [pc, #36]	@ (80026b0 <vPortSetupTimerInterrupt+0x44>)
 800268a:	3b01      	subs	r3, #1
 800268c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800268e:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <vPortSetupTimerInterrupt+0x34>)
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000e010 	.word	0xe000e010
 80026a4:	e000e018 	.word	0xe000e018
 80026a8:	20000010 	.word	0x20000010
 80026ac:	10624dd3 	.word	0x10624dd3
 80026b0:	e000e014 	.word	0xe000e014

080026b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80026b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80026c4 <vPortEnableVFP+0x10>
 80026b8:	6801      	ldr	r1, [r0, #0]
 80026ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80026be:	6001      	str	r1, [r0, #0]
 80026c0:	4770      	bx	lr
 80026c2:	0000      	.short	0x0000
 80026c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop

080026cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80026d2:	f3ef 8305 	mrs	r3, IPSR
 80026d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	d915      	bls.n	800270a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80026de:	4a18      	ldr	r2, [pc, #96]	@ (8002740 <vPortValidateInterruptPriority+0x74>)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80026e8:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <vPortValidateInterruptPriority+0x78>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	7afa      	ldrb	r2, [r7, #11]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d20b      	bcs.n	800270a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	607b      	str	r3, [r7, #4]
    }
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	e7fd      	b.n	8002706 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800270a:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <vPortValidateInterruptPriority+0x7c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002712:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <vPortValidateInterruptPriority+0x80>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d90b      	bls.n	8002732 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800271a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	603b      	str	r3, [r7, #0]
    }
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	e7fd      	b.n	800272e <vPortValidateInterruptPriority+0x62>
    }
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e3f0 	.word	0xe000e3f0
 8002744:	200001b8 	.word	0x200001b8
 8002748:	e000ed0c 	.word	0xe000ed0c
 800274c:	200001bc 	.word	0x200001bc

08002750 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	@ 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800275c:	f7fe fcae 	bl	80010bc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002760:	4b54      	ldr	r3, [pc, #336]	@ (80028b4 <pvPortMalloc+0x164>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002768:	f000 f90c 	bl	8002984 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d012      	beq.n	8002798 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002772:	2208      	movs	r2, #8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	3308      	adds	r3, #8
 800277e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	43db      	mvns	r3, r3
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	d804      	bhi.n	8002794 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	e001      	b.n	8002798 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	db71      	blt.n	8002882 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d06e      	beq.n	8002882 <pvPortMalloc+0x132>
 80027a4:	4b44      	ldr	r3, [pc, #272]	@ (80028b8 <pvPortMalloc+0x168>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d869      	bhi.n	8002882 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80027ae:	4b43      	ldr	r3, [pc, #268]	@ (80028bc <pvPortMalloc+0x16c>)
 80027b0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80027b2:	4b42      	ldr	r3, [pc, #264]	@ (80028bc <pvPortMalloc+0x16c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027b8:	e004      	b.n	80027c4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d903      	bls.n	80027d6 <pvPortMalloc+0x86>
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f1      	bne.n	80027ba <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80027d6:	4b37      	ldr	r3, [pc, #220]	@ (80028b4 <pvPortMalloc+0x164>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027dc:	429a      	cmp	r2, r3
 80027de:	d050      	beq.n	8002882 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2208      	movs	r2, #8
 80027e6:	4413      	add	r3, r2
 80027e8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	1ad2      	subs	r2, r2, r3
 80027fa:	2308      	movs	r3, #8
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	429a      	cmp	r2, r3
 8002800:	d920      	bls.n	8002844 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00b      	beq.n	800282c <pvPortMalloc+0xdc>
        __asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	613b      	str	r3, [r7, #16]
    }
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	1ad2      	subs	r2, r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f000 f8fc 	bl	8002a3c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002844:	4b1c      	ldr	r3, [pc, #112]	@ (80028b8 <pvPortMalloc+0x168>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	4a1a      	ldr	r2, [pc, #104]	@ (80028b8 <pvPortMalloc+0x168>)
 8002850:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002852:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <pvPortMalloc+0x168>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <pvPortMalloc+0x170>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d203      	bcs.n	8002866 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800285e:	4b16      	ldr	r3, [pc, #88]	@ (80028b8 <pvPortMalloc+0x168>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a17      	ldr	r2, [pc, #92]	@ (80028c0 <pvPortMalloc+0x170>)
 8002864:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <pvPortMalloc+0x174>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3301      	adds	r3, #1
 800287e:	4a11      	ldr	r2, [pc, #68]	@ (80028c4 <pvPortMalloc+0x174>)
 8002880:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002882:	f7fe fc29 	bl	80010d8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00b      	beq.n	80028a8 <pvPortMalloc+0x158>
        __asm volatile
 8002890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	60fb      	str	r3, [r7, #12]
    }
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <pvPortMalloc+0x154>
    return pvReturn;
 80028a8:	69fb      	ldr	r3, [r7, #28]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3728      	adds	r7, #40	@ 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20012dc8 	.word	0x20012dc8
 80028b8:	20012dcc 	.word	0x20012dcc
 80028bc:	20012dc0 	.word	0x20012dc0
 80028c0:	20012dd0 	.word	0x20012dd0
 80028c4:	20012dd4 	.word	0x20012dd4

080028c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d04b      	beq.n	8002972 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80028da:	2308      	movs	r3, #8
 80028dc:	425b      	negs	r3, r3
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4413      	add	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	db0b      	blt.n	8002908 <vPortFree+0x40>
        __asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	60fb      	str	r3, [r7, #12]
    }
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00b      	beq.n	8002928 <vPortFree+0x60>
        __asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	60bb      	str	r3, [r7, #8]
    }
 8002922:	bf00      	nop
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	0fdb      	lsrs	r3, r3, #31
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01c      	beq.n	8002972 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d118      	bne.n	8002972 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800294c:	f7fe fbb6 	bl	80010bc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <vPortFree+0xb4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4413      	add	r3, r2
 800295a:	4a08      	ldr	r2, [pc, #32]	@ (800297c <vPortFree+0xb4>)
 800295c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800295e:	6938      	ldr	r0, [r7, #16]
 8002960:	f000 f86c 	bl	8002a3c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <vPortFree+0xb8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3301      	adds	r3, #1
 800296a:	4a05      	ldr	r2, [pc, #20]	@ (8002980 <vPortFree+0xb8>)
 800296c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800296e:	f7fe fbb3 	bl	80010d8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20012dcc 	.word	0x20012dcc
 8002980:	20012dd8 	.word	0x20012dd8

08002984 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800298a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800298e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002990:	4b25      	ldr	r3, [pc, #148]	@ (8002a28 <prvHeapInit+0xa4>)
 8002992:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00c      	beq.n	80029b8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3307      	adds	r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0307 	bic.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a28 <prvHeapInit+0xa4>)
 80029b4:	4413      	add	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029bc:	4a1b      	ldr	r2, [pc, #108]	@ (8002a2c <prvHeapInit+0xa8>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80029c2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <prvHeapInit+0xa8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	4413      	add	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80029d0:	2208      	movs	r2, #8
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a13      	ldr	r2, [pc, #76]	@ (8002a30 <prvHeapInit+0xac>)
 80029e4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80029e6:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <prvHeapInit+0xac>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80029ee:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <prvHeapInit+0xac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	1ad2      	subs	r2, r2, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a04:	4b0a      	ldr	r3, [pc, #40]	@ (8002a30 <prvHeapInit+0xac>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a08      	ldr	r2, [pc, #32]	@ (8002a34 <prvHeapInit+0xb0>)
 8002a12:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a07      	ldr	r2, [pc, #28]	@ (8002a38 <prvHeapInit+0xb4>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	200001c0 	.word	0x200001c0
 8002a2c:	20012dc0 	.word	0x20012dc0
 8002a30:	20012dc8 	.word	0x20012dc8
 8002a34:	20012dd0 	.word	0x20012dd0
 8002a38:	20012dcc 	.word	0x20012dcc

08002a3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a44:	4b28      	ldr	r3, [pc, #160]	@ (8002ae8 <prvInsertBlockIntoFreeList+0xac>)
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e002      	b.n	8002a50 <prvInsertBlockIntoFreeList+0x14>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d8f7      	bhi.n	8002a4a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4413      	add	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d108      	bne.n	8002a7e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	441a      	add	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	441a      	add	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d118      	bne.n	8002ac4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <prvInsertBlockIntoFreeList+0xb0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d00d      	beq.n	8002aba <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	441a      	add	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e008      	b.n	8002acc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002aba:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <prvInsertBlockIntoFreeList+0xb0>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e003      	b.n	8002acc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d002      	beq.n	8002ada <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20012dc0 	.word	0x20012dc0
 8002aec:	20012dc8 	.word	0x20012dc8

08002af0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002af4:	4803      	ldr	r0, [pc, #12]	@ (8002b04 <_cbSendSystemDesc+0x14>)
 8002af6:	f002 f86d 	bl	8004bd4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002afa:	4803      	ldr	r0, [pc, #12]	@ (8002b08 <_cbSendSystemDesc+0x18>)
 8002afc:	f002 f86a 	bl	8004bd4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	08006f48 	.word	0x08006f48
 8002b08:	08006f88 	.word	0x08006f88

08002b0c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <SEGGER_SYSVIEW_Conf+0x20>)
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <SEGGER_SYSVIEW_Conf+0x20>)
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <SEGGER_SYSVIEW_Conf+0x24>)
 8002b1a:	4a06      	ldr	r2, [pc, #24]	@ (8002b34 <SEGGER_SYSVIEW_Conf+0x28>)
 8002b1c:	f001 fbd8 	bl	80042d0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002b20:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002b24:	f001 fc18 	bl	8004358 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000010 	.word	0x20000010
 8002b30:	08002af1 	.word	0x08002af1
 8002b34:	08007078 	.word	0x08007078

08002b38 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	e033      	b.n	8002bac <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002b44:	491e      	ldr	r1, [pc, #120]	@ (8002bc0 <_cbSendTaskList+0x88>)
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	491a      	ldr	r1, [pc, #104]	@ (8002bc0 <_cbSendTaskList+0x88>)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3304      	adds	r3, #4
 8002b64:	6819      	ldr	r1, [r3, #0]
 8002b66:	4c16      	ldr	r4, [pc, #88]	@ (8002bc0 <_cbSendTaskList+0x88>)
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4423      	add	r3, r4
 8002b74:	3308      	adds	r3, #8
 8002b76:	681c      	ldr	r4, [r3, #0]
 8002b78:	4d11      	ldr	r5, [pc, #68]	@ (8002bc0 <_cbSendTaskList+0x88>)
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	442b      	add	r3, r5
 8002b86:	330c      	adds	r3, #12
 8002b88:	681d      	ldr	r5, [r3, #0]
 8002b8a:	4e0d      	ldr	r6, [pc, #52]	@ (8002bc0 <_cbSendTaskList+0x88>)
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4433      	add	r3, r6
 8002b98:	3310      	adds	r3, #16
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	462b      	mov	r3, r5
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	f000 f8bd 	bl	8002d20 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <_cbSendTaskList+0x8c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d3c6      	bcc.n	8002b44 <_cbSendTaskList+0xc>
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc0:	20012ddc 	.word	0x20012ddc
 8002bc4:	20012e7c 	.word	0x20012e7c

08002bc8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002bd0:	f7fe fb92 	bl	80012f8 <xTaskGetTickCountFromISR>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	469a      	mov	sl, r3
 8002bda:	4693      	mov	fp, r2
 8002bdc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	f04f 0a00 	mov.w	sl, #0
 8002bec:	f04f 0b00 	mov.w	fp, #0
 8002bf0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002bf4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002bf8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002bfc:	4652      	mov	r2, sl
 8002bfe:	465b      	mov	r3, fp
 8002c00:	1a14      	subs	r4, r2, r0
 8002c02:	eb63 0501 	sbc.w	r5, r3, r1
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	00ab      	lsls	r3, r5, #2
 8002c10:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002c14:	00a2      	lsls	r2, r4, #2
 8002c16:	4614      	mov	r4, r2
 8002c18:	461d      	mov	r5, r3
 8002c1a:	eb14 0800 	adds.w	r8, r4, r0
 8002c1e:	eb45 0901 	adc.w	r9, r5, r1
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c36:	4690      	mov	r8, r2
 8002c38:	4699      	mov	r9, r3
 8002c3a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002c50 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002c5e:	2205      	movs	r2, #5
 8002c60:	492b      	ldr	r1, [pc, #172]	@ (8002d10 <SYSVIEW_AddTask+0xc0>)
 8002c62:	68b8      	ldr	r0, [r7, #8]
 8002c64:	f004 f90e 	bl	8006e84 <memcmp>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d04b      	beq.n	8002d06 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002c6e:	4b29      	ldr	r3, [pc, #164]	@ (8002d14 <SYSVIEW_AddTask+0xc4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b07      	cmp	r3, #7
 8002c74:	d903      	bls.n	8002c7e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002c76:	4828      	ldr	r0, [pc, #160]	@ (8002d18 <SYSVIEW_AddTask+0xc8>)
 8002c78:	f002 fa68 	bl	800514c <SEGGER_SYSVIEW_Warn>
    return;
 8002c7c:	e044      	b.n	8002d08 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002c7e:	4b25      	ldr	r3, [pc, #148]	@ (8002d14 <SYSVIEW_AddTask+0xc4>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4926      	ldr	r1, [pc, #152]	@ (8002d1c <SYSVIEW_AddTask+0xcc>)
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002c92:	4b20      	ldr	r3, [pc, #128]	@ (8002d14 <SYSVIEW_AddTask+0xc4>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4921      	ldr	r1, [pc, #132]	@ (8002d1c <SYSVIEW_AddTask+0xcc>)
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <SYSVIEW_AddTask+0xc4>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	491b      	ldr	r1, [pc, #108]	@ (8002d1c <SYSVIEW_AddTask+0xcc>)
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3308      	adds	r3, #8
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <SYSVIEW_AddTask+0xc4>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4916      	ldr	r1, [pc, #88]	@ (8002d1c <SYSVIEW_AddTask+0xcc>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	330c      	adds	r3, #12
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <SYSVIEW_AddTask+0xc4>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4910      	ldr	r1, [pc, #64]	@ (8002d1c <SYSVIEW_AddTask+0xcc>)
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3310      	adds	r3, #16
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002cea:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <SYSVIEW_AddTask+0xc4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a08      	ldr	r2, [pc, #32]	@ (8002d14 <SYSVIEW_AddTask+0xc4>)
 8002cf2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f80e 	bl	8002d20 <SYSVIEW_SendTaskInfo>
 8002d04:	e000      	b.n	8002d08 <SYSVIEW_AddTask+0xb8>
    return;
 8002d06:	bf00      	nop

}
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	08006f98 	.word	0x08006f98
 8002d14:	20012e7c 	.word	0x20012e7c
 8002d18:	08006fa0 	.word	0x08006fa0
 8002d1c:	20012ddc 	.word	0x20012ddc

08002d20 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	@ 0x28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002d2e:	f107 0310 	add.w	r3, r7, #16
 8002d32:	2218      	movs	r2, #24
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 f8b4 	bl	8006ea4 <memset>
  TaskInfo.TaskID     = TaskID;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 fe45 	bl	80049e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002d5a:	bf00      	nop
 8002d5c:	3728      	adds	r7, #40	@ 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	db0b      	blt.n	8002d8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4907      	ldr	r1, [pc, #28]	@ (8002d9c <__NVIC_EnableIRQ+0x38>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2001      	movs	r0, #1
 8002d86:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000e100 	.word	0xe000e100

08002da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	db0a      	blt.n	8002dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	490c      	ldr	r1, [pc, #48]	@ (8002dec <__NVIC_SetPriority+0x4c>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc8:	e00a      	b.n	8002de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4908      	ldr	r1, [pc, #32]	@ (8002df0 <__NVIC_SetPriority+0x50>)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	3b04      	subs	r3, #4
 8002dd8:	0112      	lsls	r2, r2, #4
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	440b      	add	r3, r1
 8002dde:	761a      	strb	r2, [r3, #24]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000e100 	.word	0xe000e100
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8002dfa:	f002 fa03 	bl	8005204 <SEGGER_SYSVIEW_IsStarted>
 8002dfe:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8002e06:	f001 fc73 	bl	80046f0 <SEGGER_SYSVIEW_Start>
  }
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <_cbOnUARTRx+0x3c>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d806      	bhi.n	8002e34 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <_cbOnUARTRx+0x3c>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <_cbOnUARTRx+0x3c>)
 8002e30:	701a      	strb	r2, [r3, #0]
    goto Done;
 8002e32:	e009      	b.n	8002e48 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8002e34:	f7ff ffde 	bl	8002df4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <_cbOnUARTRx+0x3c>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	1dfb      	adds	r3, r7, #7
 8002e40:	2201      	movs	r2, #1
 8002e42:	4619      	mov	r1, r3
 8002e44:	f000 fb8c 	bl	8003560 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8002e48:	bf00      	nop
}
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20000008 	.word	0x20000008

08002e54 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8002e5c:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <_cbOnUARTTx+0x5c>)
 8002e5e:	785b      	ldrb	r3, [r3, #1]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d80f      	bhi.n	8002e84 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8002e64:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <_cbOnUARTTx+0x5c>)
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <_cbOnUARTTx+0x60>)
 8002e6c:	5c9a      	ldrb	r2, [r3, r2]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8002e72:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb0 <_cbOnUARTTx+0x5c>)
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	3301      	adds	r3, #1
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <_cbOnUARTTx+0x5c>)
 8002e7c:	705a      	strb	r2, [r3, #1]
    r = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
    goto Done;
 8002e82:	e00f      	b.n	8002ea4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8002e84:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <_cbOnUARTTx+0x5c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fa0b 	bl	80032a8 <SEGGER_RTT_ReadUpBufferNoLock>
 8002e92:	4603      	mov	r3, r0
 8002e94:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	da02      	bge.n	8002ea2 <_cbOnUARTTx+0x4e>
    r = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	e000      	b.n	8002ea4 <_cbOnUARTTx+0x50>
  }
Done:
 8002ea2:	bf00      	nop
  return r;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000008 	.word	0x20000008
 8002eb4:	08007080 	.word	0x08007080

08002eb8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8002ec0:	4a04      	ldr	r2, [pc, #16]	@ (8002ed4 <SEGGER_UART_init+0x1c>)
 8002ec2:	4905      	ldr	r1, [pc, #20]	@ (8002ed8 <SEGGER_UART_init+0x20>)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f853 	bl	8002f70 <HIF_UART_Init>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	08002e15 	.word	0x08002e15
 8002ed8:	08002e55 	.word	0x08002e55

08002edc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <USART2_IRQHandler+0x80>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f60 <USART2_IRQHandler+0x84>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 030b 	and.w	r3, r3, #11
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d108      	bne.n	8002f16 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8002f04:	4b17      	ldr	r3, [pc, #92]	@ (8002f64 <USART2_IRQHandler+0x88>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002f0c:	4b15      	ldr	r3, [pc, #84]	@ (8002f64 <USART2_IRQHandler+0x88>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	79fa      	ldrb	r2, [r7, #7]
 8002f12:	4610      	mov	r0, r2
 8002f14:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01a      	beq.n	8002f56 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002f20:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <USART2_IRQHandler+0x8c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d015      	beq.n	8002f54 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <USART2_IRQHandler+0x8c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	1dfa      	adds	r2, r7, #7
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4798      	blx	r3
 8002f32:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <USART2_IRQHandler+0x90>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002f6c <USART2_IRQHandler+0x90>)
 8002f40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e006      	b.n	8002f56 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8002f48:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <USART2_IRQHandler+0x80>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8002f4c:	79fa      	ldrb	r2, [r7, #7]
 8002f4e:	4b04      	ldr	r3, [pc, #16]	@ (8002f60 <USART2_IRQHandler+0x84>)
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e000      	b.n	8002f56 <USART2_IRQHandler+0x7a>
      return;
 8002f54:	bf00      	nop
    }
  }
}
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40004400 	.word	0x40004400
 8002f60:	40004404 	.word	0x40004404
 8002f64:	20012e80 	.word	0x20012e80
 8002f68:	20012e84 	.word	0x20012e84
 8002f6c:	4000440c 	.word	0x4000440c

08002f70 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8002f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003038 <HIF_UART_Init+0xc8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2d      	ldr	r2, [pc, #180]	@ (8003038 <HIF_UART_Init+0xc8>)
 8002f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f86:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8002f88:	4b2c      	ldr	r3, [pc, #176]	@ (800303c <HIF_UART_Init+0xcc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800303c <HIF_UART_Init+0xcc>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8002f94:	4b2a      	ldr	r3, [pc, #168]	@ (8003040 <HIF_UART_Init+0xd0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fa0:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8002fa8:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8002faa:	4a25      	ldr	r2, [pc, #148]	@ (8003040 <HIF_UART_Init+0xd0>)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8002fb0:	4b24      	ldr	r3, [pc, #144]	@ (8003044 <HIF_UART_Init+0xd4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fbc:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8002fc4:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <HIF_UART_Init+0xd4>)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8002fcc:	4b1e      	ldr	r3, [pc, #120]	@ (8003048 <HIF_UART_Init+0xd8>)
 8002fce:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8002fd2:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <HIF_UART_Init+0xdc>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8002fda:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <HIF_UART_Init+0xe0>)
 8002fdc:	2280      	movs	r2, #128	@ 0x80
 8002fde:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8002fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8003054 <HIF_UART_Init+0xe4>)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ffe:	d302      	bcc.n	8003006 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003000:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8003004:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	4a11      	ldr	r2, [pc, #68]	@ (8003058 <HIF_UART_Init+0xe8>)
 8003012:	b29b      	uxth	r3, r3
 8003014:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003016:	4a11      	ldr	r2, [pc, #68]	@ (800305c <HIF_UART_Init+0xec>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800301c:	4a10      	ldr	r2, [pc, #64]	@ (8003060 <HIF_UART_Init+0xf0>)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003022:	2106      	movs	r1, #6
 8003024:	2026      	movs	r0, #38	@ 0x26
 8003026:	f7ff febb 	bl	8002da0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800302a:	2026      	movs	r0, #38	@ 0x26
 800302c:	f7ff fe9a 	bl	8002d64 <__NVIC_EnableIRQ>
}
 8003030:	bf00      	nop
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023840 	.word	0x40023840
 800303c:	40023830 	.word	0x40023830
 8003040:	40020020 	.word	0x40020020
 8003044:	40020000 	.word	0x40020000
 8003048:	4000440c 	.word	0x4000440c
 800304c:	40004410 	.word	0x40004410
 8003050:	40004414 	.word	0x40004414
 8003054:	0501bd00 	.word	0x0501bd00
 8003058:	40004408 	.word	0x40004408
 800305c:	20012e80 	.word	0x20012e80
 8003060:	20012e84 	.word	0x20012e84

08003064 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800306a:	4b26      	ldr	r3, [pc, #152]	@ (8003104 <_DoInit+0xa0>)
 800306c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800306e:	22a8      	movs	r2, #168	@ 0xa8
 8003070:	2100      	movs	r1, #0
 8003072:	6838      	ldr	r0, [r7, #0]
 8003074:	f003 ff16 	bl	8006ea4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2203      	movs	r2, #3
 800307c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2203      	movs	r2, #3
 8003082:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4a20      	ldr	r2, [pc, #128]	@ (8003108 <_DoInit+0xa4>)
 8003088:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	4a1f      	ldr	r2, [pc, #124]	@ (800310c <_DoInit+0xa8>)
 800308e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003096:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2200      	movs	r2, #0
 80030a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	4a16      	ldr	r2, [pc, #88]	@ (8003108 <_DoInit+0xa4>)
 80030ae:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4a17      	ldr	r2, [pc, #92]	@ (8003110 <_DoInit+0xac>)
 80030b4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2210      	movs	r2, #16
 80030ba:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2200      	movs	r2, #0
 80030c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80030ce:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80030d2:	2300      	movs	r3, #0
 80030d4:	607b      	str	r3, [r7, #4]
 80030d6:	e00c      	b.n	80030f2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f1c3 030f 	rsb	r3, r3, #15
 80030de:	4a0d      	ldr	r2, [pc, #52]	@ (8003114 <_DoInit+0xb0>)
 80030e0:	5cd1      	ldrb	r1, [r2, r3]
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	460a      	mov	r2, r1
 80030ea:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3301      	adds	r3, #1
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b0f      	cmp	r3, #15
 80030f6:	d9ef      	bls.n	80030d8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80030f8:	f3bf 8f5f 	dmb	sy
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20012e88 	.word	0x20012e88
 8003108:	08006ff0 	.word	0x08006ff0
 800310c:	20012f30 	.word	0x20012f30
 8003110:	20013330 	.word	0x20013330
 8003114:	08007084 	.word	0x08007084

08003118 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	@ 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003124:	2300      	movs	r3, #0
 8003126:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	429a      	cmp	r2, r3
 800313a:	d905      	bls.n	8003148 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
 8003146:	e007      	b.n	8003158 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	69b9      	ldr	r1, [r7, #24]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	1acb      	subs	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3b01      	subs	r3, #1
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003162:	4293      	cmp	r3, r2
 8003164:	bf28      	it	cs
 8003166:	4613      	movcs	r3, r2
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800316a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4293      	cmp	r3, r2
 8003170:	bf28      	it	cs
 8003172:	4613      	movcs	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	4413      	add	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	6978      	ldr	r0, [r7, #20]
 8003186:	f003 feb9 	bl	8006efc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800318a:	6a3a      	ldr	r2, [r7, #32]
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	4413      	add	r3, r2
 8003190:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003196:	4413      	add	r3, r2
 8003198:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	4413      	add	r3, r2
 80031a8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d101      	bne.n	80031b8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80031b8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1b2      	bne.n	800312e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80031c8:	6a3b      	ldr	r3, [r7, #32]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3728      	adds	r7, #40	@ 0x28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b088      	sub	sp, #32
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d911      	bls.n	800321a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	4413      	add	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	6938      	ldr	r0, [r7, #16]
 8003206:	f003 fe79 	bl	8006efc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800320a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	441a      	add	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003218:	e01f      	b.n	800325a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	6938      	ldr	r0, [r7, #16]
 800322e:	f003 fe65 	bl	8006efc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4413      	add	r3, r2
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4619      	mov	r1, r3
 800324a:	6938      	ldr	r0, [r7, #16]
 800324c:	f003 fe56 	bl	8006efc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003250:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	60da      	str	r2, [r3, #12]
}
 800325a:	bf00      	nop
 800325c:	3720      	adds	r7, #32
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003262:	b480      	push	{r7}
 8003264:	b087      	sub	sp, #28
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	429a      	cmp	r2, r3
 800327c:	d808      	bhi.n	8003290 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad2      	subs	r2, r2, r3
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	3b01      	subs	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	e004      	b.n	800329a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	617b      	str	r3, [r7, #20]
  }
  return r;
 800329a:	697b      	ldr	r3, [r7, #20]
}
 800329c:	4618      	mov	r0, r3
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08c      	sub	sp, #48	@ 0x30
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80032b4:	4b3e      	ldr	r3, [pc, #248]	@ (80033b0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80032b6:	623b      	str	r3, [r7, #32]
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b53      	cmp	r3, #83	@ 0x53
 80032c0:	d001      	beq.n	80032c6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80032c2:	f7ff fecf 	bl	8003064 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4a37      	ldr	r2, [pc, #220]	@ (80033b0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80032d4:	4413      	add	r3, r2
 80032d6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80032ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d92b      	bls.n	800334c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4293      	cmp	r3, r2
 8003304:	bf28      	it	cs
 8003306:	4613      	movcs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	4413      	add	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	6939      	ldr	r1, [r7, #16]
 8003318:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800331a:	f003 fdef 	bl	8006efc <memcpy>
    NumBytesRead += NumBytesRem;
 800331e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4413      	add	r3, r2
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4413      	add	r3, r2
 800332c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	4413      	add	r3, r2
 800333c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003344:	429a      	cmp	r2, r3
 8003346:	d101      	bne.n	800334c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003348:	2300      	movs	r3, #0
 800334a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4293      	cmp	r3, r2
 800335a:	bf28      	it	cs
 800335c:	4613      	movcs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d019      	beq.n	800339a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336c:	4413      	add	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	6939      	ldr	r1, [r7, #16]
 8003374:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003376:	f003 fdc1 	bl	8006efc <memcpy>
    NumBytesRead += NumBytesRem;
 800337a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	4413      	add	r3, r2
 8003380:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	4413      	add	r3, r2
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	4413      	add	r3, r2
 8003398:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800339a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033a4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80033a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3730      	adds	r7, #48	@ 0x30
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20012e88 	.word	0x20012e88

080033b4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08c      	sub	sp, #48	@ 0x30
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80033c0:	4b3e      	ldr	r3, [pc, #248]	@ (80034bc <SEGGER_RTT_ReadNoLock+0x108>)
 80033c2:	623b      	str	r3, [r7, #32]
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b53      	cmp	r3, #83	@ 0x53
 80033cc:	d001      	beq.n	80033d2 <SEGGER_RTT_ReadNoLock+0x1e>
 80033ce:	f7ff fe49 	bl	8003064 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	3360      	adds	r3, #96	@ 0x60
 80033de:	4a37      	ldr	r2, [pc, #220]	@ (80034bc <SEGGER_RTT_ReadNoLock+0x108>)
 80033e0:	4413      	add	r3, r2
 80033e2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80033f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d92b      	bls.n	8003458 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4293      	cmp	r3, r2
 8003410:	bf28      	it	cs
 8003412:	4613      	movcs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341c:	4413      	add	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	6939      	ldr	r1, [r7, #16]
 8003424:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003426:	f003 fd69 	bl	8006efc <memcpy>
    NumBytesRead += NumBytesRem;
 800342a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	4413      	add	r3, r2
 8003430:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	4413      	add	r3, r2
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	4413      	add	r3, r2
 8003448:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003450:	429a      	cmp	r2, r3
 8003452:	d101      	bne.n	8003458 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003454:	2300      	movs	r3, #0
 8003456:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4293      	cmp	r3, r2
 8003466:	bf28      	it	cs
 8003468:	4613      	movcs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d019      	beq.n	80034a6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003478:	4413      	add	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	6939      	ldr	r1, [r7, #16]
 8003480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003482:	f003 fd3b 	bl	8006efc <memcpy>
    NumBytesRead += NumBytesRem;
 8003486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	4413      	add	r3, r2
 800348c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800348e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	4413      	add	r3, r2
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800349e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	4413      	add	r3, r2
 80034a4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80034a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80034b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3730      	adds	r7, #48	@ 0x30
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20012e88 	.word	0x20012e88

080034c0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	3360      	adds	r3, #96	@ 0x60
 80034dc:	4a1f      	ldr	r2, [pc, #124]	@ (800355c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80034de:	4413      	add	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d029      	beq.n	800353e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d82e      	bhi.n	800354c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d013      	beq.n	800351e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80034f6:	e029      	b.n	800354c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80034f8:	6978      	ldr	r0, [r7, #20]
 80034fa:	f7ff feb2 	bl	8003262 <_GetAvailWriteSpace>
 80034fe:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	429a      	cmp	r2, r3
 8003506:	d202      	bcs.n	800350e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800350c:	e021      	b.n	8003552 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	69b9      	ldr	r1, [r7, #24]
 8003516:	6978      	ldr	r0, [r7, #20]
 8003518:	f7ff fe5b 	bl	80031d2 <_WriteNoCheck>
    break;
 800351c:	e019      	b.n	8003552 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800351e:	6978      	ldr	r0, [r7, #20]
 8003520:	f7ff fe9f 	bl	8003262 <_GetAvailWriteSpace>
 8003524:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4293      	cmp	r3, r2
 800352c:	bf28      	it	cs
 800352e:	4613      	movcs	r3, r2
 8003530:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	69b9      	ldr	r1, [r7, #24]
 8003536:	6978      	ldr	r0, [r7, #20]
 8003538:	f7ff fe4b 	bl	80031d2 <_WriteNoCheck>
    break;
 800353c:	e009      	b.n	8003552 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	69b9      	ldr	r1, [r7, #24]
 8003542:	6978      	ldr	r0, [r7, #20]
 8003544:	f7ff fde8 	bl	8003118 <_WriteBlocking>
 8003548:	61f8      	str	r0, [r7, #28]
    break;
 800354a:	e002      	b.n	8003552 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
    break;
 8003550:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003552:	69fb      	ldr	r3, [r7, #28]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20012e88 	.word	0x20012e88

08003560 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800356c:	4b0e      	ldr	r3, [pc, #56]	@ (80035a8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b53      	cmp	r3, #83	@ 0x53
 8003578:	d001      	beq.n	800357e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800357a:	f7ff fd73 	bl	8003064 <_DoInit>
  SEGGER_RTT_LOCK();
 800357e:	f3ef 8311 	mrs	r3, BASEPRI
 8003582:	f04f 0120 	mov.w	r1, #32
 8003586:	f381 8811 	msr	BASEPRI, r1
 800358a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f7ff ff95 	bl	80034c0 <SEGGER_RTT_WriteDownBufferNoLock>
 8003596:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800359e:	697b      	ldr	r3, [r7, #20]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20012e88 	.word	0x20012e88

080035ac <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80035ba:	4b3d      	ldr	r3, [pc, #244]	@ (80036b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b53      	cmp	r3, #83	@ 0x53
 80035c6:	d001      	beq.n	80035cc <SEGGER_RTT_AllocUpBuffer+0x20>
 80035c8:	f7ff fd4c 	bl	8003064 <_DoInit>
  SEGGER_RTT_LOCK();
 80035cc:	f3ef 8311 	mrs	r3, BASEPRI
 80035d0:	f04f 0120 	mov.w	r1, #32
 80035d4:	f381 8811 	msr	BASEPRI, r1
 80035d8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80035da:	4b35      	ldr	r3, [pc, #212]	@ (80036b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80035dc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80035e2:	6939      	ldr	r1, [r7, #16]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	4613      	mov	r3, r2
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	4413      	add	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	440b      	add	r3, r1
 80035f2:	3304      	adds	r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3301      	adds	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	429a      	cmp	r2, r3
 8003608:	dbeb      	blt.n	80035e2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800360a:	e000      	b.n	800360e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800360c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	429a      	cmp	r2, r3
 8003616:	da3f      	bge.n	8003698 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003618:	6939      	ldr	r1, [r7, #16]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	440b      	add	r3, r1
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800362c:	6939      	ldr	r1, [r7, #16]
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	440b      	add	r3, r1
 800363c:	3304      	adds	r3, #4
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003642:	6939      	ldr	r1, [r7, #16]
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	440b      	add	r3, r1
 8003650:	3320      	adds	r3, #32
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003656:	6939      	ldr	r1, [r7, #16]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	4613      	mov	r3, r2
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4413      	add	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	440b      	add	r3, r1
 8003664:	3328      	adds	r3, #40	@ 0x28
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800366a:	6939      	ldr	r1, [r7, #16]
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	440b      	add	r3, r1
 8003678:	3324      	adds	r3, #36	@ 0x24
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800367e:	6939      	ldr	r1, [r7, #16]
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	440b      	add	r3, r1
 800368c:	332c      	adds	r3, #44	@ 0x2c
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003692:	f3bf 8f5f 	dmb	sy
 8003696:	e002      	b.n	800369e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003698:	f04f 33ff 	mov.w	r3, #4294967295
 800369c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80036a4:	69fb      	ldr	r3, [r7, #28]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20012e88 	.word	0x20012e88

080036b4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80036c2:	4b21      	ldr	r3, [pc, #132]	@ (8003748 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80036c4:	623b      	str	r3, [r7, #32]
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b53      	cmp	r3, #83	@ 0x53
 80036ce:	d001      	beq.n	80036d4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80036d0:	f7ff fcc8 	bl	8003064 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80036d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003748 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80036d6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d82c      	bhi.n	8003738 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80036de:	f3ef 8311 	mrs	r3, BASEPRI
 80036e2:	f04f 0120 	mov.w	r1, #32
 80036e6:	f381 8811 	msr	BASEPRI, r1
 80036ea:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4613      	mov	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	3360      	adds	r3, #96	@ 0x60
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	4413      	add	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2200      	movs	r2, #0
 8003720:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003726:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003728:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
 8003736:	e002      	b.n	800373e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003740:	4618      	mov	r0, r3
 8003742:	3728      	adds	r7, #40	@ 0x28
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20012e88 	.word	0x20012e88

0800374c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	60fa      	str	r2, [r7, #12]
 8003762:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b80      	cmp	r3, #128	@ 0x80
 8003768:	d90a      	bls.n	8003780 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800376e:	e007      	b.n	8003780 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	1c53      	adds	r3, r2, #1
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1c59      	adds	r1, r3, #1
 800377a:	60f9      	str	r1, [r7, #12]
 800377c:	7812      	ldrb	r2, [r2, #0]
 800377e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1e5a      	subs	r2, r3, #1
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <_EncodeStr+0x46>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ee      	bne.n	8003770 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	b2da      	uxtb	r2, r3
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800379e:	68fb      	ldr	r3, [r7, #12]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80037ca:	4b34      	ldr	r3, [pc, #208]	@ (800389c <_HandleIncomingPacket+0xd8>)
 80037cc:	7e1b      	ldrb	r3, [r3, #24]
 80037ce:	4618      	mov	r0, r3
 80037d0:	1cfb      	adds	r3, r7, #3
 80037d2:	2201      	movs	r2, #1
 80037d4:	4619      	mov	r1, r3
 80037d6:	f7ff fded 	bl	80033b4 <SEGGER_RTT_ReadNoLock>
 80037da:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d057      	beq.n	8003892 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	2b80      	cmp	r3, #128	@ 0x80
 80037e6:	d031      	beq.n	800384c <_HandleIncomingPacket+0x88>
 80037e8:	2b80      	cmp	r3, #128	@ 0x80
 80037ea:	dc40      	bgt.n	800386e <_HandleIncomingPacket+0xaa>
 80037ec:	2b07      	cmp	r3, #7
 80037ee:	dc15      	bgt.n	800381c <_HandleIncomingPacket+0x58>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	dd3c      	ble.n	800386e <_HandleIncomingPacket+0xaa>
 80037f4:	3b01      	subs	r3, #1
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d839      	bhi.n	800386e <_HandleIncomingPacket+0xaa>
 80037fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003800 <_HandleIncomingPacket+0x3c>)
 80037fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003800:	08003823 	.word	0x08003823
 8003804:	08003829 	.word	0x08003829
 8003808:	0800382f 	.word	0x0800382f
 800380c:	08003835 	.word	0x08003835
 8003810:	0800383b 	.word	0x0800383b
 8003814:	08003841 	.word	0x08003841
 8003818:	08003847 	.word	0x08003847
 800381c:	2b7f      	cmp	r3, #127	@ 0x7f
 800381e:	d033      	beq.n	8003888 <_HandleIncomingPacket+0xc4>
 8003820:	e025      	b.n	800386e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003822:	f000 ff65 	bl	80046f0 <SEGGER_SYSVIEW_Start>
      break;
 8003826:	e034      	b.n	8003892 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003828:	f001 f81c 	bl	8004864 <SEGGER_SYSVIEW_Stop>
      break;
 800382c:	e031      	b.n	8003892 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800382e:	f001 f9f5 	bl	8004c1c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003832:	e02e      	b.n	8003892 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003834:	f001 f9ba 	bl	8004bac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003838:	e02b      	b.n	8003892 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800383a:	f001 f839 	bl	80048b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800383e:	e028      	b.n	8003892 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003840:	f001 fc32 	bl	80050a8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003844:	e025      	b.n	8003892 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003846:	f001 fc11 	bl	800506c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800384a:	e022      	b.n	8003892 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800384c:	4b13      	ldr	r3, [pc, #76]	@ (800389c <_HandleIncomingPacket+0xd8>)
 800384e:	7e1b      	ldrb	r3, [r3, #24]
 8003850:	4618      	mov	r0, r3
 8003852:	1cfb      	adds	r3, r7, #3
 8003854:	2201      	movs	r2, #1
 8003856:	4619      	mov	r1, r3
 8003858:	f7ff fdac 	bl	80033b4 <SEGGER_RTT_ReadNoLock>
 800385c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d013      	beq.n	800388c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	4618      	mov	r0, r3
 8003868:	f001 fb76 	bl	8004f58 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800386c:	e00e      	b.n	800388c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	b25b      	sxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	da0c      	bge.n	8003890 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003876:	4b09      	ldr	r3, [pc, #36]	@ (800389c <_HandleIncomingPacket+0xd8>)
 8003878:	7e1b      	ldrb	r3, [r3, #24]
 800387a:	4618      	mov	r0, r3
 800387c:	1cfb      	adds	r3, r7, #3
 800387e:	2201      	movs	r2, #1
 8003880:	4619      	mov	r1, r3
 8003882:	f7ff fd97 	bl	80033b4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003886:	e003      	b.n	8003890 <_HandleIncomingPacket+0xcc>
      break;
 8003888:	bf00      	nop
 800388a:	e002      	b.n	8003892 <_HandleIncomingPacket+0xce>
      break;
 800388c:	bf00      	nop
 800388e:	e000      	b.n	8003892 <_HandleIncomingPacket+0xce>
      break;
 8003890:	bf00      	nop
    }
  }
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20014348 	.word	0x20014348

080038a0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08c      	sub	sp, #48	@ 0x30
 80038a4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80038a6:	2301      	movs	r3, #1
 80038a8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	3301      	adds	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b4:	4b31      	ldr	r3, [pc, #196]	@ (800397c <_TrySendOverflowPacket+0xdc>)
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ba:	e00b      	b.n	80038d4 <_TrySendOverflowPacket+0x34>
 80038bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c2:	1c59      	adds	r1, r3, #1
 80038c4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80038c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d0:	09db      	lsrs	r3, r3, #7
 80038d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80038d8:	d8f0      	bhi.n	80038bc <_TrySendOverflowPacket+0x1c>
 80038da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80038ea:	4b25      	ldr	r3, [pc, #148]	@ (8003980 <_TrySendOverflowPacket+0xe0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80038f0:	4b22      	ldr	r3, [pc, #136]	@ (800397c <_TrySendOverflowPacket+0xdc>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	623b      	str	r3, [r7, #32]
 8003902:	e00b      	b.n	800391c <_TrySendOverflowPacket+0x7c>
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	1c59      	adds	r1, r3, #1
 800390c:	6279      	str	r1, [r7, #36]	@ 0x24
 800390e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	09db      	lsrs	r3, r3, #7
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003920:	d8f0      	bhi.n	8003904 <_TrySendOverflowPacket+0x64>
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	627a      	str	r2, [r7, #36]	@ 0x24
 8003928:	6a3a      	ldr	r2, [r7, #32]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003932:	4b12      	ldr	r3, [pc, #72]	@ (800397c <_TrySendOverflowPacket+0xdc>)
 8003934:	785b      	ldrb	r3, [r3, #1]
 8003936:	4618      	mov	r0, r3
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	461a      	mov	r2, r3
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	4619      	mov	r1, r3
 8003944:	f7fc fc44 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003948:	4603      	mov	r3, r0
 800394a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d009      	beq.n	8003966 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003952:	4a0a      	ldr	r2, [pc, #40]	@ (800397c <_TrySendOverflowPacket+0xdc>)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003958:	4b08      	ldr	r3, [pc, #32]	@ (800397c <_TrySendOverflowPacket+0xdc>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	3b01      	subs	r3, #1
 800395e:	b2da      	uxtb	r2, r3
 8003960:	4b06      	ldr	r3, [pc, #24]	@ (800397c <_TrySendOverflowPacket+0xdc>)
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e004      	b.n	8003970 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003966:	4b05      	ldr	r3, [pc, #20]	@ (800397c <_TrySendOverflowPacket+0xdc>)
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	3301      	adds	r3, #1
 800396c:	4a03      	ldr	r2, [pc, #12]	@ (800397c <_TrySendOverflowPacket+0xdc>)
 800396e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003970:	693b      	ldr	r3, [r7, #16]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3730      	adds	r7, #48	@ 0x30
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20014348 	.word	0x20014348
 8003980:	e0001004 	.word	0xe0001004

08003984 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	@ 0x28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003990:	4b6b      	ldr	r3, [pc, #428]	@ (8003b40 <_SendPacket+0x1bc>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d010      	beq.n	80039ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003998:	4b69      	ldr	r3, [pc, #420]	@ (8003b40 <_SendPacket+0x1bc>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80a2 	beq.w	8003ae6 <_SendPacket+0x162>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80039a2:	4b67      	ldr	r3, [pc, #412]	@ (8003b40 <_SendPacket+0x1bc>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d109      	bne.n	80039be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80039aa:	f7ff ff79 	bl	80038a0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80039ae:	4b64      	ldr	r3, [pc, #400]	@ (8003b40 <_SendPacket+0x1bc>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	f040 8099 	bne.w	8003aea <_SendPacket+0x166>
      goto SendDone;
    }
  }
Send:
 80039b8:	e001      	b.n	80039be <_SendPacket+0x3a>
    goto Send;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <_SendPacket+0x3c>
Send:
 80039be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b1f      	cmp	r3, #31
 80039c4:	d809      	bhi.n	80039da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80039c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003b40 <_SendPacket+0x1bc>)
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f040 808a 	bne.w	8003aee <_SendPacket+0x16a>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b17      	cmp	r3, #23
 80039de:	d807      	bhi.n	80039f0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e03d      	b.n	8003a6c <_SendPacket+0xe8>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80039fc:	d912      	bls.n	8003a24 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	09da      	lsrs	r2, r3, #7
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	3a01      	subs	r2, #1
 8003a16:	60fa      	str	r2, [r7, #12]
 8003a18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e006      	b.n	8003a32 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
        *--pStartPacket = (U8)(EventId | 0x80);
      }
    }
#else
    if (EventId > 127) {
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a36:	d912      	bls.n	8003a5e <_SendPacket+0xda>
      *--pStartPacket = (U8)(EventId >> 7);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	09da      	lsrs	r2, r3, #7
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(EventId | 0x80);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	3a01      	subs	r2, #1
 8003a50:	60fa      	str	r2, [r7, #12]
 8003a52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e006      	b.n	8003a6c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = (U8)EventId;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003a6c:	4b35      	ldr	r3, [pc, #212]	@ (8003b44 <_SendPacket+0x1c0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003a72:	4b33      	ldr	r3, [pc, #204]	@ (8003b40 <_SendPacket+0x1bc>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	623b      	str	r3, [r7, #32]
 8003a84:	e00b      	b.n	8003a9e <_SendPacket+0x11a>
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	1c59      	adds	r1, r3, #1
 8003a8e:	6279      	str	r1, [r7, #36]	@ 0x24
 8003a90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	09db      	lsrs	r3, r3, #7
 8003a9c:	623b      	str	r3, [r7, #32]
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003aa2:	d8f0      	bhi.n	8003a86 <_SendPacket+0x102>
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003ab4:	4b22      	ldr	r3, [pc, #136]	@ (8003b40 <_SendPacket+0x1bc>)
 8003ab6:	785b      	ldrb	r3, [r3, #1]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	f7fc fb84 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003ac8:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <_SendPacket+0x154>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8003b40 <_SendPacket+0x1bc>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	60d3      	str	r3, [r2, #12]
 8003ad6:	e00b      	b.n	8003af0 <_SendPacket+0x16c>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003ad8:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <_SendPacket+0x1bc>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	4b17      	ldr	r3, [pc, #92]	@ (8003b40 <_SendPacket+0x1bc>)
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	e004      	b.n	8003af0 <_SendPacket+0x16c>
    goto SendDone;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <_SendPacket+0x16c>
      goto SendDone;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <_SendPacket+0x16c>
      goto SendDone;
 8003aee:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003af0:	4b13      	ldr	r3, [pc, #76]	@ (8003b40 <_SendPacket+0x1bc>)
 8003af2:	7e1b      	ldrb	r3, [r3, #24]
 8003af4:	4619      	mov	r1, r3
 8003af6:	4a14      	ldr	r2, [pc, #80]	@ (8003b48 <_SendPacket+0x1c4>)
 8003af8:	460b      	mov	r3, r1
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	440b      	add	r3, r1
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	336c      	adds	r3, #108	@ 0x6c
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <_SendPacket+0x1bc>)
 8003b08:	7e1b      	ldrb	r3, [r3, #24]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	490e      	ldr	r1, [pc, #56]	@ (8003b48 <_SendPacket+0x1c4>)
 8003b0e:	4603      	mov	r3, r0
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	4403      	add	r3, r0
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	440b      	add	r3, r1
 8003b18:	3370      	adds	r3, #112	@ 0x70
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d00b      	beq.n	8003b38 <_SendPacket+0x1b4>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003b20:	4b07      	ldr	r3, [pc, #28]	@ (8003b40 <_SendPacket+0x1bc>)
 8003b22:	789b      	ldrb	r3, [r3, #2]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d107      	bne.n	8003b38 <_SendPacket+0x1b4>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <_SendPacket+0x1bc>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003b2e:	f7ff fe49 	bl	80037c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003b32:	4b03      	ldr	r3, [pc, #12]	@ (8003b40 <_SendPacket+0x1bc>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003b38:	bf00      	nop
 8003b3a:	3728      	adds	r7, #40	@ 0x28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20014348 	.word	0x20014348
 8003b44:	e0001004 	.word	0xe0001004
 8003b48:	20012e88 	.word	0x20012e88

08003b4c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	@ 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	3301      	adds	r3, #1
 8003b62:	2b80      	cmp	r3, #128	@ 0x80
 8003b64:	d80a      	bhi.n	8003b7c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	1c59      	adds	r1, r3, #1
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6051      	str	r1, [r2, #4]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b80      	cmp	r3, #128	@ 0x80
 8003b82:	d15a      	bne.n	8003c3a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	623b      	str	r3, [r7, #32]
 8003ba4:	e00b      	b.n	8003bbe <_StoreChar+0x72>
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	1c59      	adds	r1, r3, #1
 8003bae:	6279      	str	r1, [r7, #36]	@ 0x24
 8003bb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	09db      	lsrs	r3, r3, #7
 8003bbc:	623b      	str	r3, [r7, #32]
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bc2:	d8f0      	bhi.n	8003ba6 <_StoreChar+0x5a>
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bca:	6a3a      	ldr	r2, [r7, #32]
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	e00b      	b.n	8003bf6 <_StoreChar+0xaa>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	1c59      	adds	r1, r3, #1
 8003be6:	61f9      	str	r1, [r7, #28]
 8003be8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	701a      	strb	r2, [r3, #0]
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	09db      	lsrs	r3, r3, #7
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bfa:	d8f0      	bhi.n	8003bde <_StoreChar+0x92>
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	61fa      	str	r2, [r7, #28]
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	221a      	movs	r2, #26
 8003c12:	6939      	ldr	r1, [r7, #16]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff feb5 	bl	8003984 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fdc4 	bl	80037ac <_PreparePacket>
 8003c24:	4602      	mov	r2, r0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	611a      	str	r2, [r3, #16]
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	3728      	adds	r7, #40	@ 0x28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	@ 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003c56:	2301      	movs	r3, #1
 8003c58:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003c5e:	e007      	b.n	8003c70 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8003c60:	6a3a      	ldr	r2, [r7, #32]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c68:	623b      	str	r3, [r7, #32]
    Width++;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d2f3      	bcs.n	8003c60 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d901      	bls.n	8003c84 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d000      	beq.n	8003c90 <_PrintUnsigned+0x4c>
 8003c8e:	e01f      	b.n	8003cd0 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01c      	beq.n	8003cd0 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <_PrintUnsigned+0x68>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <_PrintUnsigned+0x68>
        c = '0';
 8003ca6:	2330      	movs	r3, #48	@ 0x30
 8003ca8:	76fb      	strb	r3, [r7, #27]
 8003caa:	e001      	b.n	8003cb0 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8003cac:	2320      	movs	r3, #32
 8003cae:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003cb0:	e007      	b.n	8003cc2 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8003cb8:	7efb      	ldrb	r3, [r7, #27]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff ff45 	bl	8003b4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <_PrintUnsigned+0x8c>
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d3f0      	bcc.n	8003cb2 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d903      	bls.n	8003cde <_PrintUnsigned+0x9a>
      NumDigits--;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	e009      	b.n	8003cf2 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d200      	bcs.n	8003cf2 <_PrintUnsigned+0xae>
        break;
 8003cf0:	e005      	b.n	8003cfe <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003cfc:	e7e8      	b.n	8003cd0 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d0c:	fb02 f303 	mul.w	r3, r2, r3
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003d16:	4a15      	ldr	r2, [pc, #84]	@ (8003d6c <_PrintUnsigned+0x128>)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7ff ff13 	bl	8003b4c <_StoreChar>
    Digit /= Base;
 8003d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e3      	bne.n	8003cfe <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d011      	beq.n	8003d64 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003d46:	e006      	b.n	8003d56 <_PrintUnsigned+0x112>
        FieldWidth--;
 8003d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8003d4e:	2120      	movs	r1, #32
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f7ff fefb 	bl	8003b4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <_PrintUnsigned+0x120>
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d3f1      	bcc.n	8003d48 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8003d64:	bf00      	nop
 8003d66:	3728      	adds	r7, #40	@ 0x28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	080070a4 	.word	0x080070a4

08003d70 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bfb8      	it	lt
 8003d84:	425b      	neglt	r3, r3
 8003d86:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003d8c:	e007      	b.n	8003d9e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d96:	613b      	str	r3, [r7, #16]
    Width++;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	daf3      	bge.n	8003d8e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d901      	bls.n	8003db2 <_PrintInt+0x42>
    Width = NumDigits;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <_PrintInt+0x5e>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	db04      	blt.n	8003dc8 <_PrintInt+0x58>
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <_PrintInt+0x5e>
    FieldWidth--;
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <_PrintInt+0x6e>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d016      	beq.n	8003e0c <_PrintInt+0x9c>
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d111      	bne.n	8003e0c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00e      	beq.n	8003e0c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003dee:	e006      	b.n	8003dfe <_PrintInt+0x8e>
        FieldWidth--;
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003df6:	2120      	movs	r1, #32
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7ff fea7 	bl	8003b4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <_PrintInt+0x9c>
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d3f1      	bcc.n	8003df0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	da07      	bge.n	8003e22 <_PrintInt+0xb2>
    v = -v;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	425b      	negs	r3, r3
 8003e16:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8003e18:	212d      	movs	r1, #45	@ 0x2d
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff fe96 	bl	8003b4c <_StoreChar>
 8003e20:	e008      	b.n	8003e34 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8003e2c:	212b      	movs	r1, #43	@ 0x2b
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff fe8c 	bl	8003b4c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <_PrintInt+0x102>
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d114      	bne.n	8003e72 <_PrintInt+0x102>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d111      	bne.n	8003e72 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00e      	beq.n	8003e72 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e54:	e006      	b.n	8003e64 <_PrintInt+0xf4>
        FieldWidth--;
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8003e5c:	2130      	movs	r1, #48	@ 0x30
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff fe74 	bl	8003b4c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <_PrintInt+0x102>
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d3f1      	bcc.n	8003e56 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff fedf 	bl	8003c44 <_PrintUnsigned>
}
 8003e86:	bf00      	nop
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b098      	sub	sp, #96	@ 0x60
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8003ea0:	f04f 0120 	mov.w	r1, #32
 8003ea4:	f381 8811 	msr	BASEPRI, r1
 8003ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eaa:	48b7      	ldr	r0, [pc, #732]	@ (8004188 <_VPrintTarget+0x2f8>)
 8003eac:	f7ff fc7e 	bl	80037ac <_PreparePacket>
 8003eb0:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003eb2:	4bb5      	ldr	r3, [pc, #724]	@ (8004188 <_VPrintTarget+0x2f8>)
 8003eb4:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8003ed6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 81a8 	beq.w	8004230 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8003ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003ee4:	2b25      	cmp	r3, #37	@ 0x25
 8003ee6:	f040 8195 	bne.w	8004214 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8003eea:	2300      	movs	r3, #0
 8003eec:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8003efa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003efe:	3b23      	subs	r3, #35	@ 0x23
 8003f00:	2b0d      	cmp	r3, #13
 8003f02:	d83f      	bhi.n	8003f84 <_VPrintTarget+0xf4>
 8003f04:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <_VPrintTarget+0x7c>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f75 	.word	0x08003f75
 8003f10:	08003f85 	.word	0x08003f85
 8003f14:	08003f85 	.word	0x08003f85
 8003f18:	08003f85 	.word	0x08003f85
 8003f1c:	08003f85 	.word	0x08003f85
 8003f20:	08003f85 	.word	0x08003f85
 8003f24:	08003f85 	.word	0x08003f85
 8003f28:	08003f85 	.word	0x08003f85
 8003f2c:	08003f65 	.word	0x08003f65
 8003f30:	08003f85 	.word	0x08003f85
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f85 	.word	0x08003f85
 8003f3c:	08003f85 	.word	0x08003f85
 8003f40:	08003f55 	.word	0x08003f55
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8003f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e01a      	b.n	8003f8a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8003f54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f56:	f043 0302 	orr.w	r3, r3, #2
 8003f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e012      	b.n	8003f8a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8003f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f66:	f043 0304 	orr.w	r3, r3, #4
 8003f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	e00a      	b.n	8003f8a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8003f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f76:	f043 0308 	orr.w	r3, r3, #8
 8003f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	e002      	b.n	8003f8a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8003f84:	2300      	movs	r3, #0
 8003f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f88:	bf00      	nop
        }
      } while (v);
 8003f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1b0      	bne.n	8003ef2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003f90:	2300      	movs	r3, #0
 8003f92:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8003f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003fa0:	2b2f      	cmp	r3, #47	@ 0x2f
 8003fa2:	d912      	bls.n	8003fca <_VPrintTarget+0x13a>
 8003fa4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003fa8:	2b39      	cmp	r3, #57	@ 0x39
 8003faa:	d80e      	bhi.n	8003fca <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8003fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3b30      	subs	r3, #48	@ 0x30
 8003fc6:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8003fc8:	e7e4      	b.n	8003f94 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8003fd6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003fda:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fdc:	d11d      	bne.n	800401a <_VPrintTarget+0x18a>
        sFormat++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8003fec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003ff0:	2b2f      	cmp	r3, #47	@ 0x2f
 8003ff2:	d912      	bls.n	800401a <_VPrintTarget+0x18a>
 8003ff4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003ff8:	2b39      	cmp	r3, #57	@ 0x39
 8003ffa:	d80e      	bhi.n	800401a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004002:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	461a      	mov	r2, r3
 800400e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004012:	4413      	add	r3, r2
 8004014:	3b30      	subs	r3, #48	@ 0x30
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8004018:	e7e4      	b.n	8003fe4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004022:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004026:	2b6c      	cmp	r3, #108	@ 0x6c
 8004028:	d003      	beq.n	8004032 <_VPrintTarget+0x1a2>
 800402a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800402e:	2b68      	cmp	r3, #104	@ 0x68
 8004030:	d107      	bne.n	8004042 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3301      	adds	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004040:	e7ef      	b.n	8004022 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004042:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004046:	2b25      	cmp	r3, #37	@ 0x25
 8004048:	f000 80d8 	beq.w	80041fc <_VPrintTarget+0x36c>
 800404c:	2b25      	cmp	r3, #37	@ 0x25
 800404e:	f2c0 80dc 	blt.w	800420a <_VPrintTarget+0x37a>
 8004052:	2b78      	cmp	r3, #120	@ 0x78
 8004054:	f300 80d9 	bgt.w	800420a <_VPrintTarget+0x37a>
 8004058:	2b58      	cmp	r3, #88	@ 0x58
 800405a:	f2c0 80d6 	blt.w	800420a <_VPrintTarget+0x37a>
 800405e:	3b58      	subs	r3, #88	@ 0x58
 8004060:	2b20      	cmp	r3, #32
 8004062:	f200 80d2 	bhi.w	800420a <_VPrintTarget+0x37a>
 8004066:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <_VPrintTarget+0x1dc>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	08004163 	.word	0x08004163
 8004070:	0800420b 	.word	0x0800420b
 8004074:	0800420b 	.word	0x0800420b
 8004078:	0800420b 	.word	0x0800420b
 800407c:	0800420b 	.word	0x0800420b
 8004080:	0800420b 	.word	0x0800420b
 8004084:	0800420b 	.word	0x0800420b
 8004088:	0800420b 	.word	0x0800420b
 800408c:	0800420b 	.word	0x0800420b
 8004090:	0800420b 	.word	0x0800420b
 8004094:	0800420b 	.word	0x0800420b
 8004098:	080040f1 	.word	0x080040f1
 800409c:	08004117 	.word	0x08004117
 80040a0:	0800420b 	.word	0x0800420b
 80040a4:	0800420b 	.word	0x0800420b
 80040a8:	0800420b 	.word	0x0800420b
 80040ac:	0800420b 	.word	0x0800420b
 80040b0:	0800420b 	.word	0x0800420b
 80040b4:	0800420b 	.word	0x0800420b
 80040b8:	0800420b 	.word	0x0800420b
 80040bc:	0800420b 	.word	0x0800420b
 80040c0:	0800420b 	.word	0x0800420b
 80040c4:	0800420b 	.word	0x0800420b
 80040c8:	0800420b 	.word	0x0800420b
 80040cc:	080041d7 	.word	0x080041d7
 80040d0:	0800420b 	.word	0x0800420b
 80040d4:	0800420b 	.word	0x0800420b
 80040d8:	0800418d 	.word	0x0800418d
 80040dc:	0800420b 	.word	0x0800420b
 80040e0:	0800413d 	.word	0x0800413d
 80040e4:	0800420b 	.word	0x0800420b
 80040e8:	0800420b 	.word	0x0800420b
 80040ec:	08004163 	.word	0x08004163
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	1d19      	adds	r1, r3, #4
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6011      	str	r1, [r2, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 80040fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004100:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8004104:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004108:	f107 0310 	add.w	r3, r7, #16
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fd1c 	bl	8003b4c <_StoreChar>
        break;
 8004114:	e07a      	b.n	800420c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	1d19      	adds	r1, r3, #4
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6011      	str	r1, [r2, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004124:	f107 0010 	add.w	r0, r7, #16
 8004128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004132:	220a      	movs	r2, #10
 8004134:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004136:	f7ff fe1b 	bl	8003d70 <_PrintInt>
        break;
 800413a:	e067      	b.n	800420c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	1d19      	adds	r1, r3, #4
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6011      	str	r1, [r2, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800414a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800414c:	f107 0010 	add.w	r0, r7, #16
 8004150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800415a:	220a      	movs	r2, #10
 800415c:	f7ff fd72 	bl	8003c44 <_PrintUnsigned>
        break;
 8004160:	e054      	b.n	800420c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	1d19      	adds	r1, r3, #4
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6011      	str	r1, [r2, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004170:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004172:	f107 0010 	add.w	r0, r7, #16
 8004176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004180:	2210      	movs	r2, #16
 8004182:	f7ff fd5f 	bl	8003c44 <_PrintUnsigned>
        break;
 8004186:	e041      	b.n	800420c <_VPrintTarget+0x37c>
 8004188:	20014378 	.word	0x20014378
      case 's':
        s = va_arg(*pParamList, const char*);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	1d19      	adds	r1, r3, #4
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6011      	str	r1, [r2, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 800419a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <_VPrintTarget+0x314>
          s = "(null)";
 80041a0:	4b4a      	ldr	r3, [pc, #296]	@ (80042cc <_VPrintTarget+0x43c>)
 80041a2:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 80041a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 80041ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ae:	3301      	adds	r3, #1
 80041b0:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 80041b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80041ba:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80041be:	f107 0310 	add.w	r3, r7, #16
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fcc1 	bl	8003b4c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80041ce:	d9e9      	bls.n	80041a4 <_VPrintTarget+0x314>
        break;
 80041d0:	e01c      	b.n	800420c <_VPrintTarget+0x37c>
            break;
 80041d2:	bf00      	nop
        break;
 80041d4:	e01a      	b.n	800420c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	1d19      	adds	r1, r3, #4
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6011      	str	r1, [r2, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80041e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80041e6:	f107 0010 	add.w	r0, r7, #16
 80041ea:	2300      	movs	r3, #0
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	2308      	movs	r3, #8
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2308      	movs	r3, #8
 80041f4:	2210      	movs	r2, #16
 80041f6:	f7ff fd25 	bl	8003c44 <_PrintUnsigned>
        break;
 80041fa:	e007      	b.n	800420c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80041fc:	f107 0310 	add.w	r3, r7, #16
 8004200:	2125      	movs	r1, #37	@ 0x25
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fca2 	bl	8003b4c <_StoreChar>
        break;
 8004208:	e000      	b.n	800420c <_VPrintTarget+0x37c>
      default:
        break;
 800420a:	bf00      	nop
      }
      sFormat++;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	3301      	adds	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e007      	b.n	8004224 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004214:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004218:	f107 0310 	add.w	r3, r7, #16
 800421c:	4611      	mov	r1, r2
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fc94 	bl	8003b4c <_StoreChar>
    }
  } while (*sFormat);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f47f ae4d 	bne.w	8003ec8 <_VPrintTarget+0x38>
 800422e:	e000      	b.n	8004232 <_VPrintTarget+0x3a2>
      break;
 8004230:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d041      	beq.n	80042bc <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004238:	6a3a      	ldr	r2, [r7, #32]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004248:	e00b      	b.n	8004262 <_VPrintTarget+0x3d2>
 800424a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424c:	b2da      	uxtb	r2, r3
 800424e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004250:	1c59      	adds	r1, r3, #1
 8004252:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004254:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	09db      	lsrs	r3, r3, #7
 8004260:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004264:	2b7f      	cmp	r3, #127	@ 0x7f
 8004266:	d8f0      	bhi.n	800424a <_VPrintTarget+0x3ba>
 8004268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800426e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004276:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	637b      	str	r3, [r7, #52]	@ 0x34
 800427c:	2300      	movs	r3, #0
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004280:	e00b      	b.n	800429a <_VPrintTarget+0x40a>
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	b2da      	uxtb	r2, r3
 8004286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004288:	1c59      	adds	r1, r3, #1
 800428a:	6379      	str	r1, [r7, #52]	@ 0x34
 800428c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	09db      	lsrs	r3, r3, #7
 8004298:	633b      	str	r3, [r7, #48]	@ 0x30
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	2b7f      	cmp	r3, #127	@ 0x7f
 800429e:	d8f0      	bhi.n	8004282 <_VPrintTarget+0x3f2>
 80042a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	637a      	str	r2, [r7, #52]	@ 0x34
 80042a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ae:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	6979      	ldr	r1, [r7, #20]
 80042b4:	221a      	movs	r2, #26
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fb64 	bl	8003984 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80042bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042be:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80042c2:	bf00      	nop
 80042c4:	3758      	adds	r7, #88	@ 0x58
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	08006ffc 	.word	0x08006ffc

080042d0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80042de:	2300      	movs	r3, #0
 80042e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80042e4:	4917      	ldr	r1, [pc, #92]	@ (8004344 <SEGGER_SYSVIEW_Init+0x74>)
 80042e6:	4818      	ldr	r0, [pc, #96]	@ (8004348 <SEGGER_SYSVIEW_Init+0x78>)
 80042e8:	f7ff f960 	bl	80035ac <SEGGER_RTT_AllocUpBuffer>
 80042ec:	4603      	mov	r3, r0
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	4b16      	ldr	r3, [pc, #88]	@ (800434c <SEGGER_SYSVIEW_Init+0x7c>)
 80042f2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80042f4:	4b15      	ldr	r3, [pc, #84]	@ (800434c <SEGGER_SYSVIEW_Init+0x7c>)
 80042f6:	785a      	ldrb	r2, [r3, #1]
 80042f8:	4b14      	ldr	r3, [pc, #80]	@ (800434c <SEGGER_SYSVIEW_Init+0x7c>)
 80042fa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80042fc:	4b13      	ldr	r3, [pc, #76]	@ (800434c <SEGGER_SYSVIEW_Init+0x7c>)
 80042fe:	7e1b      	ldrb	r3, [r3, #24]
 8004300:	4618      	mov	r0, r3
 8004302:	2300      	movs	r3, #0
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	2308      	movs	r3, #8
 8004308:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <SEGGER_SYSVIEW_Init+0x80>)
 800430a:	490f      	ldr	r1, [pc, #60]	@ (8004348 <SEGGER_SYSVIEW_Init+0x78>)
 800430c:	f7ff f9d2 	bl	80036b4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004310:	4b0e      	ldr	r3, [pc, #56]	@ (800434c <SEGGER_SYSVIEW_Init+0x7c>)
 8004312:	2200      	movs	r2, #0
 8004314:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004316:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <SEGGER_SYSVIEW_Init+0x84>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a0c      	ldr	r2, [pc, #48]	@ (800434c <SEGGER_SYSVIEW_Init+0x7c>)
 800431c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800431e:	4a0b      	ldr	r2, [pc, #44]	@ (800434c <SEGGER_SYSVIEW_Init+0x7c>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004324:	4a09      	ldr	r2, [pc, #36]	@ (800434c <SEGGER_SYSVIEW_Init+0x7c>)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800432a:	4a08      	ldr	r2, [pc, #32]	@ (800434c <SEGGER_SYSVIEW_Init+0x7c>)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004330:	4a06      	ldr	r2, [pc, #24]	@ (800434c <SEGGER_SYSVIEW_Init+0x7c>)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004336:	4b05      	ldr	r3, [pc, #20]	@ (800434c <SEGGER_SYSVIEW_Init+0x7c>)
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	20013340 	.word	0x20013340
 8004348:	08007004 	.word	0x08007004
 800434c:	20014348 	.word	0x20014348
 8004350:	20014340 	.word	0x20014340
 8004354:	e0001004 	.word	0xe0001004

08004358 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004360:	4a04      	ldr	r2, [pc, #16]	@ (8004374 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6113      	str	r3, [r2, #16]
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20014348 	.word	0x20014348

08004378 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004380:	f3ef 8311 	mrs	r3, BASEPRI
 8004384:	f04f 0120 	mov.w	r1, #32
 8004388:	f381 8811 	msr	BASEPRI, r1
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	4808      	ldr	r0, [pc, #32]	@ (80043b0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004390:	f7ff fa0c 	bl	80037ac <_PreparePacket>
 8004394:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f7ff faf2 	bl	8003984 <_SendPacket>
  RECORD_END();
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f383 8811 	msr	BASEPRI, r3
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20014378 	.word	0x20014378

080043b4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80043be:	f3ef 8311 	mrs	r3, BASEPRI
 80043c2:	f04f 0120 	mov.w	r1, #32
 80043c6:	f381 8811 	msr	BASEPRI, r1
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	4816      	ldr	r0, [pc, #88]	@ (8004428 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80043ce:	f7ff f9ed 	bl	80037ac <_PreparePacket>
 80043d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	61fb      	str	r3, [r7, #28]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	e00b      	b.n	80043fa <SEGGER_SYSVIEW_RecordU32+0x46>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	1c59      	adds	r1, r3, #1
 80043ea:	61f9      	str	r1, [r7, #28]
 80043ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	09db      	lsrs	r3, r3, #7
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80043fe:	d8f0      	bhi.n	80043e2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	61fa      	str	r2, [r7, #28]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	68f9      	ldr	r1, [r7, #12]
 8004414:	6938      	ldr	r0, [r7, #16]
 8004416:	f7ff fab5 	bl	8003984 <_SendPacket>
  RECORD_END();
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f383 8811 	msr	BASEPRI, r3
}
 8004420:	bf00      	nop
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20014378 	.word	0x20014378

0800442c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b08c      	sub	sp, #48	@ 0x30
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004438:	f3ef 8311 	mrs	r3, BASEPRI
 800443c:	f04f 0120 	mov.w	r1, #32
 8004440:	f381 8811 	msr	BASEPRI, r1
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	4825      	ldr	r0, [pc, #148]	@ (80044dc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004448:	f7ff f9b0 	bl	80037ac <_PreparePacket>
 800444c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800445a:	e00b      	b.n	8004474 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	b2da      	uxtb	r2, r3
 8004460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004462:	1c59      	adds	r1, r3, #1
 8004464:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004466:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004470:	09db      	lsrs	r3, r3, #7
 8004472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004476:	2b7f      	cmp	r3, #127	@ 0x7f
 8004478:	d8f0      	bhi.n	800445c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800447a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004488:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	e00b      	b.n	80044ac <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	6279      	str	r1, [r7, #36]	@ 0x24
 800449e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	09db      	lsrs	r3, r3, #7
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80044b0:	d8f0      	bhi.n	8004494 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	6979      	ldr	r1, [r7, #20]
 80044c6:	69b8      	ldr	r0, [r7, #24]
 80044c8:	f7ff fa5c 	bl	8003984 <_SendPacket>
  RECORD_END();
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f383 8811 	msr	BASEPRI, r3
}
 80044d2:	bf00      	nop
 80044d4:	3730      	adds	r7, #48	@ 0x30
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20014378 	.word	0x20014378

080044e0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08e      	sub	sp, #56	@ 0x38
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80044ee:	f3ef 8311 	mrs	r3, BASEPRI
 80044f2:	f04f 0120 	mov.w	r1, #32
 80044f6:	f381 8811 	msr	BASEPRI, r1
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	4832      	ldr	r0, [pc, #200]	@ (80045c8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80044fe:	f7ff f955 	bl	80037ac <_PreparePacket>
 8004502:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	637b      	str	r3, [r7, #52]	@ 0x34
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004510:	e00b      	b.n	800452a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004514:	b2da      	uxtb	r2, r3
 8004516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004518:	1c59      	adds	r1, r3, #1
 800451a:	6379      	str	r1, [r7, #52]	@ 0x34
 800451c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	09db      	lsrs	r3, r3, #7
 8004528:	633b      	str	r3, [r7, #48]	@ 0x30
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	2b7f      	cmp	r3, #127	@ 0x7f
 800452e:	d8f0      	bhi.n	8004512 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	637a      	str	r2, [r7, #52]	@ 0x34
 8004536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004548:	e00b      	b.n	8004562 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	b2da      	uxtb	r2, r3
 800454e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004550:	1c59      	adds	r1, r3, #1
 8004552:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004554:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455e:	09db      	lsrs	r3, r3, #7
 8004560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004564:	2b7f      	cmp	r3, #127	@ 0x7f
 8004566:	d8f0      	bhi.n	800454a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800456e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]
 8004574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004576:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	623b      	str	r3, [r7, #32]
 8004580:	e00b      	b.n	800459a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	1c59      	adds	r1, r3, #1
 800458a:	6279      	str	r1, [r7, #36]	@ 0x24
 800458c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	09db      	lsrs	r3, r3, #7
 8004598:	623b      	str	r3, [r7, #32]
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	2b7f      	cmp	r3, #127	@ 0x7f
 800459e:	d8f0      	bhi.n	8004582 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80045a6:	6a3a      	ldr	r2, [r7, #32]
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	701a      	strb	r2, [r3, #0]
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	6979      	ldr	r1, [r7, #20]
 80045b4:	69b8      	ldr	r0, [r7, #24]
 80045b6:	f7ff f9e5 	bl	8003984 <_SendPacket>
  RECORD_END();
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f383 8811 	msr	BASEPRI, r3
}
 80045c0:	bf00      	nop
 80045c2:	3738      	adds	r7, #56	@ 0x38
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20014378 	.word	0x20014378

080045cc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b090      	sub	sp, #64	@ 0x40
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80045da:	f3ef 8311 	mrs	r3, BASEPRI
 80045de:	f04f 0120 	mov.w	r1, #32
 80045e2:	f381 8811 	msr	BASEPRI, r1
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	4840      	ldr	r0, [pc, #256]	@ (80046ec <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80045ea:	f7ff f8df 	bl	80037ac <_PreparePacket>
 80045ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045fc:	e00b      	b.n	8004616 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80045fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004600:	b2da      	uxtb	r2, r3
 8004602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004604:	1c59      	adds	r1, r3, #1
 8004606:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004608:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004612:	09db      	lsrs	r3, r3, #7
 8004614:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004618:	2b7f      	cmp	r3, #127	@ 0x7f
 800461a:	d8f0      	bhi.n	80045fe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800461c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004622:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	633b      	str	r3, [r7, #48]	@ 0x30
 8004634:	e00b      	b.n	800464e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	b2da      	uxtb	r2, r3
 800463a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	6379      	str	r1, [r7, #52]	@ 0x34
 8004640:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004644:	b2d2      	uxtb	r2, r2
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	09db      	lsrs	r3, r3, #7
 800464c:	633b      	str	r3, [r7, #48]	@ 0x30
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	2b7f      	cmp	r3, #127	@ 0x7f
 8004652:	d8f0      	bhi.n	8004636 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	637a      	str	r2, [r7, #52]	@ 0x34
 800465a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004662:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800466c:	e00b      	b.n	8004686 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	b2da      	uxtb	r2, r3
 8004672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004674:	1c59      	adds	r1, r3, #1
 8004676:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004678:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]
 8004680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004682:	09db      	lsrs	r3, r3, #7
 8004684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004688:	2b7f      	cmp	r3, #127	@ 0x7f
 800468a:	d8f0      	bhi.n	800466e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800468c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]
 8004698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046a2:	623b      	str	r3, [r7, #32]
 80046a4:	e00b      	b.n	80046be <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	1c59      	adds	r1, r3, #1
 80046ae:	6279      	str	r1, [r7, #36]	@ 0x24
 80046b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	09db      	lsrs	r3, r3, #7
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80046c2:	d8f0      	bhi.n	80046a6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80046ca:	6a3a      	ldr	r2, [r7, #32]
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	6979      	ldr	r1, [r7, #20]
 80046d8:	69b8      	ldr	r0, [r7, #24]
 80046da:	f7ff f953 	bl	8003984 <_SendPacket>
  RECORD_END();
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f383 8811 	msr	BASEPRI, r3
}
 80046e4:	bf00      	nop
 80046e6:	3740      	adds	r7, #64	@ 0x40
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20014378 	.word	0x20014378

080046f0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08c      	sub	sp, #48	@ 0x30
 80046f4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80046f6:	4b58      	ldr	r3, [pc, #352]	@ (8004858 <SEGGER_SYSVIEW_Start+0x168>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80046fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004700:	f04f 0120 	mov.w	r1, #32
 8004704:	f381 8811 	msr	BASEPRI, r1
 8004708:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800470a:	4b53      	ldr	r3, [pc, #332]	@ (8004858 <SEGGER_SYSVIEW_Start+0x168>)
 800470c:	785b      	ldrb	r3, [r3, #1]
 800470e:	220a      	movs	r2, #10
 8004710:	4952      	ldr	r1, [pc, #328]	@ (800485c <SEGGER_SYSVIEW_Start+0x16c>)
 8004712:	4618      	mov	r0, r3
 8004714:	f7fb fd5c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800471e:	200a      	movs	r0, #10
 8004720:	f7ff fe2a 	bl	8004378 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004724:	f3ef 8311 	mrs	r3, BASEPRI
 8004728:	f04f 0120 	mov.w	r1, #32
 800472c:	f381 8811 	msr	BASEPRI, r1
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	484b      	ldr	r0, [pc, #300]	@ (8004860 <SEGGER_SYSVIEW_Start+0x170>)
 8004734:	f7ff f83a 	bl	80037ac <_PreparePacket>
 8004738:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004742:	4b45      	ldr	r3, [pc, #276]	@ (8004858 <SEGGER_SYSVIEW_Start+0x168>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004748:	e00b      	b.n	8004762 <SEGGER_SYSVIEW_Start+0x72>
 800474a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474c:	b2da      	uxtb	r2, r3
 800474e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004750:	1c59      	adds	r1, r3, #1
 8004752:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004754:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475e:	09db      	lsrs	r3, r3, #7
 8004760:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	2b7f      	cmp	r3, #127	@ 0x7f
 8004766:	d8f0      	bhi.n	800474a <SEGGER_SYSVIEW_Start+0x5a>
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800476e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004776:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
 800477c:	4b36      	ldr	r3, [pc, #216]	@ (8004858 <SEGGER_SYSVIEW_Start+0x168>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	623b      	str	r3, [r7, #32]
 8004782:	e00b      	b.n	800479c <SEGGER_SYSVIEW_Start+0xac>
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	b2da      	uxtb	r2, r3
 8004788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	6279      	str	r1, [r7, #36]	@ 0x24
 800478e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	09db      	lsrs	r3, r3, #7
 800479a:	623b      	str	r3, [r7, #32]
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	2b7f      	cmp	r3, #127	@ 0x7f
 80047a0:	d8f0      	bhi.n	8004784 <SEGGER_SYSVIEW_Start+0x94>
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	4b28      	ldr	r3, [pc, #160]	@ (8004858 <SEGGER_SYSVIEW_Start+0x168>)
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	e00b      	b.n	80047d6 <SEGGER_SYSVIEW_Start+0xe6>
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	1c59      	adds	r1, r3, #1
 80047c6:	61f9      	str	r1, [r7, #28]
 80047c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	09db      	lsrs	r3, r3, #7
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80047da:	d8f0      	bhi.n	80047be <SEGGER_SYSVIEW_Start+0xce>
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	61fa      	str	r2, [r7, #28]
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	e00b      	b.n	800480e <SEGGER_SYSVIEW_Start+0x11e>
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	1c59      	adds	r1, r3, #1
 80047fe:	6179      	str	r1, [r7, #20]
 8004800:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	09db      	lsrs	r3, r3, #7
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b7f      	cmp	r3, #127	@ 0x7f
 8004812:	d8f0      	bhi.n	80047f6 <SEGGER_SYSVIEW_Start+0x106>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	617a      	str	r2, [r7, #20]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004824:	2218      	movs	r2, #24
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff f8ab 	bl	8003984 <_SendPacket>
      RECORD_END();
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004834:	4b08      	ldr	r3, [pc, #32]	@ (8004858 <SEGGER_SYSVIEW_Start+0x168>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800483c:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <SEGGER_SYSVIEW_Start+0x168>)
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004842:	f000 f9eb 	bl	8004c1c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004846:	f000 f9b1 	bl	8004bac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800484a:	f000 fc2d 	bl	80050a8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800484e:	bf00      	nop
 8004850:	3730      	adds	r7, #48	@ 0x30
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20014348 	.word	0x20014348
 800485c:	08007098 	.word	0x08007098
 8004860:	20014378 	.word	0x20014378

08004864 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800486a:	f3ef 8311 	mrs	r3, BASEPRI
 800486e:	f04f 0120 	mov.w	r1, #32
 8004872:	f381 8811 	msr	BASEPRI, r1
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	480b      	ldr	r0, [pc, #44]	@ (80048a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800487a:	f7fe ff97 	bl	80037ac <_PreparePacket>
 800487e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004880:	4b0a      	ldr	r3, [pc, #40]	@ (80048ac <SEGGER_SYSVIEW_Stop+0x48>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004888:	220b      	movs	r2, #11
 800488a:	6839      	ldr	r1, [r7, #0]
 800488c:	6838      	ldr	r0, [r7, #0]
 800488e:	f7ff f879 	bl	8003984 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004892:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <SEGGER_SYSVIEW_Stop+0x48>)
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f383 8811 	msr	BASEPRI, r3
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20014378 	.word	0x20014378
 80048ac:	20014348 	.word	0x20014348

080048b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08c      	sub	sp, #48	@ 0x30
 80048b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80048b6:	f3ef 8311 	mrs	r3, BASEPRI
 80048ba:	f04f 0120 	mov.w	r1, #32
 80048be:	f381 8811 	msr	BASEPRI, r1
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	4845      	ldr	r0, [pc, #276]	@ (80049dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80048c6:	f7fe ff71 	bl	80037ac <_PreparePacket>
 80048ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d4:	4b42      	ldr	r3, [pc, #264]	@ (80049e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048da:	e00b      	b.n	80048f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e2:	1c59      	adds	r1, r3, #1
 80048e4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80048e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f0:	09db      	lsrs	r3, r3, #7
 80048f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80048f8:	d8f0      	bhi.n	80048dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80048fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	627b      	str	r3, [r7, #36]	@ 0x24
 800490e:	4b34      	ldr	r3, [pc, #208]	@ (80049e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	623b      	str	r3, [r7, #32]
 8004914:	e00b      	b.n	800492e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	1c59      	adds	r1, r3, #1
 800491e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004920:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	09db      	lsrs	r3, r3, #7
 800492c:	623b      	str	r3, [r7, #32]
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	2b7f      	cmp	r3, #127	@ 0x7f
 8004932:	d8f0      	bhi.n	8004916 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	627a      	str	r2, [r7, #36]	@ 0x24
 800493a:	6a3a      	ldr	r2, [r7, #32]
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	4b25      	ldr	r3, [pc, #148]	@ (80049e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	e00b      	b.n	8004968 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	61f9      	str	r1, [r7, #28]
 800495a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	09db      	lsrs	r3, r3, #7
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b7f      	cmp	r3, #127	@ 0x7f
 800496c:	d8f0      	bhi.n	8004950 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	61fa      	str	r2, [r7, #28]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	e00b      	b.n	80049a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	b2da      	uxtb	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	1c59      	adds	r1, r3, #1
 8004990:	6179      	str	r1, [r7, #20]
 8004992:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	09db      	lsrs	r3, r3, #7
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80049a4:	d8f0      	bhi.n	8004988 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	617a      	str	r2, [r7, #20]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80049b6:	2218      	movs	r2, #24
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	68b8      	ldr	r0, [r7, #8]
 80049bc:	f7fe ffe2 	bl	8003984 <_SendPacket>
  RECORD_END();
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80049c6:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80049ce:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	4798      	blx	r3
  }
}
 80049d4:	bf00      	nop
 80049d6:	3730      	adds	r7, #48	@ 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20014378 	.word	0x20014378
 80049e0:	20014348 	.word	0x20014348

080049e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b092      	sub	sp, #72	@ 0x48
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80049ec:	f3ef 8311 	mrs	r3, BASEPRI
 80049f0:	f04f 0120 	mov.w	r1, #32
 80049f4:	f381 8811 	msr	BASEPRI, r1
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	486a      	ldr	r0, [pc, #424]	@ (8004ba4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80049fc:	f7fe fed6 	bl	80037ac <_PreparePacket>
 8004a00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b66      	ldr	r3, [pc, #408]	@ (8004ba8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a16:	e00b      	b.n	8004a30 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a1e:	1c59      	adds	r1, r3, #1
 8004a20:	6479      	str	r1, [r7, #68]	@ 0x44
 8004a22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a2c:	09db      	lsrs	r3, r3, #7
 8004a2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a32:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a34:	d8f0      	bhi.n	8004a18 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a50:	e00b      	b.n	8004a6a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a58:	1c59      	adds	r1, r3, #1
 8004a5a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004a5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]
 8004a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a66:	09db      	lsrs	r3, r3, #7
 8004a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a6e:	d8f0      	bhi.n	8004a52 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a7e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	4619      	mov	r1, r3
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7fe fe5f 	bl	800374c <_EncodeStr>
 8004a8e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004a90:	2209      	movs	r2, #9
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	6938      	ldr	r0, [r7, #16]
 8004a96:	f7fe ff75 	bl	8003984 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b40      	ldr	r3, [pc, #256]	@ (8004ba8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aae:	e00b      	b.n	8004ac8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab6:	1c59      	adds	r1, r3, #1
 8004ab8:	6379      	str	r1, [r7, #52]	@ 0x34
 8004aba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	09db      	lsrs	r3, r3, #7
 8004ac6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aca:	2b7f      	cmp	r3, #127	@ 0x7f
 8004acc:	d8f0      	bhi.n	8004ab0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	637a      	str	r2, [r7, #52]	@ 0x34
 8004ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004adc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae8:	e00b      	b.n	8004b02 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af0:	1c59      	adds	r1, r3, #1
 8004af2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004af4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
 8004afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afe:	09db      	lsrs	r3, r3, #7
 8004b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b04:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b06:	d8f0      	bhi.n	8004aea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	623b      	str	r3, [r7, #32]
 8004b22:	e00b      	b.n	8004b3c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	1c59      	adds	r1, r3, #1
 8004b2c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	09db      	lsrs	r3, r3, #7
 8004b3a:	623b      	str	r3, [r7, #32]
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b40:	d8f0      	bhi.n	8004b24 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b48:	6a3a      	ldr	r2, [r7, #32]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e00b      	b.n	8004b76 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	1c59      	adds	r1, r3, #1
 8004b66:	61f9      	str	r1, [r7, #28]
 8004b68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	09db      	lsrs	r3, r3, #7
 8004b74:	61bb      	str	r3, [r7, #24]
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b7a:	d8f0      	bhi.n	8004b5e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	61fa      	str	r2, [r7, #28]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004b8c:	2215      	movs	r2, #21
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	6938      	ldr	r0, [r7, #16]
 8004b92:	f7fe fef7 	bl	8003984 <_SendPacket>
  RECORD_END();
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f383 8811 	msr	BASEPRI, r3
}
 8004b9c:	bf00      	nop
 8004b9e:	3748      	adds	r7, #72	@ 0x48
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20014378 	.word	0x20014378
 8004ba8:	20014348 	.word	0x20014348

08004bac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004bb0:	4b07      	ldr	r3, [pc, #28]	@ (8004bd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004bc2:	4b03      	ldr	r3, [pc, #12]	@ (8004bd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4798      	blx	r3
  }
}
 8004bca:	bf00      	nop
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20014348 	.word	0x20014348

08004bd4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8004be0:	f04f 0120 	mov.w	r1, #32
 8004be4:	f381 8811 	msr	BASEPRI, r1
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	480b      	ldr	r0, [pc, #44]	@ (8004c18 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004bec:	f7fe fdde 	bl	80037ac <_PreparePacket>
 8004bf0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bf2:	2280      	movs	r2, #128	@ 0x80
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	6938      	ldr	r0, [r7, #16]
 8004bf8:	f7fe fda8 	bl	800374c <_EncodeStr>
 8004bfc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004bfe:	220e      	movs	r2, #14
 8004c00:	68f9      	ldr	r1, [r7, #12]
 8004c02:	6938      	ldr	r0, [r7, #16]
 8004c04:	f7fe febe 	bl	8003984 <_SendPacket>
  RECORD_END();
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f383 8811 	msr	BASEPRI, r3
}
 8004c0e:	bf00      	nop
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20014378 	.word	0x20014378

08004c1c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004c22:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01a      	beq.n	8004c60 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004c2a:	4b13      	ldr	r3, [pc, #76]	@ (8004c78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d015      	beq.n	8004c60 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004c34:	4b10      	ldr	r3, [pc, #64]	@ (8004c78 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4798      	blx	r3
 8004c3c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c40:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	000a      	movs	r2, r1
 8004c50:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c52:	4613      	mov	r3, r2
 8004c54:	461a      	mov	r2, r3
 8004c56:	4621      	mov	r1, r4
 8004c58:	200d      	movs	r0, #13
 8004c5a:	f7ff fbe7 	bl	800442c <SEGGER_SYSVIEW_RecordU32x2>
 8004c5e:	e006      	b.n	8004c6e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c60:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4619      	mov	r1, r3
 8004c66:	200c      	movs	r0, #12
 8004c68:	f7ff fba4 	bl	80043b4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd90      	pop	{r4, r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20014348 	.word	0x20014348
 8004c7c:	e0001004 	.word	0xe0001004

08004c80 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c86:	f3ef 8311 	mrs	r3, BASEPRI
 8004c8a:	f04f 0120 	mov.w	r1, #32
 8004c8e:	f381 8811 	msr	BASEPRI, r1
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	4819      	ldr	r0, [pc, #100]	@ (8004cfc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004c96:	f7fe fd89 	bl	80037ac <_PreparePacket>
 8004c9a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004ca0:	4b17      	ldr	r3, [pc, #92]	@ (8004d00 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	e00b      	b.n	8004ccc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	1c59      	adds	r1, r3, #1
 8004cbc:	6179      	str	r1, [r7, #20]
 8004cbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	09db      	lsrs	r3, r3, #7
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cd0:	d8f0      	bhi.n	8004cb4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	617a      	str	r2, [r7, #20]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	68b8      	ldr	r0, [r7, #8]
 8004ce8:	f7fe fe4c 	bl	8003984 <_SendPacket>
  RECORD_END();
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f383 8811 	msr	BASEPRI, r3
}
 8004cf2:	bf00      	nop
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20014378 	.word	0x20014378
 8004d00:	e000ed04 	.word	0xe000ed04

08004d04 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d0a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d0e:	f04f 0120 	mov.w	r1, #32
 8004d12:	f381 8811 	msr	BASEPRI, r1
 8004d16:	607b      	str	r3, [r7, #4]
 8004d18:	4807      	ldr	r0, [pc, #28]	@ (8004d38 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004d1a:	f7fe fd47 	bl	80037ac <_PreparePacket>
 8004d1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004d20:	2203      	movs	r2, #3
 8004d22:	6839      	ldr	r1, [r7, #0]
 8004d24:	6838      	ldr	r0, [r7, #0]
 8004d26:	f7fe fe2d 	bl	8003984 <_SendPacket>
  RECORD_END();
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f383 8811 	msr	BASEPRI, r3
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20014378 	.word	0x20014378

08004d3c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d42:	f3ef 8311 	mrs	r3, BASEPRI
 8004d46:	f04f 0120 	mov.w	r1, #32
 8004d4a:	f381 8811 	msr	BASEPRI, r1
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	4807      	ldr	r0, [pc, #28]	@ (8004d70 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d52:	f7fe fd2b 	bl	80037ac <_PreparePacket>
 8004d56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d58:	2212      	movs	r2, #18
 8004d5a:	6839      	ldr	r1, [r7, #0]
 8004d5c:	6838      	ldr	r0, [r7, #0]
 8004d5e:	f7fe fe11 	bl	8003984 <_SendPacket>
  RECORD_END();
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f383 8811 	msr	BASEPRI, r3
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20014378 	.word	0x20014378

08004d74 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d7e:	f04f 0120 	mov.w	r1, #32
 8004d82:	f381 8811 	msr	BASEPRI, r1
 8004d86:	607b      	str	r3, [r7, #4]
 8004d88:	4807      	ldr	r0, [pc, #28]	@ (8004da8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004d8a:	f7fe fd0f 	bl	80037ac <_PreparePacket>
 8004d8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004d90:	2211      	movs	r2, #17
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	6838      	ldr	r0, [r7, #0]
 8004d96:	f7fe fdf5 	bl	8003984 <_SendPacket>
  RECORD_END();
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f383 8811 	msr	BASEPRI, r3
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20014378 	.word	0x20014378

08004dac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004db4:	f3ef 8311 	mrs	r3, BASEPRI
 8004db8:	f04f 0120 	mov.w	r1, #32
 8004dbc:	f381 8811 	msr	BASEPRI, r1
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	4819      	ldr	r0, [pc, #100]	@ (8004e28 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004dc4:	f7fe fcf2 	bl	80037ac <_PreparePacket>
 8004dc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004dce:	4b17      	ldr	r3, [pc, #92]	@ (8004e2c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	e00b      	b.n	8004dfa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	1c59      	adds	r1, r3, #1
 8004dea:	61f9      	str	r1, [r7, #28]
 8004dec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	09db      	lsrs	r3, r3, #7
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dfe:	d8f0      	bhi.n	8004de2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	61fa      	str	r2, [r7, #28]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004e10:	2208      	movs	r2, #8
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	6938      	ldr	r0, [r7, #16]
 8004e16:	f7fe fdb5 	bl	8003984 <_SendPacket>
  RECORD_END();
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f383 8811 	msr	BASEPRI, r3
}
 8004e20:	bf00      	nop
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20014378 	.word	0x20014378
 8004e2c:	20014348 	.word	0x20014348

08004e30 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e38:	f3ef 8311 	mrs	r3, BASEPRI
 8004e3c:	f04f 0120 	mov.w	r1, #32
 8004e40:	f381 8811 	msr	BASEPRI, r1
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	4819      	ldr	r0, [pc, #100]	@ (8004eac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004e48:	f7fe fcb0 	bl	80037ac <_PreparePacket>
 8004e4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e52:	4b17      	ldr	r3, [pc, #92]	@ (8004eb0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	61bb      	str	r3, [r7, #24]
 8004e64:	e00b      	b.n	8004e7e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	1c59      	adds	r1, r3, #1
 8004e6e:	61f9      	str	r1, [r7, #28]
 8004e70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	09db      	lsrs	r3, r3, #7
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e82:	d8f0      	bhi.n	8004e66 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	61fa      	str	r2, [r7, #28]
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004e94:	2204      	movs	r2, #4
 8004e96:	68f9      	ldr	r1, [r7, #12]
 8004e98:	6938      	ldr	r0, [r7, #16]
 8004e9a:	f7fe fd73 	bl	8003984 <_SendPacket>
  RECORD_END();
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f383 8811 	msr	BASEPRI, r3
}
 8004ea4:	bf00      	nop
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20014378 	.word	0x20014378
 8004eb0:	20014348 	.word	0x20014348

08004eb4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec0:	f04f 0120 	mov.w	r1, #32
 8004ec4:	f381 8811 	msr	BASEPRI, r1
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	4819      	ldr	r0, [pc, #100]	@ (8004f30 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004ecc:	f7fe fc6e 	bl	80037ac <_PreparePacket>
 8004ed0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ed6:	4b17      	ldr	r3, [pc, #92]	@ (8004f34 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	61fb      	str	r3, [r7, #28]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	e00b      	b.n	8004f02 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	1c59      	adds	r1, r3, #1
 8004ef2:	61f9      	str	r1, [r7, #28]
 8004ef4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	09db      	lsrs	r3, r3, #7
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f06:	d8f0      	bhi.n	8004eea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	61fa      	str	r2, [r7, #28]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004f18:	2206      	movs	r2, #6
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	6938      	ldr	r0, [r7, #16]
 8004f1e:	f7fe fd31 	bl	8003984 <_SendPacket>
  RECORD_END();
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f383 8811 	msr	BASEPRI, r3
}
 8004f28:	bf00      	nop
 8004f2a:	3720      	adds	r7, #32
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20014378 	.word	0x20014378
 8004f34:	20014348 	.word	0x20014348

08004f38 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004f40:	4b04      	ldr	r3, [pc, #16]	@ (8004f54 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	1ad3      	subs	r3, r2, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	20014348 	.word	0x20014348

08004f58 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08c      	sub	sp, #48	@ 0x30
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004f62:	4b40      	ldr	r3, [pc, #256]	@ (8005064 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d077      	beq.n	800505a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8005064 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f70:	2300      	movs	r3, #0
 8004f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f74:	e008      	b.n	8004f88 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f84:	3301      	adds	r3, #1
 8004f86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d3f2      	bcc.n	8004f76 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004f90:	e000      	b.n	8004f94 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004f92:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d055      	beq.n	8005046 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f9e:	f04f 0120 	mov.w	r1, #32
 8004fa2:	f381 8811 	msr	BASEPRI, r1
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	482f      	ldr	r0, [pc, #188]	@ (8005068 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004faa:	f7fe fbff 	bl	80037ac <_PreparePacket>
 8004fae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	623b      	str	r3, [r7, #32]
 8004fbc:	e00b      	b.n	8004fd6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	1c59      	adds	r1, r3, #1
 8004fc6:	6279      	str	r1, [r7, #36]	@ 0x24
 8004fc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	09db      	lsrs	r3, r3, #7
 8004fd4:	623b      	str	r3, [r7, #32]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fda:	d8f0      	bhi.n	8004fbe <SEGGER_SYSVIEW_SendModule+0x66>
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fe2:	6a3a      	ldr	r2, [r7, #32]
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e00b      	b.n	8005010 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	1c59      	adds	r1, r3, #1
 8005000:	61f9      	str	r1, [r7, #28]
 8005002:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	09db      	lsrs	r3, r3, #7
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b7f      	cmp	r3, #127	@ 0x7f
 8005014:	d8f0      	bhi.n	8004ff8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	61fa      	str	r2, [r7, #28]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2280      	movs	r2, #128	@ 0x80
 800502c:	4619      	mov	r1, r3
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7fe fb8c 	bl	800374c <_EncodeStr>
 8005034:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005036:	2216      	movs	r2, #22
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	6938      	ldr	r0, [r7, #16]
 800503c:	f7fe fca2 	bl	8003984 <_SendPacket>
      RECORD_END();
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d006      	beq.n	800505a <SEGGER_SYSVIEW_SendModule+0x102>
 800504c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4798      	blx	r3
    }
  }
}
 800505a:	bf00      	nop
 800505c:	3730      	adds	r7, #48	@ 0x30
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20014370 	.word	0x20014370
 8005068:	20014378 	.word	0x20014378

0800506c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005072:	4b0c      	ldr	r3, [pc, #48]	@ (80050a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00f      	beq.n	800509a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800507a:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f2      	bne.n	8005080 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20014370 	.word	0x20014370

080050a8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80050ae:	f3ef 8311 	mrs	r3, BASEPRI
 80050b2:	f04f 0120 	mov.w	r1, #32
 80050b6:	f381 8811 	msr	BASEPRI, r1
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	4817      	ldr	r0, [pc, #92]	@ (800511c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80050be:	f7fe fb75 	bl	80037ac <_PreparePacket>
 80050c2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	4b14      	ldr	r3, [pc, #80]	@ (8005120 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	e00b      	b.n	80050ec <SEGGER_SYSVIEW_SendNumModules+0x44>
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	1c59      	adds	r1, r3, #1
 80050dc:	6179      	str	r1, [r7, #20]
 80050de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	09db      	lsrs	r3, r3, #7
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80050f0:	d8f0      	bhi.n	80050d4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	617a      	str	r2, [r7, #20]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005102:	221b      	movs	r2, #27
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	68b8      	ldr	r0, [r7, #8]
 8005108:	f7fe fc3c 	bl	8003984 <_SendPacket>
  RECORD_END();
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f383 8811 	msr	BASEPRI, r3
}
 8005112:	bf00      	nop
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20014378 	.word	0x20014378
 8005120:	20014374 	.word	0x20014374

08005124 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005124:	b40f      	push	{r0, r1, r2, r3}
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800512c:	f107 0314 	add.w	r3, r7, #20
 8005130:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005132:	1d3b      	adds	r3, r7, #4
 8005134:	461a      	mov	r2, r3
 8005136:	2100      	movs	r1, #0
 8005138:	6938      	ldr	r0, [r7, #16]
 800513a:	f7fe fea9 	bl	8003e90 <_VPrintTarget>
  va_end(ParamList);
}
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005148:	b004      	add	sp, #16
 800514a:	4770      	bx	lr

0800514c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	@ 0x28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005154:	f3ef 8311 	mrs	r3, BASEPRI
 8005158:	f04f 0120 	mov.w	r1, #32
 800515c:	f381 8811 	msr	BASEPRI, r1
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	4827      	ldr	r0, [pc, #156]	@ (8005200 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005164:	f7fe fb22 	bl	80037ac <_PreparePacket>
 8005168:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800516a:	2280      	movs	r2, #128	@ 0x80
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	6938      	ldr	r0, [r7, #16]
 8005170:	f7fe faec 	bl	800374c <_EncodeStr>
 8005174:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
 800517a:	2301      	movs	r3, #1
 800517c:	623b      	str	r3, [r7, #32]
 800517e:	e00b      	b.n	8005198 <SEGGER_SYSVIEW_Warn+0x4c>
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	1c59      	adds	r1, r3, #1
 8005188:	6279      	str	r1, [r7, #36]	@ 0x24
 800518a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	09db      	lsrs	r3, r3, #7
 8005196:	623b      	str	r3, [r7, #32]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2b7f      	cmp	r3, #127	@ 0x7f
 800519c:	d8f0      	bhi.n	8005180 <SEGGER_SYSVIEW_Warn+0x34>
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80051a4:	6a3a      	ldr	r2, [r7, #32]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	2300      	movs	r3, #0
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e00b      	b.n	80051d0 <SEGGER_SYSVIEW_Warn+0x84>
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	1c59      	adds	r1, r3, #1
 80051c0:	61f9      	str	r1, [r7, #28]
 80051c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	09db      	lsrs	r3, r3, #7
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80051d4:	d8f0      	bhi.n	80051b8 <SEGGER_SYSVIEW_Warn+0x6c>
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	61fa      	str	r2, [r7, #28]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80051e6:	221a      	movs	r2, #26
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	6938      	ldr	r0, [r7, #16]
 80051ec:	f7fe fbca 	bl	8003984 <_SendPacket>
  RECORD_END();
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f383 8811 	msr	BASEPRI, r3
}
 80051f6:	bf00      	nop
 80051f8:	3728      	adds	r7, #40	@ 0x28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20014378 	.word	0x20014378

08005204 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005208:	4b13      	ldr	r3, [pc, #76]	@ (8005258 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800520a:	7e1b      	ldrb	r3, [r3, #24]
 800520c:	4619      	mov	r1, r3
 800520e:	4a13      	ldr	r2, [pc, #76]	@ (800525c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005210:	460b      	mov	r3, r1
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	440b      	add	r3, r1
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	336c      	adds	r3, #108	@ 0x6c
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	4b0e      	ldr	r3, [pc, #56]	@ (8005258 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005220:	7e1b      	ldrb	r3, [r3, #24]
 8005222:	4618      	mov	r0, r3
 8005224:	490d      	ldr	r1, [pc, #52]	@ (800525c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005226:	4603      	mov	r3, r0
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4403      	add	r3, r0
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	440b      	add	r3, r1
 8005230:	3370      	adds	r3, #112	@ 0x70
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d00b      	beq.n	8005250 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005238:	4b07      	ldr	r3, [pc, #28]	@ (8005258 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800523a:	789b      	ldrb	r3, [r3, #2]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d107      	bne.n	8005250 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005240:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005242:	2201      	movs	r2, #1
 8005244:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005246:	f7fe fabd 	bl	80037c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800524a:	4b03      	ldr	r3, [pc, #12]	@ (8005258 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800524c:	2200      	movs	r2, #0
 800524e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005250:	4b01      	ldr	r3, [pc, #4]	@ (8005258 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005252:	781b      	ldrb	r3, [r3, #0]
}
 8005254:	4618      	mov	r0, r3
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20014348 	.word	0x20014348
 800525c:	20012e88 	.word	0x20012e88

08005260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	@ 0x28
 8005264:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005266:	f000 fb9d 	bl	80059a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800526a:	f000 f871 	bl	8005350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800526e:	f000 f8d9 	bl	8005424 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8005272:	482f      	ldr	r0, [pc, #188]	@ (8005330 <main+0xd0>)
 8005274:	f7fd fe20 	bl	8002eb8 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8005278:	4b2e      	ldr	r3, [pc, #184]	@ (8005334 <main+0xd4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a2d      	ldr	r2, [pc, #180]	@ (8005334 <main+0xd4>)
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8005284:	f7fd fc42 	bl	8002b0c <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8005288:	f107 030c 	add.w	r3, r7, #12
 800528c:	9301      	str	r3, [sp, #4]
 800528e:	2302      	movs	r3, #2
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	2300      	movs	r3, #0
 8005294:	22c8      	movs	r2, #200	@ 0xc8
 8005296:	4928      	ldr	r1, [pc, #160]	@ (8005338 <main+0xd8>)
 8005298:	4828      	ldr	r0, [pc, #160]	@ (800533c <main+0xdc>)
 800529a:	f7fb fd23 	bl	8000ce4 <xTaskCreate>
 800529e:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d00b      	beq.n	80052be <main+0x5e>
        __asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	61bb      	str	r3, [r7, #24]
    }
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	e7fd      	b.n	80052ba <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	2302      	movs	r3, #2
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	2300      	movs	r3, #0
 80052ca:	22c8      	movs	r2, #200	@ 0xc8
 80052cc:	491c      	ldr	r1, [pc, #112]	@ (8005340 <main+0xe0>)
 80052ce:	481d      	ldr	r0, [pc, #116]	@ (8005344 <main+0xe4>)
 80052d0:	f7fb fd08 	bl	8000ce4 <xTaskCreate>
 80052d4:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d00b      	beq.n	80052f4 <main+0x94>
        __asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	617b      	str	r3, [r7, #20]
    }
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
 80052f2:	e7fd      	b.n	80052f0 <main+0x90>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80052f4:	1d3b      	adds	r3, r7, #4
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	2302      	movs	r3, #2
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	2300      	movs	r3, #0
 80052fe:	22c8      	movs	r2, #200	@ 0xc8
 8005300:	4911      	ldr	r1, [pc, #68]	@ (8005348 <main+0xe8>)
 8005302:	4812      	ldr	r0, [pc, #72]	@ (800534c <main+0xec>)
 8005304:	f7fb fcee 	bl	8000ce4 <xTaskCreate>
 8005308:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d00b      	beq.n	8005328 <main+0xc8>
        __asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	613b      	str	r3, [r7, #16]
    }
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	e7fd      	b.n	8005324 <main+0xc4>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8005328:	f7fb fe66 	bl	8000ff8 <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800532c:	bf00      	nop
 800532e:	e7fd      	b.n	800532c <main+0xcc>
 8005330:	0007a120 	.word	0x0007a120
 8005334:	e0001000 	.word	0xe0001000
 8005338:	0800700c 	.word	0x0800700c
 800533c:	080056e1 	.word	0x080056e1
 8005340:	0800701c 	.word	0x0800701c
 8005344:	08005739 	.word	0x08005739
 8005348:	0800702c 	.word	0x0800702c
 800534c:	0800570d 	.word	0x0800570d

08005350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b094      	sub	sp, #80	@ 0x50
 8005354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005356:	f107 0320 	add.w	r3, r7, #32
 800535a:	2230      	movs	r2, #48	@ 0x30
 800535c:	2100      	movs	r1, #0
 800535e:	4618      	mov	r0, r3
 8005360:	f001 fda0 	bl	8006ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005364:	f107 030c 	add.w	r3, r7, #12
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005374:	2300      	movs	r3, #0
 8005376:	60bb      	str	r3, [r7, #8]
 8005378:	4b28      	ldr	r3, [pc, #160]	@ (800541c <SystemClock_Config+0xcc>)
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	4a27      	ldr	r2, [pc, #156]	@ (800541c <SystemClock_Config+0xcc>)
 800537e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005382:	6413      	str	r3, [r2, #64]	@ 0x40
 8005384:	4b25      	ldr	r3, [pc, #148]	@ (800541c <SystemClock_Config+0xcc>)
 8005386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005390:	2300      	movs	r3, #0
 8005392:	607b      	str	r3, [r7, #4]
 8005394:	4b22      	ldr	r3, [pc, #136]	@ (8005420 <SystemClock_Config+0xd0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a21      	ldr	r2, [pc, #132]	@ (8005420 <SystemClock_Config+0xd0>)
 800539a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005420 <SystemClock_Config+0xd0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053a8:	607b      	str	r3, [r7, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80053ac:	2302      	movs	r3, #2
 80053ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80053b0:	2301      	movs	r3, #1
 80053b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80053b4:	2310      	movs	r3, #16
 80053b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80053b8:	2302      	movs	r3, #2
 80053ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80053bc:	2300      	movs	r3, #0
 80053be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80053c0:	2308      	movs	r3, #8
 80053c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80053c4:	23a8      	movs	r3, #168	@ 0xa8
 80053c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053c8:	2302      	movs	r3, #2
 80053ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80053cc:	2307      	movs	r3, #7
 80053ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053d0:	f107 0320 	add.w	r3, r7, #32
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fdfd 	bl	8005fd4 <HAL_RCC_OscConfig>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80053e0:	f000 f9d2 	bl	8005788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053e4:	230f      	movs	r3, #15
 80053e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053e8:	2302      	movs	r3, #2
 80053ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80053f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80053f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80053f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80053fc:	f107 030c 	add.w	r3, r7, #12
 8005400:	2105      	movs	r1, #5
 8005402:	4618      	mov	r0, r3
 8005404:	f001 f85e 	bl	80064c4 <HAL_RCC_ClockConfig>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800540e:	f000 f9bb 	bl	8005788 <Error_Handler>
  }
}
 8005412:	bf00      	nop
 8005414:	3750      	adds	r7, #80	@ 0x50
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40023800 	.word	0x40023800
 8005420:	40007000 	.word	0x40007000

08005424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08c      	sub	sp, #48	@ 0x30
 8005428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800542a:	f107 031c 	add.w	r3, r7, #28
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	605a      	str	r2, [r3, #4]
 8005434:	609a      	str	r2, [r3, #8]
 8005436:	60da      	str	r2, [r3, #12]
 8005438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	4ba2      	ldr	r3, [pc, #648]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005442:	4aa1      	ldr	r2, [pc, #644]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 8005444:	f043 0310 	orr.w	r3, r3, #16
 8005448:	6313      	str	r3, [r2, #48]	@ 0x30
 800544a:	4b9f      	ldr	r3, [pc, #636]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	4b9b      	ldr	r3, [pc, #620]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545e:	4a9a      	ldr	r2, [pc, #616]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 8005460:	f043 0304 	orr.w	r3, r3, #4
 8005464:	6313      	str	r3, [r2, #48]	@ 0x30
 8005466:	4b98      	ldr	r3, [pc, #608]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	4b94      	ldr	r3, [pc, #592]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547a:	4a93      	ldr	r2, [pc, #588]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 800547c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005480:	6313      	str	r3, [r2, #48]	@ 0x30
 8005482:	4b91      	ldr	r3, [pc, #580]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	4b8d      	ldr	r3, [pc, #564]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	4a8c      	ldr	r2, [pc, #560]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	6313      	str	r3, [r2, #48]	@ 0x30
 800549e:	4b8a      	ldr	r3, [pc, #552]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 80054a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054aa:	2300      	movs	r3, #0
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	4b86      	ldr	r3, [pc, #536]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	4a85      	ldr	r2, [pc, #532]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80054ba:	4b83      	ldr	r3, [pc, #524]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054c6:	2300      	movs	r3, #0
 80054c8:	607b      	str	r3, [r7, #4]
 80054ca:	4b7f      	ldr	r3, [pc, #508]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	4a7e      	ldr	r2, [pc, #504]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 80054d0:	f043 0308 	orr.w	r3, r3, #8
 80054d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80054d6:	4b7c      	ldr	r3, [pc, #496]	@ (80056c8 <MX_GPIO_Init+0x2a4>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	607b      	str	r3, [r7, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80054e2:	2200      	movs	r2, #0
 80054e4:	2108      	movs	r1, #8
 80054e6:	4879      	ldr	r0, [pc, #484]	@ (80056cc <MX_GPIO_Init+0x2a8>)
 80054e8:	f000 fd40 	bl	8005f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80054ec:	2201      	movs	r2, #1
 80054ee:	2101      	movs	r1, #1
 80054f0:	4877      	ldr	r0, [pc, #476]	@ (80056d0 <MX_GPIO_Init+0x2ac>)
 80054f2:	f000 fd3b 	bl	8005f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80054f6:	2200      	movs	r2, #0
 80054f8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80054fc:	4875      	ldr	r0, [pc, #468]	@ (80056d4 <MX_GPIO_Init+0x2b0>)
 80054fe:	f000 fd35 	bl	8005f6c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8005502:	2308      	movs	r3, #8
 8005504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005506:	2301      	movs	r3, #1
 8005508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550a:	2300      	movs	r3, #0
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800550e:	2300      	movs	r3, #0
 8005510:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8005512:	f107 031c 	add.w	r3, r7, #28
 8005516:	4619      	mov	r1, r3
 8005518:	486c      	ldr	r0, [pc, #432]	@ (80056cc <MX_GPIO_Init+0x2a8>)
 800551a:	f000 fb8b 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800551e:	2301      	movs	r3, #1
 8005520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005522:	2301      	movs	r3, #1
 8005524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005526:	2300      	movs	r3, #0
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552a:	2300      	movs	r3, #0
 800552c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800552e:	f107 031c 	add.w	r3, r7, #28
 8005532:	4619      	mov	r1, r3
 8005534:	4866      	ldr	r0, [pc, #408]	@ (80056d0 <MX_GPIO_Init+0x2ac>)
 8005536:	f000 fb7d 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800553a:	2308      	movs	r3, #8
 800553c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800553e:	2302      	movs	r3, #2
 8005540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005542:	2300      	movs	r3, #0
 8005544:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005546:	2300      	movs	r3, #0
 8005548:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800554a:	2305      	movs	r3, #5
 800554c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800554e:	f107 031c 	add.w	r3, r7, #28
 8005552:	4619      	mov	r1, r3
 8005554:	485e      	ldr	r0, [pc, #376]	@ (80056d0 <MX_GPIO_Init+0x2ac>)
 8005556:	f000 fb6d 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800555a:	2301      	movs	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800555e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005564:	2300      	movs	r3, #0
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005568:	f107 031c 	add.w	r3, r7, #28
 800556c:	4619      	mov	r1, r3
 800556e:	485a      	ldr	r0, [pc, #360]	@ (80056d8 <MX_GPIO_Init+0x2b4>)
 8005570:	f000 fb60 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005574:	2310      	movs	r3, #16
 8005576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005578:	2302      	movs	r3, #2
 800557a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557c:	2300      	movs	r3, #0
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005580:	2300      	movs	r3, #0
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005584:	2306      	movs	r3, #6
 8005586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005588:	f107 031c 	add.w	r3, r7, #28
 800558c:	4619      	mov	r1, r3
 800558e:	4852      	ldr	r0, [pc, #328]	@ (80056d8 <MX_GPIO_Init+0x2b4>)
 8005590:	f000 fb50 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8005594:	23e0      	movs	r3, #224	@ 0xe0
 8005596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005598:	2302      	movs	r3, #2
 800559a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559c:	2300      	movs	r3, #0
 800559e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a0:	2300      	movs	r3, #0
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80055a4:	2305      	movs	r3, #5
 80055a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055a8:	f107 031c 	add.w	r3, r7, #28
 80055ac:	4619      	mov	r1, r3
 80055ae:	484a      	ldr	r0, [pc, #296]	@ (80056d8 <MX_GPIO_Init+0x2b4>)
 80055b0:	f000 fb40 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80055b4:	2304      	movs	r3, #4
 80055b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055b8:	2300      	movs	r3, #0
 80055ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80055c0:	f107 031c 	add.w	r3, r7, #28
 80055c4:	4619      	mov	r1, r3
 80055c6:	4845      	ldr	r0, [pc, #276]	@ (80056dc <MX_GPIO_Init+0x2b8>)
 80055c8:	f000 fb34 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80055cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d2:	2302      	movs	r3, #2
 80055d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055da:	2300      	movs	r3, #0
 80055dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80055de:	2305      	movs	r3, #5
 80055e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80055e2:	f107 031c 	add.w	r3, r7, #28
 80055e6:	4619      	mov	r1, r3
 80055e8:	483c      	ldr	r0, [pc, #240]	@ (80056dc <MX_GPIO_Init+0x2b8>)
 80055ea:	f000 fb23 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80055ee:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80055f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055f4:	2301      	movs	r3, #1
 80055f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fc:	2300      	movs	r3, #0
 80055fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005600:	f107 031c 	add.w	r3, r7, #28
 8005604:	4619      	mov	r1, r3
 8005606:	4833      	ldr	r0, [pc, #204]	@ (80056d4 <MX_GPIO_Init+0x2b0>)
 8005608:	f000 fb14 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800560c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8005610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005612:	2302      	movs	r3, #2
 8005614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005616:	2300      	movs	r3, #0
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800561a:	2300      	movs	r3, #0
 800561c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800561e:	2306      	movs	r3, #6
 8005620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005622:	f107 031c 	add.w	r3, r7, #28
 8005626:	4619      	mov	r1, r3
 8005628:	4829      	ldr	r0, [pc, #164]	@ (80056d0 <MX_GPIO_Init+0x2ac>)
 800562a:	f000 fb03 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800562e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005634:	2300      	movs	r3, #0
 8005636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005638:	2300      	movs	r3, #0
 800563a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800563c:	f107 031c 	add.w	r3, r7, #28
 8005640:	4619      	mov	r1, r3
 8005642:	4825      	ldr	r0, [pc, #148]	@ (80056d8 <MX_GPIO_Init+0x2b4>)
 8005644:	f000 faf6 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005648:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800564c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564e:	2302      	movs	r3, #2
 8005650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005652:	2300      	movs	r3, #0
 8005654:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005656:	2300      	movs	r3, #0
 8005658:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800565a:	230a      	movs	r3, #10
 800565c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800565e:	f107 031c 	add.w	r3, r7, #28
 8005662:	4619      	mov	r1, r3
 8005664:	481c      	ldr	r0, [pc, #112]	@ (80056d8 <MX_GPIO_Init+0x2b4>)
 8005666:	f000 fae5 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800566a:	2320      	movs	r3, #32
 800566c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800566e:	2300      	movs	r3, #0
 8005670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005672:	2300      	movs	r3, #0
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005676:	f107 031c 	add.w	r3, r7, #28
 800567a:	4619      	mov	r1, r3
 800567c:	4815      	ldr	r0, [pc, #84]	@ (80056d4 <MX_GPIO_Init+0x2b0>)
 800567e:	f000 fad9 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8005682:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8005686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005688:	2312      	movs	r3, #18
 800568a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800568c:	2301      	movs	r3, #1
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005690:	2300      	movs	r3, #0
 8005692:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005694:	2304      	movs	r3, #4
 8005696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005698:	f107 031c 	add.w	r3, r7, #28
 800569c:	4619      	mov	r1, r3
 800569e:	480f      	ldr	r0, [pc, #60]	@ (80056dc <MX_GPIO_Init+0x2b8>)
 80056a0:	f000 fac8 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80056a4:	2302      	movs	r3, #2
 80056a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80056a8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80056ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80056b2:	f107 031c 	add.w	r3, r7, #28
 80056b6:	4619      	mov	r1, r3
 80056b8:	4804      	ldr	r0, [pc, #16]	@ (80056cc <MX_GPIO_Init+0x2a8>)
 80056ba:	f000 fabb 	bl	8005c34 <HAL_GPIO_Init>

}
 80056be:	bf00      	nop
 80056c0:	3730      	adds	r7, #48	@ 0x30
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	40021000 	.word	0x40021000
 80056d0:	40020800 	.word	0x40020800
 80056d4:	40020c00 	.word	0x40020c00
 80056d8:	40020000 	.word	0x40020000
 80056dc:	40020400 	.word	0x40020400

080056e0 <led_green_handler>:

/* USER CODE BEGIN 4 */

static void led_green_handler(void* parameters)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80056e8:	4806      	ldr	r0, [pc, #24]	@ (8005704 <led_green_handler+0x24>)
 80056ea:	f7ff fd1b 	bl	8005124 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80056ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80056f2:	4805      	ldr	r0, [pc, #20]	@ (8005708 <led_green_handler+0x28>)
 80056f4:	f000 fc53 	bl	8005f9e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80056f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80056fc:	f000 f994 	bl	8005a28 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8005700:	bf00      	nop
 8005702:	e7f1      	b.n	80056e8 <led_green_handler+0x8>
 8005704:	0800703c 	.word	0x0800703c
 8005708:	40020c00 	.word	0x40020c00

0800570c <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8005714:	4806      	ldr	r0, [pc, #24]	@ (8005730 <led_orange_handler+0x24>)
 8005716:	f7ff fd05 	bl	8005124 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 800571a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800571e:	4805      	ldr	r0, [pc, #20]	@ (8005734 <led_orange_handler+0x28>)
 8005720:	f000 fc3d 	bl	8005f9e <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8005724:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8005728:	f000 f97e 	bl	8005a28 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800572c:	bf00      	nop
 800572e:	e7f1      	b.n	8005714 <led_orange_handler+0x8>
 8005730:	08007050 	.word	0x08007050
 8005734:	40020c00 	.word	0x40020c00

08005738 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8005740:	4806      	ldr	r0, [pc, #24]	@ (800575c <led_red_handler+0x24>)
 8005742:	f7ff fcef 	bl	8005124 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8005746:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800574a:	4805      	ldr	r0, [pc, #20]	@ (8005760 <led_red_handler+0x28>)
 800574c:	f000 fc27 	bl	8005f9e <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8005750:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8005754:	f000 f968 	bl	8005a28 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8005758:	bf00      	nop
 800575a:	e7f1      	b.n	8005740 <led_red_handler+0x8>
 800575c:	08007064 	.word	0x08007064
 8005760:	40020c00 	.word	0x40020c00

08005764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a04      	ldr	r2, [pc, #16]	@ (8005784 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d101      	bne.n	800577a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005776:	f000 f937 	bl	80059e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40001000 	.word	0x40001000

08005788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800578c:	bf00      	nop
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800579e:	2300      	movs	r3, #0
 80057a0:	607b      	str	r3, [r7, #4]
 80057a2:	4b10      	ldr	r3, [pc, #64]	@ (80057e4 <HAL_MspInit+0x4c>)
 80057a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a6:	4a0f      	ldr	r2, [pc, #60]	@ (80057e4 <HAL_MspInit+0x4c>)
 80057a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80057ae:	4b0d      	ldr	r3, [pc, #52]	@ (80057e4 <HAL_MspInit+0x4c>)
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057b6:	607b      	str	r3, [r7, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057ba:	2300      	movs	r3, #0
 80057bc:	603b      	str	r3, [r7, #0]
 80057be:	4b09      	ldr	r3, [pc, #36]	@ (80057e4 <HAL_MspInit+0x4c>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c2:	4a08      	ldr	r2, [pc, #32]	@ (80057e4 <HAL_MspInit+0x4c>)
 80057c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80057ca:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <HAL_MspInit+0x4c>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 80057d6:	f7fc fe09 	bl	80023ec <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 80057da:	bf00      	nop
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800

080057e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08e      	sub	sp, #56	@ 0x38
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	4b33      	ldr	r3, [pc, #204]	@ (80058cc <HAL_InitTick+0xe4>)
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	4a32      	ldr	r2, [pc, #200]	@ (80058cc <HAL_InitTick+0xe4>)
 8005802:	f043 0310 	orr.w	r3, r3, #16
 8005806:	6413      	str	r3, [r2, #64]	@ 0x40
 8005808:	4b30      	ldr	r3, [pc, #192]	@ (80058cc <HAL_InitTick+0xe4>)
 800580a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005814:	f107 0210 	add.w	r2, r7, #16
 8005818:	f107 0314 	add.w	r3, r7, #20
 800581c:	4611      	mov	r1, r2
 800581e:	4618      	mov	r0, r3
 8005820:	f001 f85c 	bl	80068dc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d103      	bne.n	8005836 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800582e:	f001 f841 	bl	80068b4 <HAL_RCC_GetPCLK1Freq>
 8005832:	6378      	str	r0, [r7, #52]	@ 0x34
 8005834:	e004      	b.n	8005840 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005836:	f001 f83d 	bl	80068b4 <HAL_RCC_GetPCLK1Freq>
 800583a:	4603      	mov	r3, r0
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005842:	4a23      	ldr	r2, [pc, #140]	@ (80058d0 <HAL_InitTick+0xe8>)
 8005844:	fba2 2303 	umull	r2, r3, r2, r3
 8005848:	0c9b      	lsrs	r3, r3, #18
 800584a:	3b01      	subs	r3, #1
 800584c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800584e:	4b21      	ldr	r3, [pc, #132]	@ (80058d4 <HAL_InitTick+0xec>)
 8005850:	4a21      	ldr	r2, [pc, #132]	@ (80058d8 <HAL_InitTick+0xf0>)
 8005852:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005854:	4b1f      	ldr	r3, [pc, #124]	@ (80058d4 <HAL_InitTick+0xec>)
 8005856:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800585a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800585c:	4a1d      	ldr	r2, [pc, #116]	@ (80058d4 <HAL_InitTick+0xec>)
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005862:	4b1c      	ldr	r3, [pc, #112]	@ (80058d4 <HAL_InitTick+0xec>)
 8005864:	2200      	movs	r2, #0
 8005866:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005868:	4b1a      	ldr	r3, [pc, #104]	@ (80058d4 <HAL_InitTick+0xec>)
 800586a:	2200      	movs	r2, #0
 800586c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800586e:	4b19      	ldr	r3, [pc, #100]	@ (80058d4 <HAL_InitTick+0xec>)
 8005870:	2200      	movs	r2, #0
 8005872:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005874:	4817      	ldr	r0, [pc, #92]	@ (80058d4 <HAL_InitTick+0xec>)
 8005876:	f001 f863 	bl	8006940 <HAL_TIM_Base_Init>
 800587a:	4603      	mov	r3, r0
 800587c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005880:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005884:	2b00      	cmp	r3, #0
 8005886:	d11b      	bne.n	80058c0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005888:	4812      	ldr	r0, [pc, #72]	@ (80058d4 <HAL_InitTick+0xec>)
 800588a:	f001 f8b3 	bl	80069f4 <HAL_TIM_Base_Start_IT>
 800588e:	4603      	mov	r3, r0
 8005890:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005894:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005898:	2b00      	cmp	r3, #0
 800589a:	d111      	bne.n	80058c0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800589c:	2036      	movs	r0, #54	@ 0x36
 800589e:	f000 f9bb 	bl	8005c18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b0f      	cmp	r3, #15
 80058a6:	d808      	bhi.n	80058ba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80058a8:	2200      	movs	r2, #0
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	2036      	movs	r0, #54	@ 0x36
 80058ae:	f000 f997 	bl	8005be0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80058b2:	4a0a      	ldr	r2, [pc, #40]	@ (80058dc <HAL_InitTick+0xf4>)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	e002      	b.n	80058c0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80058c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3738      	adds	r7, #56	@ 0x38
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40023800 	.word	0x40023800
 80058d0:	431bde83 	.word	0x431bde83
 80058d4:	2001445c 	.word	0x2001445c
 80058d8:	40001000 	.word	0x40001000
 80058dc:	20000014 	.word	0x20000014

080058e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <NMI_Handler+0x4>

080058e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058ec:	bf00      	nop
 80058ee:	e7fd      	b.n	80058ec <HardFault_Handler+0x4>

080058f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058f4:	bf00      	nop
 80058f6:	e7fd      	b.n	80058f4 <MemManage_Handler+0x4>

080058f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <BusFault_Handler+0x4>

08005900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <UsageFault_Handler+0x4>

08005908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800590c:	bf00      	nop
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800591c:	4802      	ldr	r0, [pc, #8]	@ (8005928 <TIM6_DAC_IRQHandler+0x10>)
 800591e:	f001 f8d9 	bl	8006ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005922:	bf00      	nop
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	2001445c 	.word	0x2001445c

0800592c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005930:	4b06      	ldr	r3, [pc, #24]	@ (800594c <SystemInit+0x20>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005936:	4a05      	ldr	r2, [pc, #20]	@ (800594c <SystemInit+0x20>)
 8005938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800593c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005940:	bf00      	nop
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	e000ed00 	.word	0xe000ed00

08005950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005950:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005988 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005954:	f7ff ffea 	bl	800592c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005958:	480c      	ldr	r0, [pc, #48]	@ (800598c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800595a:	490d      	ldr	r1, [pc, #52]	@ (8005990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800595c:	4a0d      	ldr	r2, [pc, #52]	@ (8005994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800595e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005960:	e002      	b.n	8005968 <LoopCopyDataInit>

08005962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005966:	3304      	adds	r3, #4

08005968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800596a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800596c:	d3f9      	bcc.n	8005962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800596e:	4a0a      	ldr	r2, [pc, #40]	@ (8005998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005970:	4c0a      	ldr	r4, [pc, #40]	@ (800599c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005974:	e001      	b.n	800597a <LoopFillZerobss>

08005976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005978:	3204      	adds	r2, #4

0800597a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800597a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800597c:	d3fb      	bcc.n	8005976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800597e:	f001 fa99 	bl	8006eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005982:	f7ff fc6d 	bl	8005260 <main>
  bx  lr    
 8005986:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800598c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005990:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8005994:	080070dc 	.word	0x080070dc
  ldr r2, =_sbss
 8005998:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800599c:	200144a8 	.word	0x200144a8

080059a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059a0:	e7fe      	b.n	80059a0 <ADC_IRQHandler>
	...

080059a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80059a8:	4b0e      	ldr	r3, [pc, #56]	@ (80059e4 <HAL_Init+0x40>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a0d      	ldr	r2, [pc, #52]	@ (80059e4 <HAL_Init+0x40>)
 80059ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80059b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80059b4:	4b0b      	ldr	r3, [pc, #44]	@ (80059e4 <HAL_Init+0x40>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a0a      	ldr	r2, [pc, #40]	@ (80059e4 <HAL_Init+0x40>)
 80059ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059c0:	4b08      	ldr	r3, [pc, #32]	@ (80059e4 <HAL_Init+0x40>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a07      	ldr	r2, [pc, #28]	@ (80059e4 <HAL_Init+0x40>)
 80059c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059cc:	2003      	movs	r0, #3
 80059ce:	f000 f8fc 	bl	8005bca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059d2:	2000      	movs	r0, #0
 80059d4:	f7ff ff08 	bl	80057e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80059d8:	f7ff fede 	bl	8005798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40023c00 	.word	0x40023c00

080059e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059ec:	4b06      	ldr	r3, [pc, #24]	@ (8005a08 <HAL_IncTick+0x20>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	4b06      	ldr	r3, [pc, #24]	@ (8005a0c <HAL_IncTick+0x24>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4413      	add	r3, r2
 80059f8:	4a04      	ldr	r2, [pc, #16]	@ (8005a0c <HAL_IncTick+0x24>)
 80059fa:	6013      	str	r3, [r2, #0]
}
 80059fc:	bf00      	nop
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000018 	.word	0x20000018
 8005a0c:	200144a4 	.word	0x200144a4

08005a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return uwTick;
 8005a14:	4b03      	ldr	r3, [pc, #12]	@ (8005a24 <HAL_GetTick+0x14>)
 8005a16:	681b      	ldr	r3, [r3, #0]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	200144a4 	.word	0x200144a4

08005a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a30:	f7ff ffee 	bl	8005a10 <HAL_GetTick>
 8005a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d005      	beq.n	8005a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a42:	4b0a      	ldr	r3, [pc, #40]	@ (8005a6c <HAL_Delay+0x44>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a4e:	bf00      	nop
 8005a50:	f7ff ffde 	bl	8005a10 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d8f7      	bhi.n	8005a50 <HAL_Delay+0x28>
  {
  }
}
 8005a60:	bf00      	nop
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000018 	.word	0x20000018

08005a70 <__NVIC_SetPriorityGrouping>:
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a80:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aa2:	4a04      	ldr	r2, [pc, #16]	@ (8005ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	60d3      	str	r3, [r2, #12]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	e000ed00 	.word	0xe000ed00

08005ab8 <__NVIC_GetPriorityGrouping>:
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005abc:	4b04      	ldr	r3, [pc, #16]	@ (8005ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	f003 0307 	and.w	r3, r3, #7
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	e000ed00 	.word	0xe000ed00

08005ad4 <__NVIC_EnableIRQ>:
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	db0b      	blt.n	8005afe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	f003 021f 	and.w	r2, r3, #31
 8005aec:	4907      	ldr	r1, [pc, #28]	@ (8005b0c <__NVIC_EnableIRQ+0x38>)
 8005aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	2001      	movs	r0, #1
 8005af6:	fa00 f202 	lsl.w	r2, r0, r2
 8005afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	e000e100 	.word	0xe000e100

08005b10 <__NVIC_SetPriority>:
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	6039      	str	r1, [r7, #0]
 8005b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	db0a      	blt.n	8005b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	490c      	ldr	r1, [pc, #48]	@ (8005b5c <__NVIC_SetPriority+0x4c>)
 8005b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2e:	0112      	lsls	r2, r2, #4
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	440b      	add	r3, r1
 8005b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b38:	e00a      	b.n	8005b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	4908      	ldr	r1, [pc, #32]	@ (8005b60 <__NVIC_SetPriority+0x50>)
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	3b04      	subs	r3, #4
 8005b48:	0112      	lsls	r2, r2, #4
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	761a      	strb	r2, [r3, #24]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	e000e100 	.word	0xe000e100
 8005b60:	e000ed00 	.word	0xe000ed00

08005b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b089      	sub	sp, #36	@ 0x24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f1c3 0307 	rsb	r3, r3, #7
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	bf28      	it	cs
 8005b82:	2304      	movcs	r3, #4
 8005b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	2b06      	cmp	r3, #6
 8005b8c:	d902      	bls.n	8005b94 <NVIC_EncodePriority+0x30>
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	3b03      	subs	r3, #3
 8005b92:	e000      	b.n	8005b96 <NVIC_EncodePriority+0x32>
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b98:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	43da      	mvns	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bac:	f04f 31ff 	mov.w	r1, #4294967295
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb6:	43d9      	mvns	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bbc:	4313      	orrs	r3, r2
         );
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3724      	adds	r7, #36	@ 0x24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff ff4c 	bl	8005a70 <__NVIC_SetPriorityGrouping>
}
 8005bd8:	bf00      	nop
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bf2:	f7ff ff61 	bl	8005ab8 <__NVIC_GetPriorityGrouping>
 8005bf6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	6978      	ldr	r0, [r7, #20]
 8005bfe:	f7ff ffb1 	bl	8005b64 <NVIC_EncodePriority>
 8005c02:	4602      	mov	r2, r0
 8005c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff ff80 	bl	8005b10 <__NVIC_SetPriority>
}
 8005c10:	bf00      	nop
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff ff54 	bl	8005ad4 <__NVIC_EnableIRQ>
}
 8005c2c:	bf00      	nop
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b089      	sub	sp, #36	@ 0x24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	e16b      	b.n	8005f28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c50:	2201      	movs	r2, #1
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	fa02 f303 	lsl.w	r3, r2, r3
 8005c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4013      	ands	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	f040 815a 	bne.w	8005f22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d005      	beq.n	8005c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d130      	bne.n	8005ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	2203      	movs	r2, #3
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	43db      	mvns	r3, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 0201 	and.w	r2, r3, #1
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d017      	beq.n	8005d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	2203      	movs	r2, #3
 8005d00:	fa02 f303 	lsl.w	r3, r2, r3
 8005d04:	43db      	mvns	r3, r3
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d123      	bne.n	8005d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	08da      	lsrs	r2, r3, #3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3208      	adds	r2, #8
 8005d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	220f      	movs	r2, #15
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4013      	ands	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	08da      	lsrs	r2, r3, #3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3208      	adds	r2, #8
 8005d72:	69b9      	ldr	r1, [r7, #24]
 8005d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	2203      	movs	r2, #3
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 0203 	and.w	r2, r3, #3
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 80b4 	beq.w	8005f22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	4b60      	ldr	r3, [pc, #384]	@ (8005f40 <HAL_GPIO_Init+0x30c>)
 8005dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc2:	4a5f      	ldr	r2, [pc, #380]	@ (8005f40 <HAL_GPIO_Init+0x30c>)
 8005dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005dca:	4b5d      	ldr	r3, [pc, #372]	@ (8005f40 <HAL_GPIO_Init+0x30c>)
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8005f44 <HAL_GPIO_Init+0x310>)
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	089b      	lsrs	r3, r3, #2
 8005ddc:	3302      	adds	r3, #2
 8005dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	220f      	movs	r2, #15
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4013      	ands	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a52      	ldr	r2, [pc, #328]	@ (8005f48 <HAL_GPIO_Init+0x314>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d02b      	beq.n	8005e5a <HAL_GPIO_Init+0x226>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a51      	ldr	r2, [pc, #324]	@ (8005f4c <HAL_GPIO_Init+0x318>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d025      	beq.n	8005e56 <HAL_GPIO_Init+0x222>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a50      	ldr	r2, [pc, #320]	@ (8005f50 <HAL_GPIO_Init+0x31c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01f      	beq.n	8005e52 <HAL_GPIO_Init+0x21e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a4f      	ldr	r2, [pc, #316]	@ (8005f54 <HAL_GPIO_Init+0x320>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d019      	beq.n	8005e4e <HAL_GPIO_Init+0x21a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a4e      	ldr	r2, [pc, #312]	@ (8005f58 <HAL_GPIO_Init+0x324>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_GPIO_Init+0x216>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a4d      	ldr	r2, [pc, #308]	@ (8005f5c <HAL_GPIO_Init+0x328>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00d      	beq.n	8005e46 <HAL_GPIO_Init+0x212>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8005f60 <HAL_GPIO_Init+0x32c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d007      	beq.n	8005e42 <HAL_GPIO_Init+0x20e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a4b      	ldr	r2, [pc, #300]	@ (8005f64 <HAL_GPIO_Init+0x330>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d101      	bne.n	8005e3e <HAL_GPIO_Init+0x20a>
 8005e3a:	2307      	movs	r3, #7
 8005e3c:	e00e      	b.n	8005e5c <HAL_GPIO_Init+0x228>
 8005e3e:	2308      	movs	r3, #8
 8005e40:	e00c      	b.n	8005e5c <HAL_GPIO_Init+0x228>
 8005e42:	2306      	movs	r3, #6
 8005e44:	e00a      	b.n	8005e5c <HAL_GPIO_Init+0x228>
 8005e46:	2305      	movs	r3, #5
 8005e48:	e008      	b.n	8005e5c <HAL_GPIO_Init+0x228>
 8005e4a:	2304      	movs	r3, #4
 8005e4c:	e006      	b.n	8005e5c <HAL_GPIO_Init+0x228>
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e004      	b.n	8005e5c <HAL_GPIO_Init+0x228>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e002      	b.n	8005e5c <HAL_GPIO_Init+0x228>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <HAL_GPIO_Init+0x228>
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	f002 0203 	and.w	r2, r2, #3
 8005e62:	0092      	lsls	r2, r2, #2
 8005e64:	4093      	lsls	r3, r2
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e6c:	4935      	ldr	r1, [pc, #212]	@ (8005f44 <HAL_GPIO_Init+0x310>)
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	089b      	lsrs	r3, r3, #2
 8005e72:	3302      	adds	r3, #2
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f68 <HAL_GPIO_Init+0x334>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	43db      	mvns	r3, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4013      	ands	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e9e:	4a32      	ldr	r2, [pc, #200]	@ (8005f68 <HAL_GPIO_Init+0x334>)
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ea4:	4b30      	ldr	r3, [pc, #192]	@ (8005f68 <HAL_GPIO_Init+0x334>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	43db      	mvns	r3, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ec8:	4a27      	ldr	r2, [pc, #156]	@ (8005f68 <HAL_GPIO_Init+0x334>)
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ece:	4b26      	ldr	r3, [pc, #152]	@ (8005f68 <HAL_GPIO_Init+0x334>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	43db      	mvns	r3, r3
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4013      	ands	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8005f68 <HAL_GPIO_Init+0x334>)
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f68 <HAL_GPIO_Init+0x334>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4013      	ands	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f1c:	4a12      	ldr	r2, [pc, #72]	@ (8005f68 <HAL_GPIO_Init+0x334>)
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	3301      	adds	r3, #1
 8005f26:	61fb      	str	r3, [r7, #28]
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b0f      	cmp	r3, #15
 8005f2c:	f67f ae90 	bls.w	8005c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	3724      	adds	r7, #36	@ 0x24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40023800 	.word	0x40023800
 8005f44:	40013800 	.word	0x40013800
 8005f48:	40020000 	.word	0x40020000
 8005f4c:	40020400 	.word	0x40020400
 8005f50:	40020800 	.word	0x40020800
 8005f54:	40020c00 	.word	0x40020c00
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	40021400 	.word	0x40021400
 8005f60:	40021800 	.word	0x40021800
 8005f64:	40021c00 	.word	0x40021c00
 8005f68:	40013c00 	.word	0x40013c00

08005f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	807b      	strh	r3, [r7, #2]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f7c:	787b      	ldrb	r3, [r7, #1]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f82:	887a      	ldrh	r2, [r7, #2]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f88:	e003      	b.n	8005f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f8a:	887b      	ldrh	r3, [r7, #2]
 8005f8c:	041a      	lsls	r2, r3, #16
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	619a      	str	r2, [r3, #24]
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005fb0:	887a      	ldrh	r2, [r7, #2]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	041a      	lsls	r2, r3, #16
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	43d9      	mvns	r1, r3
 8005fbc:	887b      	ldrh	r3, [r7, #2]
 8005fbe:	400b      	ands	r3, r1
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	619a      	str	r2, [r3, #24]
}
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e267      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d075      	beq.n	80060de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ff2:	4b88      	ldr	r3, [pc, #544]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 030c 	and.w	r3, r3, #12
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d00c      	beq.n	8006018 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ffe:	4b85      	ldr	r3, [pc, #532]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006006:	2b08      	cmp	r3, #8
 8006008:	d112      	bne.n	8006030 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800600a:	4b82      	ldr	r3, [pc, #520]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006016:	d10b      	bne.n	8006030 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006018:	4b7e      	ldr	r3, [pc, #504]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d05b      	beq.n	80060dc <HAL_RCC_OscConfig+0x108>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d157      	bne.n	80060dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e242      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006038:	d106      	bne.n	8006048 <HAL_RCC_OscConfig+0x74>
 800603a:	4b76      	ldr	r3, [pc, #472]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a75      	ldr	r2, [pc, #468]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e01d      	b.n	8006084 <HAL_RCC_OscConfig+0xb0>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006050:	d10c      	bne.n	800606c <HAL_RCC_OscConfig+0x98>
 8006052:	4b70      	ldr	r3, [pc, #448]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a6f      	ldr	r2, [pc, #444]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	4b6d      	ldr	r3, [pc, #436]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a6c      	ldr	r2, [pc, #432]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e00b      	b.n	8006084 <HAL_RCC_OscConfig+0xb0>
 800606c:	4b69      	ldr	r3, [pc, #420]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a68      	ldr	r2, [pc, #416]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	4b66      	ldr	r3, [pc, #408]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a65      	ldr	r2, [pc, #404]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 800607e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d013      	beq.n	80060b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608c:	f7ff fcc0 	bl	8005a10 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006094:	f7ff fcbc 	bl	8005a10 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b64      	cmp	r3, #100	@ 0x64
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e207      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a6:	4b5b      	ldr	r3, [pc, #364]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCC_OscConfig+0xc0>
 80060b2:	e014      	b.n	80060de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7ff fcac 	bl	8005a10 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060bc:	f7ff fca8 	bl	8005a10 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b64      	cmp	r3, #100	@ 0x64
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e1f3      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ce:	4b51      	ldr	r3, [pc, #324]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0xe8>
 80060da:	e000      	b.n	80060de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d063      	beq.n	80061b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 030c 	and.w	r3, r3, #12
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00b      	beq.n	800610e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060f6:	4b47      	ldr	r3, [pc, #284]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d11c      	bne.n	800613c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006102:	4b44      	ldr	r3, [pc, #272]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d116      	bne.n	800613c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800610e:	4b41      	ldr	r3, [pc, #260]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_RCC_OscConfig+0x152>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d001      	beq.n	8006126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e1c7      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006126:	4b3b      	ldr	r3, [pc, #236]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	4937      	ldr	r1, [pc, #220]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006136:	4313      	orrs	r3, r2
 8006138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800613a:	e03a      	b.n	80061b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d020      	beq.n	8006186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006144:	4b34      	ldr	r3, [pc, #208]	@ (8006218 <HAL_RCC_OscConfig+0x244>)
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614a:	f7ff fc61 	bl	8005a10 <HAL_GetTick>
 800614e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006150:	e008      	b.n	8006164 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006152:	f7ff fc5d 	bl	8005a10 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e1a8      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006164:	4b2b      	ldr	r3, [pc, #172]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0f0      	beq.n	8006152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006170:	4b28      	ldr	r3, [pc, #160]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	4925      	ldr	r1, [pc, #148]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 8006180:	4313      	orrs	r3, r2
 8006182:	600b      	str	r3, [r1, #0]
 8006184:	e015      	b.n	80061b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006186:	4b24      	ldr	r3, [pc, #144]	@ (8006218 <HAL_RCC_OscConfig+0x244>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618c:	f7ff fc40 	bl	8005a10 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006194:	f7ff fc3c 	bl	8005a10 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e187      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d036      	beq.n	800622c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c6:	4b15      	ldr	r3, [pc, #84]	@ (800621c <HAL_RCC_OscConfig+0x248>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061cc:	f7ff fc20 	bl	8005a10 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061d4:	f7ff fc1c 	bl	8005a10 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e167      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <HAL_RCC_OscConfig+0x240>)
 80061e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x200>
 80061f2:	e01b      	b.n	800622c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f4:	4b09      	ldr	r3, [pc, #36]	@ (800621c <HAL_RCC_OscConfig+0x248>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fa:	f7ff fc09 	bl	8005a10 <HAL_GetTick>
 80061fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006200:	e00e      	b.n	8006220 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006202:	f7ff fc05 	bl	8005a10 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d907      	bls.n	8006220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e150      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
 8006214:	40023800 	.word	0x40023800
 8006218:	42470000 	.word	0x42470000
 800621c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006220:	4b88      	ldr	r3, [pc, #544]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 8006222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1ea      	bne.n	8006202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 8097 	beq.w	8006368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800623a:	2300      	movs	r3, #0
 800623c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800623e:	4b81      	ldr	r3, [pc, #516]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 8006240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10f      	bne.n	800626a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800624a:	2300      	movs	r3, #0
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	4b7d      	ldr	r3, [pc, #500]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006252:	4a7c      	ldr	r2, [pc, #496]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 8006254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006258:	6413      	str	r3, [r2, #64]	@ 0x40
 800625a:	4b7a      	ldr	r3, [pc, #488]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006262:	60bb      	str	r3, [r7, #8]
 8006264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006266:	2301      	movs	r3, #1
 8006268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800626a:	4b77      	ldr	r3, [pc, #476]	@ (8006448 <HAL_RCC_OscConfig+0x474>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d118      	bne.n	80062a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006276:	4b74      	ldr	r3, [pc, #464]	@ (8006448 <HAL_RCC_OscConfig+0x474>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a73      	ldr	r2, [pc, #460]	@ (8006448 <HAL_RCC_OscConfig+0x474>)
 800627c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006282:	f7ff fbc5 	bl	8005a10 <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800628a:	f7ff fbc1 	bl	8005a10 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e10c      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800629c:	4b6a      	ldr	r3, [pc, #424]	@ (8006448 <HAL_RCC_OscConfig+0x474>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0f0      	beq.n	800628a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d106      	bne.n	80062be <HAL_RCC_OscConfig+0x2ea>
 80062b0:	4b64      	ldr	r3, [pc, #400]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80062b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b4:	4a63      	ldr	r2, [pc, #396]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80062bc:	e01c      	b.n	80062f8 <HAL_RCC_OscConfig+0x324>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d10c      	bne.n	80062e0 <HAL_RCC_OscConfig+0x30c>
 80062c6:	4b5f      	ldr	r3, [pc, #380]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80062c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ca:	4a5e      	ldr	r2, [pc, #376]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80062cc:	f043 0304 	orr.w	r3, r3, #4
 80062d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062d2:	4b5c      	ldr	r3, [pc, #368]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d6:	4a5b      	ldr	r2, [pc, #364]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80062de:	e00b      	b.n	80062f8 <HAL_RCC_OscConfig+0x324>
 80062e0:	4b58      	ldr	r3, [pc, #352]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80062e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e4:	4a57      	ldr	r2, [pc, #348]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ec:	4b55      	ldr	r3, [pc, #340]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80062ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f0:	4a54      	ldr	r2, [pc, #336]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80062f2:	f023 0304 	bic.w	r3, r3, #4
 80062f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d015      	beq.n	800632c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006300:	f7ff fb86 	bl	8005a10 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006306:	e00a      	b.n	800631e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006308:	f7ff fb82 	bl	8005a10 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e0cb      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631e:	4b49      	ldr	r3, [pc, #292]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0ee      	beq.n	8006308 <HAL_RCC_OscConfig+0x334>
 800632a:	e014      	b.n	8006356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632c:	f7ff fb70 	bl	8005a10 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006332:	e00a      	b.n	800634a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006334:	f7ff fb6c 	bl	8005a10 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e0b5      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800634a:	4b3e      	ldr	r3, [pc, #248]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1ee      	bne.n	8006334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d105      	bne.n	8006368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800635c:	4b39      	ldr	r3, [pc, #228]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 800635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006360:	4a38      	ldr	r2, [pc, #224]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 8006362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006366:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 80a1 	beq.w	80064b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006372:	4b34      	ldr	r3, [pc, #208]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 030c 	and.w	r3, r3, #12
 800637a:	2b08      	cmp	r3, #8
 800637c:	d05c      	beq.n	8006438 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d141      	bne.n	800640a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006386:	4b31      	ldr	r3, [pc, #196]	@ (800644c <HAL_RCC_OscConfig+0x478>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638c:	f7ff fb40 	bl	8005a10 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006394:	f7ff fb3c 	bl	8005a10 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e087      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063a6:	4b27      	ldr	r3, [pc, #156]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69da      	ldr	r2, [r3, #28]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c0:	019b      	lsls	r3, r3, #6
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	3b01      	subs	r3, #1
 80063cc:	041b      	lsls	r3, r3, #16
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d4:	061b      	lsls	r3, r3, #24
 80063d6:	491b      	ldr	r1, [pc, #108]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063dc:	4b1b      	ldr	r3, [pc, #108]	@ (800644c <HAL_RCC_OscConfig+0x478>)
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e2:	f7ff fb15 	bl	8005a10 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ea:	f7ff fb11 	bl	8005a10 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e05c      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063fc:	4b11      	ldr	r3, [pc, #68]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f0      	beq.n	80063ea <HAL_RCC_OscConfig+0x416>
 8006408:	e054      	b.n	80064b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800640a:	4b10      	ldr	r3, [pc, #64]	@ (800644c <HAL_RCC_OscConfig+0x478>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006410:	f7ff fafe 	bl	8005a10 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006418:	f7ff fafa 	bl	8005a10 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e045      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800642a:	4b06      	ldr	r3, [pc, #24]	@ (8006444 <HAL_RCC_OscConfig+0x470>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1f0      	bne.n	8006418 <HAL_RCC_OscConfig+0x444>
 8006436:	e03d      	b.n	80064b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d107      	bne.n	8006450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e038      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
 8006444:	40023800 	.word	0x40023800
 8006448:	40007000 	.word	0x40007000
 800644c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006450:	4b1b      	ldr	r3, [pc, #108]	@ (80064c0 <HAL_RCC_OscConfig+0x4ec>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d028      	beq.n	80064b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006468:	429a      	cmp	r2, r3
 800646a:	d121      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006476:	429a      	cmp	r2, r3
 8006478:	d11a      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006480:	4013      	ands	r3, r2
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006488:	4293      	cmp	r3, r2
 800648a:	d111      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	3b01      	subs	r3, #1
 800649a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800649c:	429a      	cmp	r2, r3
 800649e:	d107      	bne.n	80064b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d001      	beq.n	80064b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40023800 	.word	0x40023800

080064c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0cc      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064d8:	4b68      	ldr	r3, [pc, #416]	@ (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d90c      	bls.n	8006500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e6:	4b65      	ldr	r3, [pc, #404]	@ (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ee:	4b63      	ldr	r3, [pc, #396]	@ (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d001      	beq.n	8006500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0b8      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d020      	beq.n	800654e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006518:	4b59      	ldr	r3, [pc, #356]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	4a58      	ldr	r2, [pc, #352]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006522:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006530:	4b53      	ldr	r3, [pc, #332]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	4a52      	ldr	r2, [pc, #328]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800653a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800653c:	4b50      	ldr	r3, [pc, #320]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	494d      	ldr	r1, [pc, #308]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	4313      	orrs	r3, r2
 800654c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d044      	beq.n	80065e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d107      	bne.n	8006572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006562:	4b47      	ldr	r3, [pc, #284]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d119      	bne.n	80065a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e07f      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d003      	beq.n	8006582 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800657e:	2b03      	cmp	r3, #3
 8006580:	d107      	bne.n	8006592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006582:	4b3f      	ldr	r3, [pc, #252]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e06f      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006592:	4b3b      	ldr	r3, [pc, #236]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e067      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065a2:	4b37      	ldr	r3, [pc, #220]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f023 0203 	bic.w	r2, r3, #3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	4934      	ldr	r1, [pc, #208]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065b4:	f7ff fa2c 	bl	8005a10 <HAL_GetTick>
 80065b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ba:	e00a      	b.n	80065d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065bc:	f7ff fa28 	bl	8005a10 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e04f      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 020c 	and.w	r2, r3, #12
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d1eb      	bne.n	80065bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065e4:	4b25      	ldr	r3, [pc, #148]	@ (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d20c      	bcs.n	800660c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f2:	4b22      	ldr	r3, [pc, #136]	@ (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fa:	4b20      	ldr	r3, [pc, #128]	@ (800667c <HAL_RCC_ClockConfig+0x1b8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	d001      	beq.n	800660c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e032      	b.n	8006672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006618:	4b19      	ldr	r3, [pc, #100]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	4916      	ldr	r1, [pc, #88]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	4313      	orrs	r3, r2
 8006628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006636:	4b12      	ldr	r3, [pc, #72]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	490e      	ldr	r1, [pc, #56]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	4313      	orrs	r3, r2
 8006648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800664a:	f000 f821 	bl	8006690 <HAL_RCC_GetSysClockFreq>
 800664e:	4602      	mov	r2, r0
 8006650:	4b0b      	ldr	r3, [pc, #44]	@ (8006680 <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	091b      	lsrs	r3, r3, #4
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	490a      	ldr	r1, [pc, #40]	@ (8006684 <HAL_RCC_ClockConfig+0x1c0>)
 800665c:	5ccb      	ldrb	r3, [r1, r3]
 800665e:	fa22 f303 	lsr.w	r3, r2, r3
 8006662:	4a09      	ldr	r2, [pc, #36]	@ (8006688 <HAL_RCC_ClockConfig+0x1c4>)
 8006664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006666:	4b09      	ldr	r3, [pc, #36]	@ (800668c <HAL_RCC_ClockConfig+0x1c8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff f8bc 	bl	80057e8 <HAL_InitTick>

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40023c00 	.word	0x40023c00
 8006680:	40023800 	.word	0x40023800
 8006684:	080070b4 	.word	0x080070b4
 8006688:	20000010 	.word	0x20000010
 800668c:	20000014 	.word	0x20000014

08006690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006694:	b094      	sub	sp, #80	@ 0x50
 8006696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066a8:	4b79      	ldr	r3, [pc, #484]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 030c 	and.w	r3, r3, #12
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d00d      	beq.n	80066d0 <HAL_RCC_GetSysClockFreq+0x40>
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	f200 80e1 	bhi.w	800687c <HAL_RCC_GetSysClockFreq+0x1ec>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <HAL_RCC_GetSysClockFreq+0x34>
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d003      	beq.n	80066ca <HAL_RCC_GetSysClockFreq+0x3a>
 80066c2:	e0db      	b.n	800687c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066c4:	4b73      	ldr	r3, [pc, #460]	@ (8006894 <HAL_RCC_GetSysClockFreq+0x204>)
 80066c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066c8:	e0db      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ca:	4b73      	ldr	r3, [pc, #460]	@ (8006898 <HAL_RCC_GetSysClockFreq+0x208>)
 80066cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066ce:	e0d8      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066d0:	4b6f      	ldr	r3, [pc, #444]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066da:	4b6d      	ldr	r3, [pc, #436]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d063      	beq.n	80067ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	099b      	lsrs	r3, r3, #6
 80066ec:	2200      	movs	r2, #0
 80066ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80066f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066fa:	2300      	movs	r3, #0
 80066fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006702:	4622      	mov	r2, r4
 8006704:	462b      	mov	r3, r5
 8006706:	f04f 0000 	mov.w	r0, #0
 800670a:	f04f 0100 	mov.w	r1, #0
 800670e:	0159      	lsls	r1, r3, #5
 8006710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006714:	0150      	lsls	r0, r2, #5
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4621      	mov	r1, r4
 800671c:	1a51      	subs	r1, r2, r1
 800671e:	6139      	str	r1, [r7, #16]
 8006720:	4629      	mov	r1, r5
 8006722:	eb63 0301 	sbc.w	r3, r3, r1
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	f04f 0300 	mov.w	r3, #0
 8006730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006734:	4659      	mov	r1, fp
 8006736:	018b      	lsls	r3, r1, #6
 8006738:	4651      	mov	r1, sl
 800673a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800673e:	4651      	mov	r1, sl
 8006740:	018a      	lsls	r2, r1, #6
 8006742:	4651      	mov	r1, sl
 8006744:	ebb2 0801 	subs.w	r8, r2, r1
 8006748:	4659      	mov	r1, fp
 800674a:	eb63 0901 	sbc.w	r9, r3, r1
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800675a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800675e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006762:	4690      	mov	r8, r2
 8006764:	4699      	mov	r9, r3
 8006766:	4623      	mov	r3, r4
 8006768:	eb18 0303 	adds.w	r3, r8, r3
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	462b      	mov	r3, r5
 8006770:	eb49 0303 	adc.w	r3, r9, r3
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006782:	4629      	mov	r1, r5
 8006784:	024b      	lsls	r3, r1, #9
 8006786:	4621      	mov	r1, r4
 8006788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800678c:	4621      	mov	r1, r4
 800678e:	024a      	lsls	r2, r1, #9
 8006790:	4610      	mov	r0, r2
 8006792:	4619      	mov	r1, r3
 8006794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006796:	2200      	movs	r2, #0
 8006798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800679a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800679c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067a0:	f7f9 fd60 	bl	8000264 <__aeabi_uldivmod>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4613      	mov	r3, r2
 80067aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ac:	e058      	b.n	8006860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ae:	4b38      	ldr	r3, [pc, #224]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	099b      	lsrs	r3, r3, #6
 80067b4:	2200      	movs	r2, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	4611      	mov	r1, r2
 80067ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067be:	623b      	str	r3, [r7, #32]
 80067c0:	2300      	movs	r3, #0
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067c8:	4642      	mov	r2, r8
 80067ca:	464b      	mov	r3, r9
 80067cc:	f04f 0000 	mov.w	r0, #0
 80067d0:	f04f 0100 	mov.w	r1, #0
 80067d4:	0159      	lsls	r1, r3, #5
 80067d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067da:	0150      	lsls	r0, r2, #5
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4641      	mov	r1, r8
 80067e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80067e6:	4649      	mov	r1, r9
 80067e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006800:	ebb2 040a 	subs.w	r4, r2, sl
 8006804:	eb63 050b 	sbc.w	r5, r3, fp
 8006808:	f04f 0200 	mov.w	r2, #0
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	00eb      	lsls	r3, r5, #3
 8006812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006816:	00e2      	lsls	r2, r4, #3
 8006818:	4614      	mov	r4, r2
 800681a:	461d      	mov	r5, r3
 800681c:	4643      	mov	r3, r8
 800681e:	18e3      	adds	r3, r4, r3
 8006820:	603b      	str	r3, [r7, #0]
 8006822:	464b      	mov	r3, r9
 8006824:	eb45 0303 	adc.w	r3, r5, r3
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006836:	4629      	mov	r1, r5
 8006838:	028b      	lsls	r3, r1, #10
 800683a:	4621      	mov	r1, r4
 800683c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006840:	4621      	mov	r1, r4
 8006842:	028a      	lsls	r2, r1, #10
 8006844:	4610      	mov	r0, r2
 8006846:	4619      	mov	r1, r3
 8006848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800684a:	2200      	movs	r2, #0
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	61fa      	str	r2, [r7, #28]
 8006850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006854:	f7f9 fd06 	bl	8000264 <__aeabi_uldivmod>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4613      	mov	r3, r2
 800685e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006860:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <HAL_RCC_GetSysClockFreq+0x200>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	0c1b      	lsrs	r3, r3, #16
 8006866:	f003 0303 	and.w	r3, r3, #3
 800686a:	3301      	adds	r3, #1
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006870:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006874:	fbb2 f3f3 	udiv	r3, r2, r3
 8006878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800687a:	e002      	b.n	8006882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800687c:	4b05      	ldr	r3, [pc, #20]	@ (8006894 <HAL_RCC_GetSysClockFreq+0x204>)
 800687e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006884:	4618      	mov	r0, r3
 8006886:	3750      	adds	r7, #80	@ 0x50
 8006888:	46bd      	mov	sp, r7
 800688a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800688e:	bf00      	nop
 8006890:	40023800 	.word	0x40023800
 8006894:	00f42400 	.word	0x00f42400
 8006898:	007a1200 	.word	0x007a1200

0800689c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068a0:	4b03      	ldr	r3, [pc, #12]	@ (80068b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80068a2:	681b      	ldr	r3, [r3, #0]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	20000010 	.word	0x20000010

080068b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068b8:	f7ff fff0 	bl	800689c <HAL_RCC_GetHCLKFreq>
 80068bc:	4602      	mov	r2, r0
 80068be:	4b05      	ldr	r3, [pc, #20]	@ (80068d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	0a9b      	lsrs	r3, r3, #10
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	4903      	ldr	r1, [pc, #12]	@ (80068d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068ca:	5ccb      	ldrb	r3, [r1, r3]
 80068cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40023800 	.word	0x40023800
 80068d8:	080070c4 	.word	0x080070c4

080068dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	220f      	movs	r2, #15
 80068ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068ec:	4b12      	ldr	r3, [pc, #72]	@ (8006938 <HAL_RCC_GetClockConfig+0x5c>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 0203 	and.w	r2, r3, #3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006938 <HAL_RCC_GetClockConfig+0x5c>)
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006904:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <HAL_RCC_GetClockConfig+0x5c>)
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006910:	4b09      	ldr	r3, [pc, #36]	@ (8006938 <HAL_RCC_GetClockConfig+0x5c>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	08db      	lsrs	r3, r3, #3
 8006916:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800691e:	4b07      	ldr	r3, [pc, #28]	@ (800693c <HAL_RCC_GetClockConfig+0x60>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0207 	and.w	r2, r3, #7
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	601a      	str	r2, [r3, #0]
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	40023800 	.word	0x40023800
 800693c:	40023c00 	.word	0x40023c00

08006940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e041      	b.n	80069d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f839 	bl	80069de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f000 f9c0 	bl	8006d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d001      	beq.n	8006a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e04e      	b.n	8006aaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a23      	ldr	r2, [pc, #140]	@ (8006ab8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d022      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a36:	d01d      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006abc <HAL_TIM_Base_Start_IT+0xc8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d018      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a1c      	ldr	r2, [pc, #112]	@ (8006ac4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00e      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d009      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a19      	ldr	r2, [pc, #100]	@ (8006acc <HAL_TIM_Base_Start_IT+0xd8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_TIM_Base_Start_IT+0x80>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a18      	ldr	r2, [pc, #96]	@ (8006ad0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d111      	bne.n	8006a98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b06      	cmp	r3, #6
 8006a84:	d010      	beq.n	8006aa8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0201 	orr.w	r2, r2, #1
 8006a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a96:	e007      	b.n	8006aa8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40010400 	.word	0x40010400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40001800 	.word	0x40001800

08006ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d020      	beq.n	8006b38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01b      	beq.n	8006b38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0202 	mvn.w	r2, #2
 8006b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f8d2 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006b24:	e005      	b.n	8006b32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f8c4 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f8d5 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f003 0304 	and.w	r3, r3, #4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d020      	beq.n	8006b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01b      	beq.n	8006b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0204 	mvn.w	r2, #4
 8006b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f8ac 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006b70:	e005      	b.n	8006b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f89e 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f8af 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d020      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01b      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f06f 0208 	mvn.w	r2, #8
 8006ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f886 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006bbc:	e005      	b.n	8006bca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f878 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f889 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 0310 	and.w	r3, r3, #16
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d020      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01b      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0210 	mvn.w	r2, #16
 8006bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f860 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 8006c08:	e005      	b.n	8006c16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f852 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f863 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00c      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0201 	mvn.w	r2, #1
 8006c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fe fd92 	bl	8005764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00c      	beq.n	8006c64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d007      	beq.n	8006c64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f906 	bl	8006e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00c      	beq.n	8006c88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d007      	beq.n	8006c88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f834 	bl	8006cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00c      	beq.n	8006cac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d007      	beq.n	8006cac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0220 	mvn.w	r2, #32
 8006ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f8d8 	bl	8006e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a46      	ldr	r2, [pc, #280]	@ (8006e30 <TIM_Base_SetConfig+0x12c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d22:	d00f      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a43      	ldr	r2, [pc, #268]	@ (8006e34 <TIM_Base_SetConfig+0x130>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a42      	ldr	r2, [pc, #264]	@ (8006e38 <TIM_Base_SetConfig+0x134>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a41      	ldr	r2, [pc, #260]	@ (8006e3c <TIM_Base_SetConfig+0x138>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a40      	ldr	r2, [pc, #256]	@ (8006e40 <TIM_Base_SetConfig+0x13c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d108      	bne.n	8006d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a35      	ldr	r2, [pc, #212]	@ (8006e30 <TIM_Base_SetConfig+0x12c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d02b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d64:	d027      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a32      	ldr	r2, [pc, #200]	@ (8006e34 <TIM_Base_SetConfig+0x130>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d023      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a31      	ldr	r2, [pc, #196]	@ (8006e38 <TIM_Base_SetConfig+0x134>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d01f      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a30      	ldr	r2, [pc, #192]	@ (8006e3c <TIM_Base_SetConfig+0x138>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d01b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a2f      	ldr	r2, [pc, #188]	@ (8006e40 <TIM_Base_SetConfig+0x13c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d017      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a2e      	ldr	r2, [pc, #184]	@ (8006e44 <TIM_Base_SetConfig+0x140>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a2d      	ldr	r2, [pc, #180]	@ (8006e48 <TIM_Base_SetConfig+0x144>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00f      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a2c      	ldr	r2, [pc, #176]	@ (8006e4c <TIM_Base_SetConfig+0x148>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a2b      	ldr	r2, [pc, #172]	@ (8006e50 <TIM_Base_SetConfig+0x14c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d007      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2a      	ldr	r2, [pc, #168]	@ (8006e54 <TIM_Base_SetConfig+0x150>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a29      	ldr	r2, [pc, #164]	@ (8006e58 <TIM_Base_SetConfig+0x154>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d108      	bne.n	8006dc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a10      	ldr	r2, [pc, #64]	@ (8006e30 <TIM_Base_SetConfig+0x12c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_Base_SetConfig+0xf8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a12      	ldr	r2, [pc, #72]	@ (8006e40 <TIM_Base_SetConfig+0x13c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d103      	bne.n	8006e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d105      	bne.n	8006e22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f023 0201 	bic.w	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	611a      	str	r2, [r3, #16]
  }
}
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40010000 	.word	0x40010000
 8006e34:	40000400 	.word	0x40000400
 8006e38:	40000800 	.word	0x40000800
 8006e3c:	40000c00 	.word	0x40000c00
 8006e40:	40010400 	.word	0x40010400
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40014400 	.word	0x40014400
 8006e4c:	40014800 	.word	0x40014800
 8006e50:	40001800 	.word	0x40001800
 8006e54:	40001c00 	.word	0x40001c00
 8006e58:	40002000 	.word	0x40002000

08006e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <memcmp>:
 8006e84:	b510      	push	{r4, lr}
 8006e86:	3901      	subs	r1, #1
 8006e88:	4402      	add	r2, r0
 8006e8a:	4290      	cmp	r0, r2
 8006e8c:	d101      	bne.n	8006e92 <memcmp+0xe>
 8006e8e:	2000      	movs	r0, #0
 8006e90:	e005      	b.n	8006e9e <memcmp+0x1a>
 8006e92:	7803      	ldrb	r3, [r0, #0]
 8006e94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	d001      	beq.n	8006ea0 <memcmp+0x1c>
 8006e9c:	1b18      	subs	r0, r3, r4
 8006e9e:	bd10      	pop	{r4, pc}
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	e7f2      	b.n	8006e8a <memcmp+0x6>

08006ea4 <memset>:
 8006ea4:	4402      	add	r2, r0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d100      	bne.n	8006eae <memset+0xa>
 8006eac:	4770      	bx	lr
 8006eae:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb2:	e7f9      	b.n	8006ea8 <memset+0x4>

08006eb4 <__libc_init_array>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	4d0d      	ldr	r5, [pc, #52]	@ (8006eec <__libc_init_array+0x38>)
 8006eb8:	4c0d      	ldr	r4, [pc, #52]	@ (8006ef0 <__libc_init_array+0x3c>)
 8006eba:	1b64      	subs	r4, r4, r5
 8006ebc:	10a4      	asrs	r4, r4, #2
 8006ebe:	2600      	movs	r6, #0
 8006ec0:	42a6      	cmp	r6, r4
 8006ec2:	d109      	bne.n	8006ed8 <__libc_init_array+0x24>
 8006ec4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ef4 <__libc_init_array+0x40>)
 8006ec6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ef8 <__libc_init_array+0x44>)
 8006ec8:	f000 f826 	bl	8006f18 <_init>
 8006ecc:	1b64      	subs	r4, r4, r5
 8006ece:	10a4      	asrs	r4, r4, #2
 8006ed0:	2600      	movs	r6, #0
 8006ed2:	42a6      	cmp	r6, r4
 8006ed4:	d105      	bne.n	8006ee2 <__libc_init_array+0x2e>
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006edc:	4798      	blx	r3
 8006ede:	3601      	adds	r6, #1
 8006ee0:	e7ee      	b.n	8006ec0 <__libc_init_array+0xc>
 8006ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee6:	4798      	blx	r3
 8006ee8:	3601      	adds	r6, #1
 8006eea:	e7f2      	b.n	8006ed2 <__libc_init_array+0x1e>
 8006eec:	080070d4 	.word	0x080070d4
 8006ef0:	080070d4 	.word	0x080070d4
 8006ef4:	080070d4 	.word	0x080070d4
 8006ef8:	080070d8 	.word	0x080070d8

08006efc <memcpy>:
 8006efc:	440a      	add	r2, r1
 8006efe:	4291      	cmp	r1, r2
 8006f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f04:	d100      	bne.n	8006f08 <memcpy+0xc>
 8006f06:	4770      	bx	lr
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f12:	4291      	cmp	r1, r2
 8006f14:	d1f9      	bne.n	8006f0a <memcpy+0xe>
 8006f16:	bd10      	pop	{r4, pc}

08006f18 <_init>:
 8006f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1a:	bf00      	nop
 8006f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1e:	bc08      	pop	{r3}
 8006f20:	469e      	mov	lr, r3
 8006f22:	4770      	bx	lr

08006f24 <_fini>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	bf00      	nop
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr
